{
  "openapi": "3.1.0",
  "info": {
    "title": "AIRBIT IoT Workspace REST API",
    "description": "This API is intended to work with the application **AIRBIT IoT Workspace** .",
    "contact": { "name": "AIRBIT", "url": "https://air-bit.ru/" },
    "version": "2.0.1"
  },
  "servers": [
    { "url": "http://geo-api.air-bit.ru:8081/", "description": "Mock Server" }
  ],
  "paths": {
    "/auth/login/": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "description": "User login",
        "operationId": "login_user",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        },
        "deprecated": true
      }
    },
    "/auth/logout/": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "description": "User logout",
        "operationId": "logout_user",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        },
        "deprecated": true
      }
    },
    "/auth/register/": {
      "post": {
        "tags": ["Auth"],
        "summary": "User register",
        "description": "User register",
        "operationId": "register_user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserRegisterScheme" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/auth/confirm-register/{token}/": {
      "post": {
        "tags": ["Auth"],
        "summary": "User confirm register",
        "description": "User confirm register",
        "operationId": "confirm_register",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Token" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/auth/recovery/": {
      "post": {
        "tags": ["Auth"],
        "summary": "User recovery password by email or phone",
        "description": "User recovery password by email or phone",
        "operationId": "recovery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRecoveryPasswordScheme"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/auth/reset/{token}/": {
      "post": {
        "tags": ["Auth"],
        "summary": "Reset user password",
        "description": "Reset user password",
        "operationId": "reset_password",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Token" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ResetPasswordScheme" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/dashboard/": {
      "get": {
        "tags": ["Dashboard"],
        "summary": "Get a list of dashboards",
        "description": "Get a list of dashboards",
        "operationId": "get_dashboards",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListDictItemScheme" }
              }
            }
          }
        },
        "security": [{ "AWSAuthenticator": [] }]
      }
    },
    "/dashboard/{id}/": {
      "get": {
        "tags": ["Dashboard"],
        "summary": "Get a list of dashboards",
        "description": "Get a list of dashboards",
        "operationId": "get_dashboard",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DictItemScheme" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Dashboard"],
        "summary": "Update dashboard by id",
        "description": "Update dashboard by id",
        "operationId": "update_dashboard",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DashboardScheme" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DictItemBaseScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Dashboard"],
        "summary": "Delete dashboard by id",
        "description": "Delete dashboard by id",
        "operationId": "delete_dashboard",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "unique dashboard id",
              "title": "Id"
            },
            "description": "unique dashboard id"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/dashboard/{id}/full-struct/": {
      "get": {
        "tags": ["Dashboard"],
        "summary": "Get full struct dashboard by id",
        "description": "Get full struct dashboard by id",
        "operationId": "get_dashboard_full_struct",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardFullStructScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/dashboard/{dash_type}/": {
      "post": {
        "tags": ["Dashboard"],
        "summary": "Add dashboard",
        "description": "Add dashboard",
        "operationId": "add_dashboard",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "dash_type",
            "in": "path",
            "required": true,
            "schema": { "$ref": "#/components/schemas/DashboardType" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DashboardScheme" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DictItemBaseScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/addresses/": {
      "get": {
        "tags": ["Addresses"],
        "summary": "Get a list of addresses",
        "description": "Get a list of addresses",
        "operationId": "get_addresses",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Status" }],
              "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n ",
              "title": "Status"
            },
            "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n "
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "text value for search by name",
              "title": "Text"
            },
            "description": "text value for search by name"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_AddressNodeScheme_"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Addresses"],
        "summary": "Add address",
        "description": "Add address",
        "operationId": "add_address",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAddressNodeScheme"
              },
              "examples": {
                "address_root": {
                  "summary": "Address node(root)",
                  "description": "Address node(root)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "name": "Volodarskogo",
                    "prefix": "str.",
                    "postfix": "62k2"
                  }
                },
                "address_node": {
                  "summary": "Address node",
                  "description": "Address node",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "parent_id": 1,
                    "name": "Volodarskogo",
                    "prefix": "str.",
                    "postfix": "62k2"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AddressNodeScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/addresses/{id}/": {
      "get": {
        "tags": ["Addresses"],
        "summary": "Get address by id",
        "description": "Get address by id",
        "operationId": "get_address",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AddressNodeScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Addresses"],
        "summary": "Update address by id",
        "description": "Update address by id",
        "operationId": "update_address",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateAddressNode" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AddressNodeScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Addresses"],
        "summary": "Delete address by id",
        "description": "Delete address by id",
        "operationId": "delete_address",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/addresses/{addr_id}/norm/": {
      "get": {
        "tags": ["Addresses"],
        "summary": "Get a list of norms",
        "description": "Get a list of norms",
        "operationId": "get_norms",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "addr_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "address id",
              "title": "Addr Id"
            },
            "description": "address id"
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "text value for search by name",
              "title": "Text"
            },
            "description": "text value for search by name"
          },
          {
            "name": "group_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "object metric group id",
              "title": "Group Id"
            },
            "description": "object metric group id"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_AddressNodeNormScheme_"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Addresses"],
        "summary": "Add address norm",
        "description": "Add address norm",
        "operationId": "create_norm",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "addr_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "address id",
              "title": "Addr Id"
            },
            "description": "address id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAddressNormScheme"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressNodeNormScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/addresses/{addr_id}/norm/{id}/": {
      "get": {
        "tags": ["Addresses"],
        "summary": "Get address norm",
        "description": "Get address norm",
        "operationId": "get_norm",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "norm id",
              "title": "Id"
            },
            "description": "norm id"
          },
          {
            "name": "addr_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "address id",
              "title": "Addr Id"
            },
            "description": "address id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressNodeNormScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Addresses"],
        "summary": "Update address norm",
        "description": "Update address norm",
        "operationId": "update_norm",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "addr_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "address id",
              "title": "Addr Id"
            },
            "description": "address id"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAddressNormScheme"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressNodeNormScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Addresses"],
        "summary": "Delete address norm by id",
        "description": "Delete address norm by id",
        "operationId": "delete_norm",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "address norm id",
              "title": "Id"
            },
            "description": "address norm id"
          },
          {
            "name": "addr_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "address id",
              "title": "Addr Id"
            },
            "description": "address id"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/devices/": {
      "get": {
        "tags": ["Device"],
        "summary": "Get a list of devices",
        "description": "Get a list of devices",
        "operationId": "get_devices",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "addr_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "unique address identifier",
              "title": "Addr Id"
            },
            "description": "unique address identifier"
          },
          {
            "name": "group_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "list of unique group identifiers",
              "title": "Group Ids"
            },
            "description": "list of unique group identifiers"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Status" }],
              "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n ",
              "title": "Status"
            },
            "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n "
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "text value for search by name",
              "title": "Text"
            },
            "description": "text value for search by name"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Page_DeviceScheme_" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Device"],
        "summary": "Add device",
        "description": "Add device",
        "operationId": "add_device",
        "security": [{ "AWSAuthenticator": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateDeviceScheme" },
              "examples": {
                "base_device": {
                  "summary": "Base device",
                  "description": "Base example device scheme",
                  "value": {
                    "name": "Test device",
                    "net_id_type_id": 1,
                    "net_id": "FFFFFFFFFFFFFFFA",
                    "conv_group_id": 1,
                    "groups": [1, 2],
                    "longitude": 73.86035,
                    "latitude": 67.63456,
                    "altitude": 87,
                    "comments": "This test Device base dcheme"
                  }
                },
                "template_device": {
                  "summary": "Template device",
                  "description": "Base example template device scheme",
                  "value": {
                    "name": "Test device",
                    "net_id_type_id": 1,
                    "net_id": "FFFFFFFFFFFFFFFA",
                    "templ_id": 1,
                    "groups": [1, 2],
                    "longitude": 73.86035,
                    "latitude": 67.63456,
                    "altitude": 87,
                    "comments": "This test Device base dcheme"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DeviceScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/devices/{id}/": {
      "get": {
        "tags": ["Device"],
        "summary": "Get device by id",
        "description": "Get device by id",
        "operationId": "get_device",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "unique device id",
              "title": "Id"
            },
            "description": "unique device id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DeviceScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Device"],
        "summary": "Update device by id",
        "description": "Update device by id",
        "operationId": "update_device",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateDeviceScheme" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DeviceScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Device"],
        "summary": "Delete device by id",
        "description": "Delete device by id",
        "operationId": "delete_device",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "unique device id",
              "title": "Id"
            },
            "description": "unique device id"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/groups/{type}/": {
      "get": {
        "tags": ["Groups"],
        "summary": "Get a list of groups",
        "description": "Get a list of groups",
        "operationId": "get_groups",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/GroupType" }],
              "description": "Group type: \n * 1 - DeviceGroup \n \n * 2 - ObjectGroup \n \n * 3 - ObjectMetricGroup \n ",
              "title": "Type"
            },
            "description": "Group type: \n * 1 - DeviceGroup \n \n * 2 - ObjectGroup \n \n * 3 - ObjectMetricGroup \n "
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Status" }],
              "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n ",
              "title": "Status"
            },
            "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n "
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "text value for search by name",
              "title": "Text"
            },
            "description": "text value for search by name"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Page_GroupScheme_" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Groups"],
        "summary": "Add group",
        "description": "Add group",
        "operationId": "add_group",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/GroupType" }],
              "description": "Group type: \n * 1 - DeviceGroup \n \n * 2 - ObjectGroup \n \n * 3 - ObjectMetricGroup \n ",
              "title": "Type"
            },
            "description": "Group type: \n * 1 - DeviceGroup \n \n * 2 - ObjectGroup \n \n * 3 - ObjectMetricGroup \n "
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateGroupScheme" },
              "examples": {
                "device_group": {
                  "summary": "Device group",
                  "description": "Device group",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "name": "Test device group",
                    "comments": "This test device group",
                    "color": "#a94d4d",
                    "is_virtual": false
                  }
                },
                "object_group": {
                  "summary": "Object group",
                  "description": "Object group",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "name": "Test object group",
                    "comments": "This test device group",
                    "color": "#a94d4d",
                    "is_virtual": true,
                    "num_expr": "og",
                    "tagged_groups": [{ "tag": "og", "tagged_group_id": 1 }]
                  }
                },
                "object_metric_group": {
                  "summary": "Object metric group",
                  "description": "Object group",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "name": "Test object metric group",
                    "comments": "This test object metric group",
                    "color": "#a94d4d",
                    "is_virtual": true,
                    "num_expr": "m+g",
                    "tagged_groups": [
                      { "tag": "m", "tagged_group_id": 1 },
                      { "tag": "g", "tagged_group_id": 2 }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupFullStructScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/groups/{type}/{id}/": {
      "get": {
        "tags": ["Groups"],
        "summary": "Get group by id",
        "description": "Get group by id",
        "operationId": "get_group",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/GroupType" }],
              "description": "Group type: \n * 1 - DeviceGroup \n \n * 2 - ObjectGroup \n \n * 3 - ObjectMetricGroup \n ",
              "title": "Type"
            },
            "description": "Group type: \n * 1 - DeviceGroup \n \n * 2 - ObjectGroup \n \n * 3 - ObjectMetricGroup \n "
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupFullStructScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Groups"],
        "summary": "Update group by id",
        "description": "Update group by id",
        "operationId": "update_group",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "unique group id",
              "title": "Id"
            },
            "description": "unique group id"
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/GroupType" }],
              "description": "Group type: \n * 1 - DeviceGroup \n \n * 2 - ObjectGroup \n \n * 3 - ObjectMetricGroup \n ",
              "title": "Type"
            },
            "description": "Group type: \n * 1 - DeviceGroup \n \n * 2 - ObjectGroup \n \n * 3 - ObjectMetricGroup \n "
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Groups"],
        "summary": "Delete group by id",
        "description": "Delete group by id",
        "operationId": "delete_group",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/GroupType" }],
              "description": "Group type: \n * 1 - DeviceGroup \n \n * 2 - ObjectGroup \n \n * 3 - ObjectMetricGroup \n ",
              "title": "Type"
            },
            "description": "Group type: \n * 1 - DeviceGroup \n \n * 2 - ObjectGroup \n \n * 3 - ObjectMetricGroup \n "
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "unique group id",
              "title": "Id"
            },
            "description": "unique group id"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/device-netid-types/": {
      "get": {
        "tags": ["Device NetId types"],
        "summary": "Get a list of device net id types",
        "description": "Get a list of device net id types",
        "operationId": "get_device_net_id_types",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Status" }],
              "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n ",
              "title": "Status"
            },
            "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n "
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "text value for search by name",
              "title": "Text"
            },
            "description": "text value for search by name"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_DeviceNetIdTypeScheme_"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Device NetId types"],
        "summary": "Add device net id type",
        "description": "Add device net id type",
        "operationId": "add_device_net_id_type",
        "security": [{ "AWSAuthenticator": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDeviceNetIdTypeScheme"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceNetIdTypeScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/device-netid-types/{id}/": {
      "get": {
        "tags": ["Device NetId types"],
        "summary": "Get device net id type by id",
        "description": "Get device net id type by id",
        "operationId": "get_device_net_id_type",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceNetIdTypeScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Device NetId types"],
        "summary": "Update device net id type by id",
        "description": "Update device net id type by id",
        "operationId": "update_device_net_id_type",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDeviceNetIdTypeScheme"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceNetIdTypeScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Device NetId types"],
        "summary": "Delete device net id type by id",
        "description": "Delete device net id type by id",
        "operationId": "delete_device_net_id_type",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/objects/favorite/": {
      "post": {
        "tags": ["Object"],
        "summary": "Add object to dashboard",
        "description": "Add object to dashboard",
        "operationId": "favorite_object",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "obj_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Obj Id" }
          },
          {
            "name": "dash_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Dash Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/objects/{id}/full-object-struct/": {
      "get": {
        "tags": ["Object"],
        "summary": "Metrics of the object",
        "description": "Metrics of the object",
        "operationId": "full_object_struct",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "unique object id",
              "title": "Id"
            },
            "description": "unique object id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectFullStructScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/objects/": {
      "get": {
        "tags": ["Object"],
        "summary": "Get a list of objects",
        "description": "Get a list of objects",
        "operationId": "get_objects",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "addr_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "unique address identifier",
              "title": "Addr Id"
            },
            "description": "unique address identifier"
          },
          {
            "name": "group_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "list of unique group identifiers",
              "title": "Group Ids"
            },
            "description": "list of unique group identifiers"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Status" }],
              "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n ",
              "title": "Status"
            },
            "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n "
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "text value for search by name",
              "title": "Text"
            },
            "description": "text value for search by name"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_ObjectBaseScheme_"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Object"],
        "summary": "Add object",
        "description": "Add object",
        "operationId": "add_object",
        "security": [{ "AWSAuthenticator": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateObjectScheme" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ObjectBaseScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/objects/{id}/": {
      "get": {
        "tags": ["Object"],
        "summary": "Get object by id",
        "description": "Get object by id",
        "operationId": "get_object",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "unique object id",
              "title": "Id"
            },
            "description": "unique object id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ObjectBaseScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Object"],
        "summary": "Update object by id",
        "description": "Update object by id",
        "operationId": "update_object",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateObjectScheme" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ObjectBaseScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Object"],
        "summary": "Delete object by id",
        "description": "Delete object by id",
        "operationId": "delete_object",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "unique object id",
              "title": "Id"
            },
            "description": "unique object id"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/objects/object-types/": {
      "get": {
        "tags": ["Object"],
        "summary": "Get a list of object types",
        "description": "Get a list of object types",
        "operationId": "get_object_types",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "conv_attach",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/ConvAttach" }],
              "description": "ConvAttach: \n * 1 - Sync \n \n * 2 - Unsync \n ",
              "title": "Conv Attach"
            },
            "description": "ConvAttach: \n * 1 - Sync \n \n * 2 - Unsync \n "
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Status" }],
              "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n ",
              "title": "Status"
            },
            "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n "
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "text value for search by name",
              "title": "Text"
            },
            "description": "text value for search by name"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_ObjectTypeBaseScheme_"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/objects/object-types/{id}/": {
      "get": {
        "tags": ["Object"],
        "summary": "Get object type by id",
        "description": "Get object type by id",
        "operationId": "get_object_type",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique object type id",
              "title": "Id"
            },
            "description": "unique object type id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectTypeBaseScheme"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/objects/object-types/{id}/full-struct/": {
      "get": {
        "tags": ["Object"],
        "summary": "Get full struct of object type by id",
        "description": "Get full struct of object type by id",
        "operationId": "get_object_type_full_struct",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique object type id",
              "title": "Id"
            },
            "description": "unique object type id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectTypeFullStructScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/objects/object-type/": {
      "post": {
        "tags": ["Object"],
        "summary": "Add object type",
        "description": "Add object type",
        "operationId": "create_object_type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateObjectTypeScheme"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectTypeFullStructScheme"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }]
      }
    },
    "/objects/object-type/{id}/": {
      "put": {
        "tags": ["Object"],
        "summary": "Update object type by id",
        "description": "Update object type by id",
        "operationId": "update_object_types",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique object type id",
              "title": "Id"
            },
            "description": "unique object type id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Object"],
        "summary": "Delete object type by id",
        "description": "Delete object type by id",
        "operationId": "delete_object_type",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "unique object id",
              "title": "Id"
            },
            "description": "unique object id"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/templates/": {
      "get": {
        "tags": ["Templates"],
        "summary": "Get a list of templates",
        "description": "Get a list of templates",
        "operationId": "get_templates",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Status" }],
              "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n ",
              "title": "Status"
            },
            "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n "
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "text value for search by name",
              "title": "Text"
            },
            "description": "text value for search by name"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_TemplateScheme_"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Templates"],
        "summary": "Add template",
        "description": "Add template",
        "operationId": "add_template",
        "security": [{ "AWSAuthenticator": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateTemplateScheme" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TemplateScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/templates/{id}/": {
      "get": {
        "tags": ["Templates"],
        "summary": "Get template by id",
        "description": "Get template by id",
        "operationId": "get_template",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TemplateScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Templates"],
        "summary": "Update template by id",
        "description": "Update template by id",
        "operationId": "update_template",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateTemplateScheme" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TemplateScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Templates"],
        "summary": "Delete template by id",
        "description": "Delete template by id",
        "operationId": "delete_template",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/utility-resources/": {
      "get": {
        "tags": ["Utility resources"],
        "summary": "Get a list utility resources",
        "description": "Get a list utility resources",
        "operationId": "get_consumption_groups",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Status" }],
              "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n ",
              "title": "Status"
            },
            "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n "
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "text value for search by name",
              "title": "Text"
            },
            "description": "text value for search by name"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_ConsumptionGroupBaseScheme_"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Utility resources"],
        "summary": "Add utility resource",
        "description": "Add utility resource",
        "operationId": "create_consumption_groups",
        "security": [{ "AWSAuthenticator": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConsumptionGroupScheme"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumptionGroupBaseScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/utility-resources/{id}/": {
      "get": {
        "tags": ["Utility resources"],
        "summary": "Get utility resource by id",
        "description": "Get utility resource by id",
        "operationId": "get_consumption_group",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumptionGroupBaseScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Utility resources"],
        "summary": "Update utility resource by id",
        "description": "Update utility resource by id",
        "operationId": "update_consumption_group",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConsumptionGroupScheme"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumptionGroupBaseScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Utility resources"],
        "summary": "Delete utility resource by id",
        "description": "Delete utility resource by id",
        "operationId": "delete_consumption_group",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/data-converters-group/{id}/features/": {
      "post": {
        "tags": ["Data converters"],
        "summary": "Set features to converter group",
        "description": "Set features to converter group",
        "operationId": "set_features",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique object type id",
              "title": "Id"
            },
            "description": "unique object type id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/data-converters-group/{id}/copy/": {
      "post": {
        "tags": ["Data converters"],
        "summary": "Copy converter group by id",
        "description": "Copy converter group by id",
        "operationId": "copy_conv_group",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique object type id",
              "title": "Id"
            },
            "description": "unique object type id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/data-converters-group/": {
      "get": {
        "tags": ["Data converters"],
        "summary": "Get a list of data converter groups",
        "description": "Get a list of data converter groups",
        "operationId": "get_data_converter_groups",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Status" }],
              "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n ",
              "title": "Status"
            },
            "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n "
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "text value for search by name",
              "title": "Text"
            },
            "description": "text value for search by name"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_ConverterGroupBaseScheme_"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Data converters"],
        "summary": "Add data converter group",
        "description": "Add data converter group",
        "operationId": "create_data_converter_group",
        "security": [{ "AWSAuthenticator": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConverterGroupScheme"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConverterGroupBaseScheme-Output"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/data-converters-group/{id}/": {
      "get": {
        "tags": ["Data converters"],
        "summary": "Get data converter group by id",
        "description": "Get data converter group by id",
        "operationId": "get_data_converter_group",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConverterGroupBaseScheme-Output"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Data converters"],
        "summary": "Update data converter group by id",
        "description": "Update data converter group by id",
        "operationId": "update_data_converter_group",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConverterGroupBaseScheme-Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConverterGroupBaseScheme-Output"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Data converters"],
        "summary": "Delete data converter group by id",
        "description": "Delete data converter group by id",
        "operationId": "delete_data_converter_group",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/data-converters-group/{conv_gr_id}/data-converters/": {
      "get": {
        "tags": ["Data converters"],
        "summary": "Get a list of data converters",
        "description": "Get a list of data converters",
        "operationId": "get_data_converters",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "conv_gr_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique object type id",
              "title": "Conv Gr Id"
            },
            "description": "unique object type id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Data converters"],
        "summary": "Add data converter",
        "description": "Add data converter",
        "operationId": "create_data_converter",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "conv_gr_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique object type id",
              "title": "Conv Gr Id"
            },
            "description": "unique object type id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/data-converters-group/{conv_gr_id}/data-converters/{id}/": {
      "get": {
        "tags": ["Data converters"],
        "summary": "Get data converter by id",
        "description": "Get data converter by id",
        "operationId": "get_data_converter",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique object type id",
              "title": "Id"
            },
            "description": "unique object type id"
          },
          {
            "name": "conv_gr_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique object type id",
              "title": "Conv Gr Id"
            },
            "description": "unique object type id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Data converters"],
        "summary": "Update data converter by id",
        "description": "Update data converter by id",
        "operationId": "update_data_converter",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique object type id",
              "title": "Id"
            },
            "description": "unique object type id"
          },
          {
            "name": "conv_gr_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique object type id",
              "title": "Conv Gr Id"
            },
            "description": "unique object type id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Data converters"],
        "summary": "Delete data converter by id",
        "description": "Delete data converter by id",
        "operationId": "delete_data_converter",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique object type id",
              "title": "Id"
            },
            "description": "unique object type id"
          },
          {
            "name": "conv_gr_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique object type id",
              "title": "Conv Gr Id"
            },
            "description": "unique object type id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/data-channels/": {
      "get": {
        "tags": ["Data channels"],
        "summary": "Get a list of data channels",
        "description": "Get a list of data channels",
        "operationId": "get_data_channels",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Status" }],
              "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n ",
              "title": "Status"
            },
            "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n "
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "text value for search by name",
              "title": "Text"
            },
            "description": "text value for search by name"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_DataChannelBaseScheme_"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Data channels"],
        "summary": "Add data channel",
        "description": "Add data channel",
        "operationId": "create_data_channel",
        "security": [{ "AWSAuthenticator": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataChannelScheme"
              },
              "examples": {
                "dc_airbit_lns_http": {
                  "summary": "AIRBIT-LNS [HTTP]",
                  "description": "AIRBIT-LNS [HTTP]",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 1,
                    "class_converter": 1,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_full_manual": "https://127.0.0.1/api/callback/wsdev/",
                    "uri_unblock": true
                  }
                },
                "dc_airbit_lns_amqp_uri_on": {
                  "summary": "AIRBIT-LNS [AMQP](uri on)",
                  "description": "AIRBIT-LNS [AMQP](uri on)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 2,
                    "class_converter": 2,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_full_manual": "amqp://airbit:airbit@127.0.0.1:5000/?exchange=airbit.lns&heartbeat=60&queue=airbit.lns.link",
                    "uri_unblock": true
                  }
                },
                "dc_airbit_lns_amqp_uri_off": {
                  "summary": "AIRBIT-LNS [AMQP](uri off)",
                  "description": "AIRBIT-LNS [AMQP](uri off)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 2,
                    "class_converter": 2,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_unblock": false,
                    "account": 1,
                    "uri_detailed_field": {
                      "proto": 2,
                      "virtual_host": "/",
                      "exchange": "airbit.lns",
                      "queue": "airbit.lns.link"
                    }
                  }
                },
                "dc_airbit_lns_mqtt_uri_on": {
                  "summary": "AIRBIT-LNS [MQTT](uri on)",
                  "description": "AIRBIT-LNS [MQTT](uri on)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 3,
                    "class_converter": 3,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_full_manual": "mqtt://airbit:airbit@127.0.0.1:5000/controller/data/#?retain=false",
                    "uri_unblock": true
                  }
                },
                "dc_airbit_lns_mqtt_uri_off": {
                  "summary": "AIRBIT-LNS [MQTT](uri off)",
                  "description": "AIRBIT-LNS [MQTT](uri off)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 3,
                    "class_converter": 3,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_unblock": false,
                    "account": 1,
                    "uri_detailed_field": {
                      "proto": 3,
                      "client_id": "cl_id",
                      "topic": "topic",
                      "qos": 0,
                      "retain": false
                    }
                  }
                },
                "dc_airbit_lns_kafka_uri_on": {
                  "summary": "AIRBIT-LNS [KAFKA](uri on)",
                  "description": "AIRBIT-LNS [KAFKA](uri on)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 4,
                    "class_converter": 4,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_full_manual": "kafka://airbit:airbit@127.0.0.1:5000/topic?client_id=1&partition=10&no_verify=False",
                    "uri_unblock": true
                  }
                },
                "dc_airbit_lns_kafka_uri_off": {
                  "summary": "AIRBIT-LNS [KAFKA](uri off)",
                  "description": "AIRBIT-LNS [KAFKA](uri off)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 4,
                    "class_converter": 4,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_unblock": false,
                    "account": 1,
                    "uri_detailed_field": {
                      "proto": 4,
                      "topic": "topic",
                      "client_id": "cl_id",
                      "partition": 10
                    }
                  }
                },
                "dc_airbit_lns_chirp_stark_http": {
                  "summary": "AIRBIT-LNS ChirpStark [HTTP]",
                  "description": "AIRBIT-LNS ChirpStark [HTTP]",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 1,
                    "class_converter": 5,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_full_manual": "https://127.0.0.1/api/callback/wsdev/",
                    "uri_unblock": true
                  }
                },
                "dc_airbit_lns_er_telecom_http": {
                  "summary": "AIRBIT-LNS ChirpStark [HTTP]",
                  "description": "AIRBIT-LNS ChirpStark [HTTP]",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 1,
                    "class_converter": 6,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_full_manual": "https://127.0.0.1/api/callback/wsdev/",
                    "uri_unblock": true
                  }
                },
                "dc_tnn_http": {
                  "summary": "TNN [HTTP]",
                  "description": "TNN [HTTP]",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 1,
                    "class_converter": 7,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_full_manual": "https://127.0.0.1/api/callback/wsdev/",
                    "uri_unblock": true
                  }
                },
                "dc_tnn_mqtt_uri_on": {
                  "summary": "TNN [MQTT](uri on)",
                  "description": "TNN [MQTT](uri on)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 3,
                    "class_converter": 8,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_full_manual": "mqtt://airbit:airbit@127.0.0.1:5000/controller/data/#?retain=false",
                    "uri_unblock": true
                  }
                },
                "dc_tnn_mqtt_uri_off": {
                  "summary": "TNN [MQTT](uri off)",
                  "description": "TNN [MQTT](uri off)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 3,
                    "class_converter": 8,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_unblock": false,
                    "account": 1,
                    "uri_detailed_field": {
                      "proto": 3,
                      "client_id": "cl_id",
                      "topic": "topic",
                      "qos": 0,
                      "retain": false
                    }
                  }
                },
                "dc_universal_http": {
                  "summary": "TNN [HTTP]",
                  "description": "TNN [HTTP]",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 1,
                    "class_converter": 10,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_full_manual": "https://127.0.0.1/api/callback/wsdev/",
                    "uri_unblock": true
                  }
                },
                "dc_universal_amqp_uri_on": {
                  "summary": "Universal [AMQP](uri on)",
                  "description": "Universal [AMQP](uri on)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 2,
                    "class_converter": 9,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_full_manual": "amqp://airbit:airbit@127.0.0.1:5000/?exchange=airbit.lns&heartbeat=60&queue=airbit.lns.link",
                    "uri_unblock": true
                  }
                },
                "dc_universal_amqp_uri_off": {
                  "summary": "Universal [AMQP](uri off)",
                  "description": "Universal [AMQP](uri off)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 2,
                    "class_converter": 9,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_unblock": false,
                    "account": 1,
                    "uri_detailed_field": {
                      "proto": 2,
                      "virtual_host": "/",
                      "exchange": "airbit.lns",
                      "queue": "airbit.lns.link"
                    }
                  }
                },
                "dc_universal_mqtt_uri_on": {
                  "summary": "Universal [MQTT](uri on)",
                  "description": "Universal [MQTT](uri on)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 3,
                    "class_converter": 12,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_full_manual": "mqtt://airbit:airbit@127.0.0.1:5000/controller/data/#?retain=false",
                    "uri_unblock": true
                  }
                },
                "dc_universal_mqtt_uri_off": {
                  "summary": "Universal [MQTT](uri off)",
                  "description": "Universal [MQTT](uri off)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 3,
                    "class_converter": 12,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_unblock": false,
                    "account": 1,
                    "uri_detailed_field": {
                      "proto": 3,
                      "client_id": "cl_id",
                      "topic": "topic",
                      "qos": 0,
                      "retain": false
                    }
                  }
                },
                "dc_universal_kafka_uri_on": {
                  "summary": "Universal [KAFKA](uri on)",
                  "description": "Universal [KAFKA](uri on)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 4,
                    "class_converter": 11,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_full_manual": "kafka://airbit:airbit@127.0.0.1:5000/topic?client_id=1&partition=10&no_verify=False",
                    "uri_unblock": true
                  }
                },
                "dc_universal_kafka_uri_off": {
                  "summary": "Universal [KAFKA](uri off)",
                  "description": "Universal [KAFKA](uri off)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 4,
                    "class_converter": 11,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_unblock": false,
                    "account": 1,
                    "uri_detailed_field": {
                      "proto": 4,
                      "topic": "topic",
                      "client_id": "cl_id",
                      "partition": 10
                    }
                  }
                },
                "dc_ws_transport_http": {
                  "summary": "WS-Transport [HTTP]",
                  "description": "WS-Transport [HTTP]",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 1,
                    "class_converter": 14,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_full_manual": "https://127.0.0.1/api/callback/wsdev/",
                    "uri_unblock": true
                  }
                },
                "dc_ws_transport_amqp_uri_on": {
                  "summary": "WS-Transport [AMQP](uri on)",
                  "description": "WS-Transport [AMQP](uri on)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 2,
                    "class_converter": 13,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_full_manual": "amqp://airbit:airbit@127.0.0.1:5000/?exchange=airbit.lns&heartbeat=60&queue=airbit.lns.link",
                    "uri_unblock": true
                  }
                },
                "dc_ws_transport_amqp_uri_off": {
                  "summary": "WS-Transport [AMQP](uri off)",
                  "description": "WS-Transport [AMQP](uri off)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 2,
                    "class_converter": 13,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_unblock": false,
                    "account": 1,
                    "uri_detailed_field": {
                      "proto": 2,
                      "virtual_host": "/",
                      "exchange": "airbit.lns",
                      "queue": "airbit.lns.link"
                    }
                  }
                },
                "dc_ws_transport_uri_on": {
                  "summary": "WS-Transport [MQTT](uri on)",
                  "description": "WS-Transport [MQTT](uri on)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 3,
                    "class_converter": 16,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_full_manual": "mqtt://airbit:airbit@127.0.0.1:5000/controller/data/#?retain=false",
                    "uri_unblock": true
                  }
                },
                "dc_ws_transport_mqtt_uri_off": {
                  "summary": "WS-Transport [MQTT](uri off)",
                  "description": "WS-Transport [MQTT](uri off)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 3,
                    "class_converter": 16,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_unblock": false,
                    "account": 1,
                    "uri_detailed_field": {
                      "proto": 3,
                      "client_id": "cl_id",
                      "topic": "topic",
                      "qos": 0,
                      "retain": false
                    }
                  }
                },
                "dc_ws_transport_kafka_uri_on": {
                  "summary": "WS-Transport [KAFKA](uri on)",
                  "description": "WS-Transport [KAFKA](uri on)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 4,
                    "class_converter": 15,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_full_manual": "kafka://airbit:airbit@127.0.0.1:5000/topic?client_id=1&partition=10&no_verify=False",
                    "uri_unblock": true
                  }
                },
                "dc_ws_transport_kafka_uri_off": {
                  "summary": "WS-Transport [KAFKA](uri off)",
                  "description": "WS-Transport [KAFKA](uri off)",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "direct": 1,
                    "proto": 4,
                    "class_converter": 15,
                    "net_id_type_id": 1,
                    "name": "WSdev",
                    "slug": "wsdev",
                    "save_to_db": true,
                    "uri_unblock": false,
                    "account": 1,
                    "uri_detailed_field": {
                      "proto": 4,
                      "topic": "topic",
                      "client_id": "cl_id",
                      "partition": 10
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataChannelBaseScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/data-channels/{id}/": {
      "get": {
        "tags": ["Data channels"],
        "summary": "Get data channel by id",
        "description": "Get data channel by id",
        "operationId": "get_data_channel",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataChannelBaseScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Data channels"],
        "summary": "Update data channel by id",
        "description": "Update data channel by id",
        "operationId": "update_data_channel",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDataChannelScheme"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataChannelBaseScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Data channels"],
        "summary": "Delete data channel by id",
        "description": "Delete data channel by id",
        "operationId": "delete_data_channel",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/external-accounts/": {
      "get": {
        "tags": ["External accounts"],
        "summary": "Get a list of external accounts",
        "description": "Get a list of external accounts",
        "operationId": "get_external_accounts",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Status" }],
              "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n ",
              "title": "Status"
            },
            "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n "
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "text value for search by name",
              "title": "Text"
            },
            "description": "text value for search by name"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_ExternalAccountBaseScheme_"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["External accounts"],
        "summary": "Add external account",
        "description": "Add external account",
        "operationId": "create_external_account",
        "security": [{ "AWSAuthenticator": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExternalAccountScheme"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountBaseScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/external-accounts/{id}/": {
      "get": {
        "tags": ["External accounts"],
        "summary": "Get external account by id",
        "description": "Get external account by id",
        "operationId": "get_external_account",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountBaseScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["External accounts"],
        "summary": "Update external account by id",
        "description": "Update external account by id",
        "operationId": "update_external_account",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExternalAccountScheme"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAccountBaseScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["External accounts"],
        "summary": "Delete external account by id",
        "description": "Delete external account by id",
        "operationId": "delete_external_account",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/libraries/": {
      "get": {
        "tags": ["Libraries"],
        "summary": "Get a list of libraries",
        "description": "Get a list of libraries",
        "operationId": "get_libraries",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        },
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }]
      }
    },
    "/libraries/{id}/": {
      "get": {
        "tags": ["Libraries"],
        "summary": "Get library by id",
        "description": "Get library by id",
        "operationId": "get_library",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Libraries"],
        "summary": "Update library by id",
        "description": "Update library by id",
        "operationId": "update_library",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Libraries"],
        "summary": "Delete library by id",
        "description": "Delete library by id",
        "operationId": "delete_library",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/libraries/add/": {
      "post": {
        "tags": ["Libraries"],
        "summary": "Add library from source code",
        "description": "Add library from source code",
        "operationId": "create_library",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        },
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }]
      }
    },
    "/libraries/from-file/": {
      "post": {
        "tags": ["Libraries"],
        "summary": "Add library from file",
        "description": "Add library from file",
        "operationId": "create_library_from_file",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        },
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }]
      }
    },
    "/libraries/from-url/": {
      "post": {
        "tags": ["Libraries"],
        "summary": "Add library from url",
        "description": "Add library from url",
        "operationId": "create_library_from_url",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        },
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }]
      }
    },
    "/modbus/registers/": {
      "get": {
        "tags": ["Modbus"],
        "summary": "Get a list of modbus registers",
        "description": "Get a list of modbus registers",
        "operationId": "get_registers",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Status" }],
              "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n ",
              "title": "Status"
            },
            "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n "
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "text value for search by name",
              "title": "Text"
            },
            "description": "text value for search by name"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_ModbusRegisterBaseScheme_"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Modbus"],
        "summary": "Add modbus register",
        "description": "Add modbus register",
        "operationId": "create_register",
        "security": [{ "AWSAuthenticator": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateModbusRegisterScheme"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModbusRegisterBaseScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/modbus/registers/{id}/": {
      "get": {
        "tags": ["Modbus"],
        "summary": "Get modbus register by id",
        "description": "Get modbus register by id",
        "operationId": "get_register",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModbusRegisterBaseScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Modbus"],
        "summary": "Update modbus register by id",
        "description": "Update modbus register by id",
        "operationId": "update_register",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateModbusRegisterScheme"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModbusRegisterBaseScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Modbus"],
        "summary": "Delete modbus register by id",
        "description": "Delete modbus register by id",
        "operationId": "delete_register",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/data/device/{id}/": {
      "get": {
        "tags": ["Data"],
        "summary": "Get device data",
        "operationId": "get_data_device",
        "deprecated": true,
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique device id",
              "title": "Id"
            },
            "description": "unique device id"
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "start date of filtering period (format YYYY-MM-DDThh:mm:ss)",
              "title": "Start Date"
            },
            "description": "start date of filtering period (format YYYY-MM-DDThh:mm:ss)"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "end date of filtering period (format YYYY-MM-DDThh:mm:ss)",
              "title": "End Date"
            },
            "description": "end date of filtering period (format YYYY-MM-DDThh:mm:ss)"
          },
          {
            "name": "period",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Period" }],
              "description": "Period, grouping of data by period: \n * 0 - Asis \n \n * 1 - Hour \n \n * 2 - Day \n \n * 3 - Week \n \n * 4 - Month \n  ",
              "default": 0,
              "title": "Period"
            },
            "description": "Period, grouping of data by period: \n * 0 - Asis \n \n * 1 - Hour \n \n * 2 - Day \n \n * 3 - Week \n \n * 4 - Month \n  "
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_DeviceDataScheme_"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/data/object/": {
      "get": {
        "tags": ["Data"],
        "summary": "Get object data",
        "description": "Get object data",
        "operationId": "get_data_object",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "obj_ids",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Unique object ids",
              "title": "Obj Ids"
            },
            "description": "Unique object ids"
          },
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "start date of filtering period (format YYYY-MM-DDThh:mm:ss)",
              "title": "Start Date"
            },
            "description": "start date of filtering period (format YYYY-MM-DDThh:mm:ss)"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "start date of filtering period (format YYYY-MM-DDThh:mm:ss)",
              "title": "End Date"
            },
            "description": "start date of filtering period (format YYYY-MM-DDThh:mm:ss)"
          },
          {
            "name": "date_period",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Period" }],
              "description": "Period, grouping of data by period: \n * 0 - Asis \n \n * 1 - Hour \n \n * 2 - Day \n \n * 3 - Week \n \n * 4 - Month \n  ",
              "default": 0,
              "title": "Date Period"
            },
            "description": "Period, grouping of data by period: \n * 0 - Asis \n \n * 1 - Hour \n \n * 2 - Day \n \n * 3 - Week \n \n * 4 - Month \n  "
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_ObjectDataScheme_"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/data/object/last-data/": {
      "get": {
        "tags": ["Data"],
        "summary": "Get object last data",
        "description": "Get object last data",
        "operationId": "get_last_data_object",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "obj_ids",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": { "type": "integer" },
              "description": "Unique object ids",
              "title": "Obj Ids"
            },
            "description": "Unique object ids"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_ObjectLastDataScheme_"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/dicts/auth-methods/": {
      "get": {
        "tags": ["Dicts"],
        "summary": "Get a list of enabled auth methods from config",
        "description": "Get a list of enabled auth methods from config",
        "operationId": "get_auth_methods",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AuthMethods" }
              }
            }
          }
        }
      }
    },
    "/dicts/approved-companies/": {
      "get": {
        "tags": ["Dicts"],
        "summary": "Get a list of companies available to the user",
        "description": "Get a list of companies available to the user",
        "operationId": "approved_companies_user",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "text value for search by name",
              "title": "Text"
            },
            "description": "text value for search by name"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_DictItemScheme_"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/dicts/user-roles/": {
      "get": {
        "tags": ["Dicts"],
        "summary": "Get a list of user roles",
        "description": "Get a list of user roles",
        "operationId": "get_user_roles",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListDictItemScheme" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            }
          }
        },
        "security": [{ "AWSAuthenticator": [] }]
      }
    },
    "/dicts/languages/": {
      "get": {
        "tags": ["Dicts"],
        "summary": "Get a list of user languages",
        "description": "Get a list of user languages\n\nArgs:\n    curr_user: Data of the current user\n\nReturns:\n    Data scheme of language list",
        "operationId": "get_languages",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListDictItemScheme" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            }
          }
        },
        "security": [{ "AWSAuthenticator": [] }]
      }
    },
    "/tasks/": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get a list of tasks",
        "description": "Get a list of tasks",
        "operationId": "get_tasks",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/Status" }],
              "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n ",
              "title": "Status"
            },
            "description": "Status: \n * 1 - Inactive \n \n * 2 - Active \n "
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "text value for search by name",
              "title": "Text"
            },
            "description": "text value for search by name"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_TaskTimeScheme_"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "Add task",
        "description": "Add task",
        "operationId": "create_task",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateTaskTimeScheme" },
              "examples": {
                "task_simple_time_day": {
                  "summary": "Task simple time (day)",
                  "description": "Task simple time",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "name": "Test task",
                    "crontab_advanced": false,
                    "time_field": {
                      "start_date": "2024-12-14T09:41:00",
                      "interval_type": "Day",
                      "ending_type": 0
                    },
                    "tz": "Europe/Moscow",
                    "regular": true
                  }
                },
                "task_simple_time_week": {
                  "summary": "Task simple time (week)",
                  "description": "Task simple time",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "name": "Test task",
                    "crontab_advanced": false,
                    "time_field": {
                      "start_date": "2024-12-14T09:41:00",
                      "interval_type": "Week",
                      "week_choices": [1, 2, 3, 4, 5],
                      "repetitions_count": 20,
                      "ending_type": 2
                    },
                    "tz": "Europe/Moscow",
                    "regular": true
                  }
                },
                "task_simple_time_month": {
                  "summary": "Task simple time (month)",
                  "description": "Task simple time",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "name": "Test task",
                    "crontab_advanced": false,
                    "time_field": {
                      "start_date": "2024-12-14T09:41:00",
                      "interval_type": "Month",
                      "end_date": "2024-12-30T09:41:00",
                      "ending_type": 1
                    },
                    "tz": "Europe/Moscow",
                    "regular": true
                  }
                },
                "task_simple_time_year": {
                  "summary": "Task simple time (year)",
                  "description": "Task simple time",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "name": "Test task",
                    "crontab_advanced": false,
                    "time_field": {
                      "start_date": "2024-12-14T09:41:00",
                      "interval_type": "Year",
                      "end_date": "2024-12-30T09:41:00",
                      "ending_type": 1
                    },
                    "tz": "Europe/Moscow",
                    "regular": true
                  }
                },
                "task_advanced_time": {
                  "summary": "Task advanced time",
                  "description": "Task advanced time",
                  "value": {
                    "company_id": 1,
                    "status": 2,
                    "name": "Test task",
                    "crontab_advanced": true,
                    "time_field": {
                      "minutes": "30",
                      "hours": "12",
                      "day_of_month": "1",
                      "month": "1",
                      "day_of_week": "1",
                      "start_date": "2023-12-14T09:41:00",
                      "end_date": "2024-12-14T09:41:00"
                    },
                    "tz": "Europe/Moscow",
                    "regular": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TaskTimeBaseScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/tasks/{id}/": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get task by id",
        "description": "Get task by id",
        "operationId": "get_task",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TaskTimeBaseScheme" }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Tasks"],
        "summary": "Update task by id",
        "description": "Update task by id",
        "operationId": "update_task",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateTaskTimeScheme" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TaskTimeBaseScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Delete task by id",
        "description": "Delete task by id",
        "operationId": "delete_task",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/tasks/{task_id}/process/{id}/": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get process by id",
        "description": "Get process by id",
        "operationId": "get_task_process",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Task Id"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProcessScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Tasks"],
        "summary": "Update process by id",
        "description": "Update process by id",
        "operationId": "update_task_process",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Task Id" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddProcessScheme" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProcessScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Delete process by id",
        "description": "Delete process by id",
        "operationId": "delete_task_process",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Task Id"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/tasks/{task_id}/process/": {
      "post": {
        "tags": ["Tasks"],
        "summary": "Add process",
        "description": "Add process",
        "operationId": "create_task_process",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Task Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddProcessScheme" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProcessScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/tasks/process/{proc_id}/action/{id}/": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get action by id",
        "description": "Get action by id",
        "operationId": "get_process_action",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "proc_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Proc Id"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessActionBaseScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Tasks"],
        "summary": "Update action by id",
        "description": "Update action by id",
        "operationId": "update_process_action",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "proc_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Proc Id" }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddActionScheme" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessActionBaseScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Delete action by id",
        "description": "Delete action by id",
        "operationId": "delete_process_action",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "proc_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Proc Id"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/tasks/process/{proc_id}/action/": {
      "post": {
        "tags": ["Tasks"],
        "summary": "Add action",
        "description": "Add action",
        "operationId": "create_process_action",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "proc_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Proc Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddActionScheme" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessActionBaseScheme"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/users/change-company/": {
      "post": {
        "tags": ["User"],
        "summary": "User change company",
        "description": "User change company",
        "operationId": "change_company_user",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "company_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "unique company id",
              "title": "Company Id"
            },
            "description": "unique company id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/users/clear-session/": {
      "post": {
        "tags": ["User"],
        "summary": "User clear session",
        "description": "User clear session",
        "operationId": "clear_session_user",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            }
          }
        }
      }
    },
    "/users/me/": {
      "get": {
        "tags": ["User"],
        "summary": "Get Me",
        "description": "Get data of the current user\n\nArgs:\n    request: Request\n    curr_user: Date of the current user\n\nReturns:\n    Data scheme of the current user",
        "operationId": "get_me",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserBaseScheme" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            }
          }
        },
        "security": [{ "AWSAuthenticator": [] }]
      }
    },
    "/users/": {
      "get": {
        "tags": ["User"],
        "summary": "Get a list of users",
        "description": "Get a list of users",
        "operationId": "get_users",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/UserRole" }],
              "description": "Roles user: \n * 0 - Superadmin \n \n * 1 - Administrator \n \n * 2 - Operator \n \n * 3 - User \n \n * 4 - Partner \n ",
              "title": "Role"
            },
            "description": "Roles user: \n * 0 - Superadmin \n \n * 1 - Administrator \n \n * 2 - Operator \n \n * 3 - User \n \n * 4 - Partner \n "
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/StatusUser" }],
              "description": "Status user: \n * 1 - Inactive \n \n * 2 - New \n \n * 3 - Active \n ",
              "title": "Status"
            },
            "description": "Status user: \n * 1 - Inactive \n \n * 2 - New \n \n * 3 - Active \n "
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "text value for search by name",
              "title": "Text"
            },
            "description": "text value for search by name"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_UserBaseScheme_"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["User"],
        "summary": "Add user",
        "description": "Add user",
        "operationId": "add_user",
        "security": [{ "AWSAuthenticator": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateUserScheme" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserBaseScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/users/{id}/": {
      "get": {
        "tags": ["User"],
        "summary": "Get user by id",
        "description": "Get user by id",
        "operationId": "get_user",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "unique user id",
              "title": "Id"
            },
            "description": "unique user id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserBaseScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["User"],
        "summary": "Update user by id",
        "description": "Update user by id",
        "operationId": "update_user",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateUserScheme" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserBaseScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "summary": "Delete user by id",
        "description": "Delete user by id",
        "operationId": "delete_user",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "unique user id",
              "title": "Id"
            },
            "description": "unique user id"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/companies/": {
      "get": {
        "tags": ["Companies"],
        "summary": "Get a list of companies available to the user",
        "description": "Get a list of companies available to the user",
        "operationId": "get_companies",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/StatusUser" }],
              "description": "Status user: \n * 1 - Inactive \n \n * 2 - New \n \n * 3 - Active \n ",
              "title": "Status"
            },
            "description": "Status user: \n * 1 - Inactive \n \n * 2 - New \n \n * 3 - Active \n "
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "text value for search by name",
              "title": "Text"
            },
            "description": "text value for search by name"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Page_CompanyScheme_" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Companies"],
        "summary": "Add company",
        "description": "Add company",
        "operationId": "create_company",
        "security": [{ "AWSAuthenticator": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateCompanyScheme" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CompanyScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/companies/{id}/": {
      "get": {
        "tags": ["Companies"],
        "summary": "Get company by id",
        "description": "Get company by id",
        "operationId": "get_company",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CompanyScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Companies"],
        "summary": "Update company by id",
        "description": "Update company by id",
        "operationId": "update_company",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateCompanyScheme" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CompanyScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Companies"],
        "summary": "Delete company by id",
        "description": "Delete company by id",
        "operationId": "delete_company",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/widgets/favorite/": {
      "post": {
        "tags": ["Widgets"],
        "summary": "Add widget to dashboard",
        "description": "Add widget to dashboard",
        "operationId": "favorite_widget",
        "deprecated": true,
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "widget_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Widget Id" }
          },
          {
            "name": "dash_id",
            "in": "query",
            "required": true,
            "schema": { "type": "integer", "title": "Dash Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/widgets/{display_type}/": {
      "get": {
        "tags": ["Widgets"],
        "summary": "Get list of widgets",
        "description": "Get list of widgets",
        "operationId": "get_widgets",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "display_type",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/WidgetDisplayType" }],
              "description": "Status: \n * 1 - Graphic \n \n * 2 - Card \n ",
              "title": "Display Type"
            },
            "description": "Status: \n * 1 - Graphic \n \n * 2 - Card \n "
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "title": "Per Page"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 1, "title": "Page" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_ObjectWidgetScheme_"
                }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/widgets/{id}/": {
      "get": {
        "tags": ["Widgets"],
        "summary": "Get widget by id",
        "description": "Get widget by id",
        "operationId": "get_widget",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ObjectWidgetScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Widgets"],
        "summary": "Update widget",
        "description": "Update widget",
        "operationId": "update_widget",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateObjectWidget" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ObjectWidgetScheme" }
              }
            }
          },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Widgets"],
        "summary": "Delete widget by id",
        "description": "Delete widget by id",
        "operationId": "delete_widget",
        "security": [{ "AWSAuthenticator": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "title": "Id"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "403": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/widgets/": {
      "post": {
        "tags": ["Widgets"],
        "summary": "Add widget",
        "description": "Add widget",
        "operationId": "add_widget",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateObjectWidgetScheme"
              },
              "examples": {
                "widget_graphs": {
                  "summary": "Widget graphs",
                  "description": "Widget graphs",
                  "value": {
                    "company_id": 1,
                    "name": "Test widget graphs",
                    "display_type": 1,
                    "plots": [
                      {
                        "obj_id": 1,
                        "obj_param_id": 17,
                        "param_name": "temperature",
                        "plot_type_id": 2,
                        "color": "#2770bf"
                      }
                    ]
                  }
                },
                "widget_cards": {
                  "summary": "Widget cards",
                  "description": "Widget cards",
                  "value": {
                    "company_id": 1,
                    "name": "Test widget graphs",
                    "display_type": 2,
                    "plots": [
                      {
                        "obj_id": 1,
                        "obj_param_id": 17,
                        "param_name": "temperature",
                        "plot_type_id": 1,
                        "color": "#2770bf"
                      },
                      {
                        "obj_id": 1,
                        "obj_param_id": 9,
                        "param_name": "humidity",
                        "plot_type_id": 1,
                        "color": "#27bf3c"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ObjectWidgetScheme" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommonError" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "AWSAuthenticator": [] }]
      }
    }
  },
  "components": {
    "schemas": {
      "AddActionScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "name",
            "description": "process action name",
            "examples": ["process action name"]
          },
          "action_params": {
            "oneOf": [
              { "$ref": "#/components/schemas/CreateSendToAMQPBrokerScheme" },
              { "$ref": "#/components/schemas/CreateSendToApiLNSScheme" },
              { "$ref": "#/components/schemas/CreateSendToEmailScheme" },
              { "$ref": "#/components/schemas/CreateSendToHTTPScheme" },
              { "$ref": "#/components/schemas/CreateSendToMQTTScheme" },
              { "$ref": "#/components/schemas/CreateSendToSMSScheme" },
              { "$ref": "#/components/schemas/CreateSendToTelegramScheme" }
            ],
            "title": "action_params",
            "description": "action parameters",
            "discriminator": {
              "propertyName": "action_class",
              "mapping": {
                "1": "#/components/schemas/CreateSendToApiLNSScheme",
                "2": "#/components/schemas/CreateSendToAMQPBrokerScheme",
                "3": "#/components/schemas/CreateSendToEmailScheme",
                "4": "#/components/schemas/CreateSendToHTTPScheme",
                "5": "#/components/schemas/CreateSendToMQTTScheme",
                "6": "#/components/schemas/CreateSendToSMSScheme",
                "7": "#/components/schemas/CreateSendToTelegramScheme"
              }
            }
          }
        },
        "type": "object",
        "required": ["status", "action_params"],
        "title": "AddActionScheme"
      },
      "AddProcessScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "name",
            "description": "process name",
            "examples": ["process name"]
          },
          "process_params": {
            "oneOf": [
              { "$ref": "#/components/schemas/CreateLNSPayloadProcessScheme" },
              { "$ref": "#/components/schemas/CreateRawDataProcessScheme" },
              { "$ref": "#/components/schemas/CreateNormProcessScheme" }
            ],
            "title": "process_params",
            "description": "process parameters",
            "discriminator": {
              "propertyName": "process_class",
              "mapping": {
                "1": "#/components/schemas/CreateLNSPayloadProcessScheme",
                "2": "#/components/schemas/CreateRawDataProcessScheme",
                "3": "#/components/schemas/CreateNormProcessScheme"
              }
            }
          }
        },
        "type": "object",
        "required": ["status", "process_params"],
        "title": "AddProcessScheme"
      },
      "AddressNodeNormScheme": {
        "properties": {
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "unique address norm id",
            "examples": [1]
          },
          "consumption_group_id": {
            "type": "integer",
            "title": "consumption_group_id",
            "description": "consumption group id",
            "examples": [1]
          },
          "group_id": { "type": "integer", "title": "Group Id" },
          "addr_id": { "type": "integer", "title": "Addr Id" },
          "norm": {
            "type": "integer",
            "title": "norm",
            "description": "address norm for month",
            "examples": [5000]
          },
          "month": {
            "type": "integer",
            "title": "month",
            "description": "number of month",
            "examples": [2]
          },
          "year": {
            "type": "integer",
            "title": "year",
            "description": "year",
            "examples": [2023]
          }
        },
        "type": "object",
        "required": [
          "created",
          "creator",
          "updated",
          "updater",
          "id",
          "consumption_group_id",
          "group_id",
          "addr_id",
          "norm",
          "month",
          "year"
        ],
        "title": "AddressNodeNormScheme"
      },
      "AddressNodeScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "Address id",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "Address name",
            "examples": ["Volodarskogo"]
          },
          "prefix": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "prefix",
            "description": "Address prefix",
            "examples": ["str."]
          },
          "postfix": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "prefix",
            "description": "Address postfix",
            "examples": ["62k2"]
          }
        },
        "type": "object",
        "required": [
          "status",
          "created",
          "creator",
          "updated",
          "updater",
          "company_id",
          "id",
          "name",
          "prefix",
          "postfix"
        ],
        "title": "AddressNodeScheme"
      },
      "AdvancedTimeBaseScheme": {
        "properties": {
          "minutes": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "minutes",
            "description": "cron minutes",
            "default": "*",
            "examples": ["30"]
          },
          "hours": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "hours",
            "description": "cron hours",
            "default": "*",
            "examples": ["12"]
          },
          "day_of_month": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "day_of_month",
            "description": "cron day of month",
            "default": "*",
            "examples": ["1"]
          },
          "month": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "month",
            "description": "cron month",
            "default": "*",
            "examples": ["1"]
          },
          "day_of_week": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "day_of_week",
            "description": "cron day of week",
            "default": "*",
            "examples": ["1"]
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "start_date",
            "description": "start date"
          },
          "end_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "end_date",
            "description": "end time"
          }
        },
        "type": "object",
        "required": [
          "minutes",
          "hours",
          "day_of_month",
          "month",
          "day_of_week",
          "start_date",
          "end_date"
        ],
        "title": "AdvancedTimeBaseScheme"
      },
      "AuthMethods": {
        "properties": {
          "methods": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": { "type": "object" },
                  "type": "object"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Methods"
          }
        },
        "type": "object",
        "required": ["methods"],
        "title": "AuthMethods"
      },
      "CommonError": {
        "properties": {
          "detail": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "detail"
          }
        },
        "type": "object",
        "required": ["detail"],
        "title": "CommonError"
      },
      "CompanyScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "unique company id",
            "examples": [1]
          },
          "short_name": {
            "type": "string",
            "title": "short_name",
            "description": "company short name",
            "examples": ["OOO \"LIV\""]
          },
          "full_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "full_name",
            "description": "company full name",
            "examples": ["Общество с ограниченной ответственностью \"LIV\""]
          },
          "slug": {
            "type": "string",
            "title": "slug",
            "description": "unique company slug",
            "examples": ["liv"]
          },
          "post_address": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "post_address",
            "description": "company post address",
            "examples": ["466 Lancaster St.Trenton, NJ 08610"]
          },
          "phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "phone",
            "description": "company phone",
            "examples": ["+79990001111"]
          },
          "site": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "site",
            "description": "company site",
            "examples": ["liv.com"]
          },
          "email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "email",
            "description": "company email",
            "examples": ["liv@mail.com"]
          },
          "comments": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "comments",
            "description": "company comments",
            "examples": [
              "This company is a test company and does not contain real data."
            ]
          },
          "wl_enabled": {
            "type": "boolean",
            "title": "wl_enabled",
            "description": "white label enabled",
            "default": false,
            "examples": [true]
          },
          "wl_domain": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "wl_domain",
            "description": "white label domain",
            "examples": ["liv.com"]
          }
        },
        "type": "object",
        "required": [
          "status",
          "created",
          "creator",
          "updated",
          "updater",
          "id",
          "short_name",
          "full_name",
          "slug",
          "post_address",
          "phone",
          "site",
          "email",
          "comments",
          "wl_enabled",
          "wl_domain"
        ],
        "title": "CompanyScheme"
      },
      "ConsumptionGroupBaseScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "utility resource id",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "utility resource name",
            "examples": ["Gas"]
          },
          "unit": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "unit",
            "description": "utility resource unit",
            "examples": ["m3"]
          },
          "icon": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "icon",
            "description": "utility resource icon",
            "examples": ["fas fa-fire"]
          },
          "color": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "color",
            "description": "icon color",
            "examples": ["#14f7c1"]
          }
        },
        "type": "object",
        "required": [
          "status",
          "created",
          "creator",
          "updated",
          "updater",
          "id",
          "name",
          "unit",
          "icon",
          "color"
        ],
        "title": "ConsumptionGroupBaseScheme"
      },
      "ConvAttach": {
        "type": "integer",
        "enum": [1, 2],
        "title": "ConvAttach"
      },
      "ConvClass": {
        "type": "integer",
        "enum": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
        "title": "ConvClass"
      },
      "ConverterGroupBaseScheme-Input": {
        "properties": {
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Input" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Input" },
              { "type": "null" }
            ]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "unique data converter group id",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "data converter group name",
            "examples": ["VEGA SMART"]
          },
          "data_format_input": {
            "type": "string",
            "title": "data_format_input",
            "description": "Input data format",
            "examples": ["hex"]
          },
          "data_format_output": {
            "type": "string",
            "title": "data_format_output",
            "description": "Output data format",
            "examples": ["str"]
          }
        },
        "type": "object",
        "required": [
          "status",
          "id",
          "name",
          "data_format_input",
          "data_format_output"
        ],
        "title": "ConverterGroupBaseScheme"
      },
      "ConverterGroupBaseScheme-Output": {
        "properties": {
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "unique data converter group id",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "data converter group name",
            "examples": ["VEGA SMART"]
          },
          "data_format_input": {
            "type": "string",
            "title": "data_format_input",
            "description": "Input data format",
            "examples": ["hex"]
          },
          "data_format_output": {
            "type": "string",
            "title": "data_format_output",
            "description": "Output data format",
            "examples": ["str"]
          }
        },
        "type": "object",
        "required": [
          "company_id",
          "status",
          "created",
          "creator",
          "updated",
          "updater",
          "id",
          "name",
          "data_format_input",
          "data_format_output"
        ],
        "title": "ConverterGroupBaseScheme"
      },
      "CreateAddressNode": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "maxLength": 128,
            "title": "name",
            "description": "Address name",
            "examples": ["Volodarskogo"]
          },
          "prefix": {
            "anyOf": [
              { "type": "string", "maxLength": 32 },
              { "type": "null" }
            ],
            "title": "prefix",
            "description": "Address prefix",
            "examples": ["str."]
          },
          "postfix": {
            "anyOf": [
              { "type": "string", "maxLength": 32 },
              { "type": "null" }
            ],
            "title": "prefix",
            "description": "Address postfix",
            "examples": ["62k2"]
          }
        },
        "type": "object",
        "required": ["status", "name"],
        "title": "CreateAddressNode"
      },
      "CreateAddressNodeScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "maxLength": 128,
            "title": "name",
            "description": "Address name",
            "examples": ["Volodarskogo"]
          },
          "prefix": {
            "anyOf": [
              { "type": "string", "maxLength": 32 },
              { "type": "null" }
            ],
            "title": "prefix",
            "description": "Address prefix",
            "examples": ["str."]
          },
          "postfix": {
            "anyOf": [
              { "type": "string", "maxLength": 32 },
              { "type": "null" }
            ],
            "title": "prefix",
            "description": "Address postfix",
            "examples": ["62k2"]
          },
          "parent_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "parent_id",
            "description": "required field if new address node has parent",
            "examples": [19]
          }
        },
        "type": "object",
        "required": ["status", "name"],
        "title": "CreateAddressNodeScheme"
      },
      "CreateAddressNormScheme": {
        "properties": {
          "consumption_group_id": {
            "type": "integer",
            "title": "consumption_group_id",
            "description": "consumption group id",
            "examples": [1]
          },
          "group_id": { "type": "integer", "title": "Group Id" },
          "addr_id": { "type": "integer", "title": "Addr Id" },
          "norm": {
            "type": "integer",
            "title": "norm",
            "description": "address norm for month",
            "examples": [5000]
          },
          "month": {
            "type": "integer",
            "maximum": 12.0,
            "minimum": 1.0,
            "title": "month",
            "description": "number of month",
            "examples": [2]
          },
          "year": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "year",
            "description": "year",
            "examples": [2023]
          }
        },
        "type": "object",
        "required": [
          "consumption_group_id",
          "group_id",
          "addr_id",
          "norm",
          "month",
          "year"
        ],
        "title": "CreateAddressNormScheme"
      },
      "CreateAdvancedTimeScheme": {
        "properties": {
          "minutes": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "minutes",
            "description": "cron minutes",
            "default": "*",
            "examples": ["30"]
          },
          "hours": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "hours",
            "description": "cron hours",
            "default": "*",
            "examples": ["12"]
          },
          "day_of_month": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "day_of_month",
            "description": "cron day of month",
            "default": "*",
            "examples": ["1"]
          },
          "month": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "month",
            "description": "cron month",
            "default": "*",
            "examples": ["1"]
          },
          "day_of_week": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "day_of_week",
            "description": "cron day of week",
            "default": "*",
            "examples": ["1"]
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "start_date",
            "description": "start date",
            "examples": ["2023-12-14T09:41:00"]
          },
          "end_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "end_date",
            "description": "end time",
            "examples": ["2024-12-14T09:41:00"]
          }
        },
        "type": "object",
        "required": ["start_date"],
        "title": "CreateAdvancedTimeScheme"
      },
      "CreateAmqpDetailedUriScheme": {
        "properties": {
          "proto": {
            "const": 2,
            "title": "proto",
            "description": "protocol",
            "examples": [2]
          },
          "virtual_host": {
            "type": "string",
            "title": "virtual_host",
            "description": "Virtual host",
            "examples": ["/"]
          },
          "exchange": {
            "type": "string",
            "title": "exchange",
            "description": "Exchange",
            "examples": ["airbit.lns"]
          },
          "queue": {
            "type": "string",
            "title": "queue",
            "description": "Queue",
            "examples": ["airbit.lns.link"]
          }
        },
        "type": "object",
        "required": ["proto", "virtual_host", "exchange", "queue"],
        "title": "CreateAmqpDetailedUriScheme"
      },
      "CreateCompanyScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "short_name": {
            "type": "string",
            "maxLength": 128,
            "title": "short_name",
            "description": "company short name",
            "examples": ["OOO \"LIV\""]
          },
          "full_name": {
            "anyOf": [
              { "type": "string", "maxLength": 1028 },
              { "type": "null" }
            ],
            "title": "full_name",
            "description": "company full name",
            "examples": ["Общество с ограниченной ответственностью \"LIV\""]
          },
          "slug": {
            "type": "string",
            "maxLength": 128,
            "pattern": "^[0-9a-zA-Z\\-_.]+$",
            "title": "slug",
            "description": "unique company slug. The following characters are valid: A-Z, a-z, 0-9, \"-\", \"_\", \".\"",
            "examples": ["LIV"]
          },
          "post_address": {
            "anyOf": [
              { "type": "string", "maxLength": 1028 },
              { "type": "null" }
            ],
            "title": "post_address",
            "description": "company post address",
            "examples": ["466 Lancaster St.Trenton, NJ 08610"]
          },
          "phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "phone",
            "description": "company a phone number in international format",
            "examples": ["+79990001111"]
          },
          "site": {
            "anyOf": [
              { "type": "string", "maxLength": 128 },
              { "type": "null" }
            ],
            "title": "site",
            "description": "company site",
            "examples": ["https://liv.com"]
          },
          "email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "email",
            "description": "company email",
            "examples": ["liv@mail.com"]
          },
          "comments": {
            "anyOf": [
              { "type": "string", "maxLength": 1024 },
              { "type": "null" }
            ],
            "title": "comments",
            "description": "company comments",
            "examples": [
              "This company is a test company and does not contain real data."
            ]
          },
          "wl_enabled": {
            "type": "boolean",
            "title": "wl_enabled",
            "description": "Enable white label. Check this box if you want to enable white label functionality for this company",
            "default": false,
            "examples": [true]
          },
          "wl_domain": {
            "anyOf": [
              { "type": "string", "maxLength": 128 },
              { "type": "null" }
            ],
            "title": "wl_domain",
            "description": "white label domain",
            "examples": ["liv.com"]
          }
        },
        "type": "object",
        "required": ["status", "short_name", "slug"],
        "title": "CreateCompanyScheme"
      },
      "CreateConsumptionGroupScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "name": {
            "type": "string",
            "maxLength": 128,
            "title": "name",
            "description": "utility resource name",
            "examples": ["Gas"]
          },
          "unit": {
            "anyOf": [
              { "type": "string", "maxLength": 64 },
              { "type": "null" }
            ],
            "title": "unit",
            "description": "utility resource unit",
            "examples": ["m3"]
          },
          "icon": {
            "anyOf": [
              { "type": "string", "maxLength": 64 },
              { "type": "null" }
            ],
            "title": "icon",
            "description": "utility resource icon",
            "examples": ["fas fa-fire"]
          },
          "color": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "color",
            "description": "icon color",
            "examples": ["#14f7c1"]
          }
        },
        "type": "object",
        "required": ["status", "name"],
        "title": "CreateConsumptionGroupScheme"
      },
      "CreateConverterGroupScheme": {
        "properties": {
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "title": "name",
            "description": "data converter group name",
            "examples": ["VEGA SMART"]
          },
          "data_format_input": {
            "allOf": [
              {
                "$ref": "#/components/schemas/app__apiv2__constans__DataFormatInOut__2"
              }
            ],
            "title": "data_format_input",
            "description": "Input data format",
            "default": "hex",
            "examples": ["hex"]
          },
          "data_format_output": {
            "allOf": [
              {
                "$ref": "#/components/schemas/app__apiv2__constans__DataFormatInOut__2"
              }
            ],
            "title": "data_format_output",
            "description": "Output data format",
            "default": "str",
            "examples": ["str"]
          }
        },
        "type": "object",
        "required": ["status", "name"],
        "title": "CreateConverterGroupScheme"
      },
      "CreateDataChannelScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "company_id": {
            "anyOf": [
              { "type": "integer", "exclusiveMinimum": 0.0 },
              { "type": "null" }
            ],
            "title": "company_id",
            "description": "unique identifier of the owner's company",
            "examples": [1]
          },
          "direct": {
            "allOf": [{ "$ref": "#/components/schemas/DataDirection" }],
            "title": "direct",
            "description": "Direction",
            "examples": [1]
          },
          "proto": {
            "allOf": [{ "$ref": "#/components/schemas/Protocol" }],
            "title": "proto",
            "description": "Protocol",
            "examples": [1]
          },
          "class_converter": {
            "allOf": [{ "$ref": "#/components/schemas/ConvClass" }],
            "title": "converter_class",
            "description": "Converter class",
            "examples": [2]
          },
          "net_id_type_id": {
            "type": "integer",
            "title": "net_id_type_id",
            "description": "Type of devices ID",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "maxLength": 512,
            "title": "name",
            "description": "Name",
            "examples": ["WSdev"]
          },
          "slug": {
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9a-zA-Z\\-_.]+$",
            "title": "slug",
            "description": "Slug. \"The following characters are valid: A-Z a-z 0-9 - . _\"",
            "examples": ["wsdev"]
          },
          "save_to_db": {
            "type": "boolean",
            "title": "save_to_db",
            "description": "Save to DB. Save incoming data and decoding result to database",
            "default": true,
            "examples": [true]
          },
          "uri_full_manual": {
            "anyOf": [
              { "type": "string", "maxLength": 256 },
              { "type": "null" }
            ],
            "title": "uri_full_manual",
            "description": "uri full manual",
            "examples": ["https://127.0.0.1/api/callback/slug/"]
          },
          "uri_unblock": {
            "type": "boolean",
            "title": "uri_unblock",
            "description": "Unblock URI field",
            "default": false,
            "examples": [false]
          },
          "account": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "account",
            "description": "External account id",
            "examples": [1]
          },
          "uri_detailed_field": {
            "anyOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateAmqpDetailedUriScheme"
                  },
                  { "$ref": "#/components/schemas/CreateMqttDetailedUri" },
                  {
                    "$ref": "#/components/schemas/CreateKafkaDetailedUriScheme"
                  }
                ],
                "discriminator": {
                  "propertyName": "proto",
                  "mapping": {
                    "2": "#/components/schemas/CreateAmqpDetailedUriScheme",
                    "3": "#/components/schemas/CreateMqttDetailedUri",
                    "4": "#/components/schemas/CreateKafkaDetailedUriScheme"
                  }
                }
              },
              { "type": "null" }
            ],
            "title": "uri_detailed_field",
            "description": "uri detailed field scheme"
          }
        },
        "type": "object",
        "required": [
          "status",
          "direct",
          "proto",
          "class_converter",
          "net_id_type_id",
          "name",
          "slug"
        ],
        "title": "CreateDataChannelScheme"
      },
      "CreateDeviceNetIdTypeScheme": {
        "properties": {
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "title": "name",
            "description": "Device net id type name",
            "examples": ["DevEUI"]
          },
          "slug": {
            "type": "string",
            "maxLength": 64,
            "title": "slug",
            "description": "Device net id type slug",
            "examples": ["deveui"]
          },
          "regexp": {
            "type": "string",
            "maxLength": 256,
            "title": "regexp",
            "description": "Device net id type regular expression. The following characters are valid: A-Z, a-z, 0-9, \"-\", \"_\", \".\"",
            "examples": ["^[0-9a-fA-F]{16}$"]
          },
          "comments": {
            "anyOf": [
              { "type": "string", "maxLength": 1024 },
              { "type": "null" }
            ],
            "title": "comments",
            "description": "Device net id type comment",
            "examples": [
              "This device net id type is a test device net id type and does not contain real information."
            ]
          }
        },
        "type": "object",
        "required": ["name", "slug", "regexp"],
        "title": "CreateDeviceNetIdTypeScheme"
      },
      "CreateDeviceScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "title": "name",
            "description": "Device name",
            "examples": ["СИ-22"]
          },
          "net_id_type_id": {
            "type": "integer",
            "title": "net_id_type_id",
            "description": "Device network type id",
            "examples": [2]
          },
          "net_id": {
            "type": "string",
            "maxLength": 256,
            "title": "net_id",
            "description": "Device network id",
            "examples": ["FFFFFFFFFFFFFFFF"]
          },
          "templ_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "templ_id",
            "description": "Template id",
            "examples": [1]
          },
          "conv_group_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "conv_group_id",
            "description": "Converter group id",
            "examples": [2]
          },
          "groups": {
            "anyOf": [
              { "items": { "type": "integer" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "groups",
            "description": "List of device group ids",
            "examples": [[1, 2]]
          },
          "longitude": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "longitude",
            "description": "Device longitude",
            "examples": [59.86035]
          },
          "latitude": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "latitude",
            "description": "Device latitude",
            "examples": [57.63456]
          },
          "altitude": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "altitude",
            "description": "Device altitude",
            "examples": [98]
          },
          "addr_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "addr_id",
            "description": "Address id",
            "examples": [2]
          },
          "comments": {
            "anyOf": [
              { "type": "string", "maxLength": 1024 },
              { "type": "null" }
            ],
            "title": "comments",
            "description": "Device comments",
            "examples": [
              "This device is a test device and does not contain real data."
            ]
          }
        },
        "type": "object",
        "required": ["status", "name", "net_id_type_id", "net_id"],
        "title": "CreateDeviceScheme"
      },
      "CreateExternalAccountScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "name": {
            "anyOf": [
              { "type": "string", "maxLength": 256 },
              { "type": "null" }
            ],
            "title": "name",
            "description": "external account name",
            "examples": ["mqtt air-bit"]
          },
          "proto": {
            "allOf": [{ "$ref": "#/components/schemas/Proto" }],
            "title": "proto",
            "description": "protocol",
            "examples": ["amqp"]
          },
          "secure": {
            "type": "boolean",
            "title": "secure",
            "description": "secure connection",
            "examples": [true]
          },
          "hostname": {
            "type": "string",
            "maxLength": 256,
            "title": "hostname",
            "description": "hostname",
            "examples": ["air-bit.eu"]
          },
          "port": {
            "anyOf": [
              { "type": "integer", "maximum": 65535.0, "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "port",
            "description": "port",
            "examples": ["8000"]
          },
          "username": {
            "anyOf": [
              { "type": "string", "maxLength": 256 },
              { "type": "null" }
            ],
            "title": "username",
            "description": "external account username",
            "examples": ["AirBit"]
          },
          "password": {
            "anyOf": [
              { "type": "string", "maxLength": 256 },
              { "type": "null" }
            ],
            "title": "password",
            "description": "password account username",
            "examples": ["12345"]
          },
          "comments": {
            "anyOf": [
              { "type": "string", "maxLength": 1024 },
              { "type": "null" }
            ],
            "title": "comments",
            "description": "external account comments",
            "examples": [
              "This external account is a test external account and does not contain real data."
            ]
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/CreateExternalAccountTagScheme"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "tags",
            "description": "list of external account tags"
          }
        },
        "type": "object",
        "required": ["status", "proto", "secure", "hostname"],
        "title": "CreateExternalAccountScheme"
      },
      "CreateExternalAccountTagScheme": {
        "properties": {
          "action_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/app__apiv2__constans__Actions__2"
              }
            ],
            "title": "action_name",
            "description": "action name",
            "examples": ["SendToAMQPBroker"]
          }
        },
        "type": "object",
        "required": ["action_name"],
        "title": "CreateExternalAccountTagScheme"
      },
      "CreateGroupScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "title": "name",
            "description": "group name",
            "examples": ["group_name"]
          },
          "comments": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "comments",
            "description": "group comment",
            "examples": [
              "This group is a test group and does not contain real information."
            ]
          },
          "color": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "color",
            "description": "group color",
            "examples": ["#a94d4d"]
          },
          "is_virtual": {
            "type": "boolean",
            "title": "virtual_group",
            "description": "set true if you want to create virtual group",
            "default": false,
            "examples": [true]
          },
          "num_expr": {
            "anyOf": [
              { "type": "string", "maxLength": 1024 },
              { "type": "null" }
            ],
            "title": "num_expr",
            "description": "group numerical expression. required field if you want to create virtual group",
            "examples": ["sin(1)"]
          },
          "tagged_groups": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/CreateGroupTag" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "tagged_groups",
            "description": "list of tagged groups"
          }
        },
        "type": "object",
        "required": ["status", "name"],
        "title": "CreateGroupScheme"
      },
      "CreateGroupTag": {
        "properties": {
          "tag": {
            "type": "string",
            "maxLength": 8,
            "title": "tag",
            "description": "Field should contain only latin [a-zA-Z] chars",
            "examples": ["A"]
          },
          "tagged_group_id": {
            "type": "integer",
            "title": "tagged_group_id",
            "description": "",
            "examples": [2]
          }
        },
        "type": "object",
        "required": ["tag", "tagged_group_id"],
        "title": "CreateGroupTag"
      },
      "CreateKafkaDetailedUriScheme": {
        "properties": {
          "proto": {
            "const": 4,
            "title": "proto",
            "description": "protocol",
            "examples": [4]
          },
          "topic": {
            "type": "string",
            "title": "topic",
            "description": "Topic",
            "examples": ["topic"]
          },
          "client_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "client_id",
            "description": "Client ID prefix",
            "examples": ["1"]
          },
          "partition": {
            "type": "integer",
            "title": "partition",
            "description": "Partition number",
            "default": 0,
            "examples": [0]
          }
        },
        "type": "object",
        "required": ["proto", "topic"],
        "title": "CreateKafkaDetailedUriScheme"
      },
      "CreateLNSPayloadProcessScheme": {
        "properties": {
          "process_class": { "const": 1, "title": "Process Class" },
          "dev_eui": {
            "type": "integer",
            "title": "dev_eui",
            "description": "device id",
            "examples": [1]
          },
          "up_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "up_id",
            "description": "Uplink frame unique ID for reply",
            "examples": [1]
          },
          "data": {
            "anyOf": [
              { "type": "string", "pattern": "^([0-9a-fA-F]{2})+$" },
              { "type": "null" }
            ],
            "title": "data",
            "description": "Hex data for send",
            "examples": ["af"]
          },
          "mac": {
            "anyOf": [
              { "type": "string", "pattern": "^([0-9a-fA-F]{2})+$" },
              { "type": "null" }
            ],
            "title": "mac",
            "description": "Hex MAC commands for send",
            "examples": ["af"]
          },
          "fport": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "front",
            "description": "The FPort value that will be used when sending a frame",
            "examples": [12345]
          },
          "conf": {
            "type": "boolean",
            "title": "conf",
            "description": "Send data as confirmed message",
            "default": false,
            "examples": [false]
          },
          "imme": {
            "type": "boolean",
            "title": "imme",
            "description": "Immediate. Send data immediate (for Class C or for Class A if up_id specified)",
            "default": false,
            "examples": [false]
          },
          "nodel": {
            "type": "boolean",
            "title": "nodel",
            "description": "Not delete. Do not delete from queue after join/rejoin",
            "default": false,
            "examples": [false]
          },
          "fpend": {
            "type": "boolean",
            "title": "fpend",
            "description": "FPending. Set FPending bit for immediate downlink",
            "default": false,
            "examples": [false]
          },
          "prio": {
            "allOf": [
              {
                "$ref": "#/components/schemas/app__apiv2__constans__ActionPrio__2"
              }
            ],
            "title": "prio",
            "description": "Prio. Set priority for send via queue (0-low, 1-middle, 2-hight)",
            "default": 0,
            "examples": [0]
          }
        },
        "type": "object",
        "required": ["process_class", "dev_eui"],
        "title": "CreateLNSPayloadProcessScheme"
      },
      "CreateMetricScheme": {
        "properties": {
          "main": {
            "type": "boolean",
            "title": "main",
            "description": "metric main",
            "default": false,
            "examples": [false]
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "title": "name",
            "description": "metric name",
            "examples": ["metric"]
          },
          "unit": {
            "anyOf": [
              { "type": "string", "maxLength": 32 },
              { "type": "null" }
            ],
            "title": "unit",
            "description": "metric unit",
            "examples": ["sec"]
          },
          "slug": {
            "type": "string",
            "maxLength": 64,
            "title": "slug",
            "description": "metric slug",
            "examples": ["Hz"]
          },
          "consumption_group_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "consumption_group_id",
            "description": "Utility resource",
            "examples": [1]
          },
          "groups_ids": {
            "anyOf": [
              { "items": { "type": "integer" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "group_ids",
            "description": "object metric group ids",
            "default": [],
            "examples": [[1, 2]]
          },
          "purpose_class": {
            "anyOf": [
              { "$ref": "#/components/schemas/PurposeClass" },
              { "type": "null" }
            ],
            "title": "purpose_class",
            "description": "Purpose",
            "examples": ["battery"]
          },
          "view_class": {
            "anyOf": [
              { "$ref": "#/components/schemas/ViewClass" },
              { "type": "null" }
            ],
            "title": "view_class",
            "description": "metric view class",
            "examples": ["Battery charge"]
          },
          "graph_class": {
            "allOf": [{ "$ref": "#/components/schemas/GraphClass" }],
            "title": "graph_class",
            "description": "metric graph class",
            "default": "As is",
            "examples": ["As is"]
          },
          "comment": {
            "anyOf": [
              { "type": "string", "maxLength": 256 },
              { "type": "null" }
            ],
            "title": "comment",
            "description": "metric comment",
            "examples": [
              "This object is a test object and does not contain real information."
            ]
          },
          "metric_type": {
            "allOf": [{ "$ref": "#/components/schemas/MetricType" }],
            "title": "metric_type",
            "description": "metric type (1 - Constant, 2 - Device, 3 - Expression)",
            "default": 2,
            "examples": [2]
          },
          "num_expr": {
            "anyOf": [
              { "type": "string", "maxLength": 1024 },
              { "type": "null" }
            ],
            "title": "num_expr",
            "description": "math expression. required field if metric type is 3 - Expression",
            "examples": ["sin(1)"]
          }
        },
        "type": "object",
        "required": ["name", "slug"],
        "title": "CreateMetricScheme"
      },
      "CreateModbusRegisterScheme": {
        "properties": {
          "company_id": {
            "anyOf": [
              { "type": "integer", "exclusiveMinimum": 0.0 },
              { "type": "null" }
            ],
            "title": "company_id",
            "description": "unique identifier of the owner's company",
            "examples": [1]
          },
          "slave_id": {
            "type": "integer",
            "maximum": 247.0,
            "minimum": 1.0,
            "title": "slave_id",
            "description": "Slave/Unit ID",
            "examples": [1]
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/RegisterTypes" }],
            "title": "type",
            "description": "Register type",
            "examples": [3]
          },
          "address": {
            "type": "integer",
            "maximum": 65535.0,
            "minimum": 0.0,
            "title": "address",
            "description": "Address",
            "examples": [100]
          },
          "count": {
            "type": "integer",
            "maximum": 65535.0,
            "minimum": 0.0,
            "title": "count",
            "description": "Registers count",
            "examples": [2]
          },
          "byte_order": {
            "allOf": [{ "$ref": "#/components/schemas/Endian" }],
            "title": "byte_order",
            "description": "Byte order",
            "examples": [1]
          },
          "word_order": {
            "allOf": [{ "$ref": "#/components/schemas/Endian" }],
            "title": "word_order",
            "description": "Word order",
            "examples": [1]
          },
          "dev_id": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "dev",
            "description": "Device",
            "examples": [1]
          },
          "param_id": {
            "type": "integer",
            "title": "param_id",
            "description": "Parameter",
            "examples": []
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/DefaultStatus" }],
            "title": "status",
            "description": "Status",
            "examples": [2]
          }
        },
        "type": "object",
        "required": [
          "slave_id",
          "type",
          "address",
          "count",
          "byte_order",
          "word_order",
          "dev_id",
          "param_id",
          "status"
        ],
        "title": "CreateModbusRegisterScheme"
      },
      "CreateMqttDetailedUri": {
        "properties": {
          "proto": {
            "const": 3,
            "title": "proto",
            "description": "protocol",
            "examples": [3]
          },
          "client_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "client_id",
            "description": "Client ID prefix",
            "examples": ["1"]
          },
          "topic": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "topic",
            "description": "Topic",
            "examples": ["topic"]
          },
          "qos": {
            "anyOf": [
              { "type": "integer", "maximum": 2.0, "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "qos",
            "description": "Quality of Service",
            "examples": [0]
          },
          "retain": {
            "type": "boolean",
            "title": "retain",
            "description": "Retain",
            "default": false,
            "examples": [false]
          }
        },
        "type": "object",
        "required": ["proto"],
        "title": "CreateMqttDetailedUri"
      },
      "CreateNormProcessScheme": {
        "properties": {
          "process_class": { "const": 3, "title": "Process Class" },
          "addr": {
            "anyOf": [
              { "type": "integer", "exclusiveMinimum": 0.0 },
              { "type": "null" }
            ],
            "title": "addr",
            "description": "address node id",
            "examples": [2]
          },
          "group": {
            "anyOf": [
              { "type": "integer", "exclusiveMinimum": 0.0 },
              { "type": "null" }
            ],
            "title": "group",
            "description": "object metric group id",
            "examples": [1]
          },
          "consumption_group": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "consumption_group",
            "description": "consumption group id",
            "examples": [1]
          },
          "period": {
            "allOf": [{ "$ref": "#/components/schemas/Period" }],
            "title": "period",
            "description": "Period",
            "default": 0,
            "examples": [0]
          },
          "tz": {
            "type": "string",
            "maxLength": 64,
            "title": "tz",
            "description": "time zone",
            "default": "Europe/Moscow",
            "examples": ["Europe/Moscow"]
          },
          "last_period": {
            "type": "boolean",
            "title": "last_period",
            "description": "Process run for previous period",
            "default": false,
            "examples": [false]
          },
          "only_suc": {
            "type": "boolean",
            "title": "only_suc",
            "description": "Overflow only",
            "default": true,
            "examples": [true]
          }
        },
        "type": "object",
        "required": ["process_class", "consumption_group"],
        "title": "CreateNormProcessScheme"
      },
      "CreateObjectScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "title": "name",
            "description": "object name",
            "examples": ["Apartment"]
          },
          "addr_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "addr_id",
            "description": "address id",
            "examples": [1]
          },
          "groups": {
            "anyOf": [
              { "items": { "type": "integer" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "groups",
            "description": "list of object group ids",
            "examples": [[1, 2]]
          },
          "object_types": {
            "anyOf": [
              { "items": { "type": "integer" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "object_types",
            "description": "list of object type ids",
            "examples": [1, 2]
          },
          "comment": {
            "anyOf": [
              { "type": "string", "maxLength": 256 },
              { "type": "null" }
            ],
            "title": "comment",
            "description": "object comment",
            "examples": [
              "This object is a test object and does not contain real information."
            ]
          }
        },
        "type": "object",
        "required": ["status", "name"],
        "title": "CreateObjectScheme"
      },
      "CreateObjectTypeScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "object type name",
            "examples": ["Control commands"]
          },
          "slug": {
            "type": "string",
            "title": "slug",
            "description": "object type slug",
            "examples": ["Hz"]
          },
          "metrics": {
            "items": { "$ref": "#/components/schemas/CreateMetricScheme" },
            "type": "array",
            "title": "metrics",
            "description": "list of metrics"
          }
        },
        "type": "object",
        "required": ["status", "name", "slug", "metrics"],
        "title": "CreateObjectTypeScheme"
      },
      "CreateObjectWidgetPlotSettingsScheme": {
        "properties": {
          "obj_id": {
            "type": "integer",
            "title": "obj_id",
            "description": "object id",
            "examples": [2]
          },
          "obj_param_id": {
            "type": "integer",
            "title": "obj_param_id",
            "description": "object id",
            "examples": [3]
          },
          "param_name": {
            "anyOf": [
              { "type": "string", "maxLength": 50 },
              { "type": "null" }
            ],
            "title": "param_name",
            "description": "parameter name of metric",
            "examples": ["temperature"]
          },
          "plot_type_id": {
            "type": "integer",
            "title": "plot_type_id",
            "description": "plot type",
            "examples": [2]
          },
          "color": {
            "type": "string",
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "title": "color",
            "description": "plot color",
            "default": "#2770bf",
            "examples": ["#2770bf"]
          }
        },
        "type": "object",
        "required": ["obj_id", "obj_param_id", "plot_type_id"],
        "title": "CreateObjectWidgetPlotSettingsScheme"
      },
      "CreateObjectWidgetScheme": {
        "properties": {
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "maxLength": 128,
            "title": "name",
            "description": "object widget name",
            "examples": ["WIDGET"]
          },
          "display_type": {
            "allOf": [{ "$ref": "#/components/schemas/WidgetDisplayType" }],
            "title": "display_type",
            "description": "object widget display type",
            "examples": [1]
          },
          "plots": {
            "items": {
              "$ref": "#/components/schemas/CreateObjectWidgetPlotSettingsScheme"
            },
            "type": "array",
            "title": "plots",
            "description": "list of widget plot settings"
          }
        },
        "type": "object",
        "required": ["name", "display_type", "plots"],
        "title": "CreateObjectWidgetScheme"
      },
      "CreateRawDataProcessScheme": {
        "properties": {
          "process_class": { "const": 2, "title": "Process Class" },
          "json_msg": {
            "type": "object",
            "title": "json_msg",
            "description": "JSON message",
            "examples": [{ "a": "A" }]
          }
        },
        "type": "object",
        "required": ["process_class", "json_msg"],
        "title": "CreateRawDataProcessScheme"
      },
      "CreateSendToAMQPBrokerScheme": {
        "properties": {
          "account": {
            "type": "integer",
            "title": "account",
            "description": "external account id",
            "examples": [1]
          },
          "action_class": { "const": 2, "title": "Action Class" },
          "virtual_host": {
            "type": "string",
            "title": "virtual_host",
            "description": "Virtual host",
            "examples": ["/"]
          },
          "exchange": {
            "type": "string",
            "title": "exchange",
            "description": "Exchange",
            "examples": ["airbit.lns"]
          },
          "queue": {
            "type": "string",
            "title": "queue",
            "description": "Queue",
            "examples": ["airbit.lns.link"]
          }
        },
        "type": "object",
        "required": [
          "account",
          "action_class",
          "virtual_host",
          "exchange",
          "queue"
        ],
        "title": "CreateSendToAMQPBrokerScheme"
      },
      "CreateSendToApiLNSScheme": {
        "properties": {
          "account": {
            "type": "integer",
            "title": "account",
            "description": "external account id",
            "examples": [1]
          },
          "action_class": { "const": 1, "title": "Action Class" },
          "dev_eui": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "dev_eui",
            "description": "device id",
            "examples": [1]
          },
          "up_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "up_id",
            "description": "Uplink frame unique ID for reply",
            "examples": [12345]
          },
          "data_hex": {
            "anyOf": [
              { "type": "string", "pattern": "^([0-9a-fA-F]{2})+$" },
              { "type": "null" }
            ],
            "title": "data_hex",
            "description": "Hex data for send",
            "examples": ["af"]
          },
          "mac": {
            "anyOf": [
              { "type": "string", "pattern": "^([0-9a-fA-F]{2})+$" },
              { "type": "null" }
            ],
            "title": "mac",
            "description": "Hex MAC commands for send",
            "examples": ["af"]
          },
          "fport": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "fport",
            "description": "The FPort value that will be used when sending a frame",
            "examples": [12345]
          },
          "conf": {
            "type": "boolean",
            "title": "conf",
            "description": "Send data as confirmed message",
            "default": false,
            "examples": [false]
          },
          "imme": {
            "type": "boolean",
            "title": "imme",
            "description": "Send data immediate (for Class C or for Class A if up_id specified)",
            "default": false,
            "examples": [false]
          },
          "nodel": {
            "type": "boolean",
            "title": "nodel",
            "description": "do not delete from queue after join/rejoin",
            "default": false,
            "examples": [false]
          },
          "fpend": {
            "type": "boolean",
            "title": "fpend",
            "description": "Set FPending bit for immediate downlink",
            "default": false,
            "examples": [false]
          },
          "prio": {
            "allOf": [
              {
                "$ref": "#/components/schemas/app__apiv2__constans__ActionPrio__1"
              }
            ],
            "title": "prio",
            "description": "Set priority for send via queue (0-low, 1-middle, 2-hight)",
            "default": 0,
            "examples": [0]
          }
        },
        "type": "object",
        "required": ["account", "action_class", "dev_eui"],
        "title": "CreateSendToApiLNSScheme"
      },
      "CreateSendToEmailScheme": {
        "properties": {
          "account": {
            "type": "integer",
            "title": "account",
            "description": "external account id",
            "examples": [1]
          },
          "action_class": { "const": 3, "title": "Action Class" },
          "from_email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "from_email",
            "description": "From email",
            "examples": ["ivan.ivanov@air-bit.eu"]
          },
          "recipient": {
            "type": "string",
            "title": "recipient",
            "description": "Recipient email",
            "examples": ["alex.ivanov@air-bit.eu"]
          },
          "subject": {
            "type": "string",
            "title": "Subject",
            "description": "Email subject",
            "examples": ["AIRBIT"]
          },
          "message": {
            "type": "string",
            "title": "message",
            "description": "Message",
            "examples": ["hi"]
          }
        },
        "type": "object",
        "required": [
          "account",
          "action_class",
          "recipient",
          "subject",
          "message"
        ],
        "title": "CreateSendToEmailScheme"
      },
      "CreateSendToHTTPScheme": {
        "properties": {
          "account": {
            "type": "integer",
            "title": "account",
            "description": "external account id",
            "examples": [1]
          },
          "action_class": { "const": 4, "title": "Action Class" },
          "path": {
            "type": "string",
            "title": "path",
            "description": "Path",
            "default": "/",
            "examples": ["/"]
          },
          "as_json": {
            "type": "boolean",
            "title": "as_json",
            "description": "If true, then the data is sent as application/json otherwise application/x-www-form-urlencoded",
            "default": false,
            "examples": [false]
          }
        },
        "type": "object",
        "required": ["account", "action_class"],
        "title": "CreateSendToHTTPScheme"
      },
      "CreateSendToMQTTScheme": {
        "properties": {
          "account": {
            "type": "integer",
            "title": "account",
            "description": "external account id",
            "examples": [1]
          },
          "action_class": { "const": 5, "title": "Action Class" },
          "client_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "client_id",
            "description": "Client ID prefix",
            "examples": ["cl"]
          },
          "topic": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "topic",
            "description": "Topic",
            "examples": ["topic"]
          },
          "qos": {
            "anyOf": [
              { "type": "integer", "maximum": 2.0, "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "qos",
            "description": "Quality of Service",
            "examples": [0]
          },
          "retain": {
            "type": "boolean",
            "title": "retain",
            "description": "Retain",
            "default": false,
            "examples": [false]
          }
        },
        "type": "object",
        "required": ["account", "action_class"],
        "title": "CreateSendToMQTTScheme"
      },
      "CreateSendToSMSScheme": {
        "properties": {
          "account": {
            "type": "integer",
            "title": "account",
            "description": "external account id",
            "examples": [1]
          },
          "action_class": { "const": 6, "title": "Action Class" },
          "source": {
            "type": "string",
            "title": "source",
            "description": "Sender phone or string ID",
            "examples": ["+79990001111"]
          },
          "recipient": {
            "type": "string",
            "title": "recipient",
            "description": "Phone number",
            "examples": ["+49990001111"]
          },
          "title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "title",
            "description": "Title for message (including in SMS)",
            "examples": ["AirBit"]
          },
          "message": {
            "type": "string",
            "title": "message",
            "description": "Message",
            "examples": ["Hi from AirBt"]
          }
        },
        "type": "object",
        "required": [
          "account",
          "action_class",
          "source",
          "recipient",
          "message"
        ],
        "title": "CreateSendToSMSScheme"
      },
      "CreateSendToTelegramScheme": {
        "properties": {
          "account": {
            "type": "integer",
            "title": "account",
            "description": "external account id",
            "examples": [1]
          },
          "action_class": { "const": 7, "title": "Action Class" },
          "recipient": {
            "type": "string",
            "title": "recipient",
            "description": "Message recipient ID (Telegram chat ID)",
            "examples": ["488484489"]
          },
          "title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "title",
            "description": "Title for message",
            "examples": ["AirBit"]
          },
          "message": {
            "type": "string",
            "title": "message",
            "description": "Message",
            "examples": ["Hi from AirBt"]
          }
        },
        "type": "object",
        "required": ["account", "action_class", "recipient", "message"],
        "title": "CreateSendToTelegramScheme"
      },
      "CreateSimpleTimeScheme": {
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "start_date",
            "description": "start date (format YYYY-MM-DDThh:mm:ss)",
            "examples": ["2024-12-14T09:41:00"]
          },
          "interval_type": {
            "allOf": [{ "$ref": "#/components/schemas/IntervalTypes" }],
            "title": "interval_type",
            "description": "Interval",
            "examples": ["Day"]
          },
          "week_choices": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/WeekDays" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "week_choices",
            "description": "day of week",
            "examples": [1]
          },
          "end_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "end_date",
            "description": "end time (format YYYY-MM-DDThh:mm:ss). required field if ending type is \"Date\"",
            "examples": ["2024-12-14T09:41:00"]
          },
          "repetitions_count": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "repetitions_count",
            "description": "Repetitions count",
            "examples": [5]
          },
          "ending_type": {
            "anyOf": [
              { "$ref": "#/components/schemas/TasksEndingTypes" },
              { "type": "null" }
            ],
            "title": "ending_type",
            "description": "ending type \n * 0 - Never \n \n * 1 - Date \n \n * 2 - In \n "
          }
        },
        "type": "object",
        "required": ["start_date", "interval_type"],
        "title": "CreateSimpleTimeScheme"
      },
      "CreateTaskTimeScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "task time name",
            "examples": ["task_name"]
          },
          "crontab_advanced": {
            "type": "boolean",
            "title": "crontab_advanced",
            "description": "Enable Advanced Crontab",
            "default": true,
            "examples": [true]
          },
          "time_field": {
            "anyOf": [
              { "$ref": "#/components/schemas/CreateAdvancedTimeScheme" },
              { "$ref": "#/components/schemas/CreateSimpleTimeScheme" }
            ],
            "title": "time_field",
            "description": "task time parameters"
          },
          "tz": {
            "type": "string",
            "title": "tz",
            "description": "time zone",
            "default": "Europe/Moscow",
            "examples": ["Europe/Moscow"]
          },
          "regular": {
            "type": "boolean",
            "title": "regular",
            "description": "regular dispatch",
            "default": true,
            "examples": [true]
          }
        },
        "type": "object",
        "required": ["status", "name", "time_field"],
        "title": "CreateTaskTimeScheme"
      },
      "CreateTemplateScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "title": "name",
            "description": "Template name",
            "examples": ["Temp 1"]
          },
          "conv_group_id": {
            "type": "integer",
            "title": "conv_group_id",
            "description": "Converter group id",
            "examples": [2]
          },
          "comments": {
            "anyOf": [
              { "type": "string", "maxLength": 1024 },
              { "type": "null" }
            ],
            "title": "comments",
            "description": "Template comments",
            "examples": [
              "This template is a test template and does not contain real information."
            ]
          }
        },
        "type": "object",
        "required": ["status", "name", "conv_group_id"],
        "title": "CreateTemplateScheme"
      },
      "CreateUserScheme": {
        "properties": {
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "maxLength": 128,
            "title": "name",
            "description": "user name",
            "examples": ["Ivanov Ivan"]
          },
          "email": {
            "type": "string",
            "maxLength": 128,
            "title": "email",
            "description": "user email",
            "examples": ["ivan.ivanov@air-bit.eu"]
          },
          "phone": {
            "type": "string",
            "maxLength": 64,
            "title": "phone",
            "description": "user phone",
            "examples": ["+79990001111"]
          },
          "password": {
            "type": "string",
            "maxLength": 32,
            "minLength": 5,
            "format": "password",
            "title": "password",
            "description": "user password",
            "writeOnly": true,
            "examples": ["12345"]
          },
          "role": {
            "allOf": [{ "$ref": "#/components/schemas/UserRole" }],
            "title": "role",
            "description": "user role \n * 0 - Superadmin \n \n * 1 - Administrator \n \n * 2 - Operator \n \n * 3 - User \n \n * 4 - Partner \n ",
            "exampless": [1]
          },
          "locale": {
            "type": "string",
            "maxLength": 8,
            "minLength": 2,
            "title": "locale",
            "description": "user language in the system",
            "default": "en",
            "examples": ["en"]
          },
          "tz": {
            "type": "string",
            "maxLength": 64,
            "title": "tz",
            "description": "time zone of the user in the system",
            "default": "Europe/Moscow",
            "examples": ["Europe/Moscow"]
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/StatusUser" }],
            "title": "status",
            "description": "user status (1 - Inactive, 2 - New, 3 - Active)",
            "examples": [3]
          }
        },
        "type": "object",
        "required": ["name", "email", "phone", "password", "role", "status"],
        "title": "CreateUserScheme"
      },
      "DashboardCardScheme": {
        "properties": {
          "obj": {
            "anyOf": [
              { "$ref": "#/components/schemas/ObjScheme" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["obj"],
        "title": "DashboardCardScheme"
      },
      "DashboardFullStructScheme": {
        "properties": {
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "dashboard id",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "dashboard name",
            "examples": ["My Dashboard"]
          },
          "default": {
            "type": "boolean",
            "title": "default",
            "description": "dashboard is default or not",
            "examples": [false]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "unique company id. required only for company dashboard",
            "examples": [2]
          },
          "user_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "user_id",
            "description": "unique user id. required only for user dashboard",
            "examples": [10]
          },
          "cards": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/DashboardCardScheme" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Cards"
          },
          "widgets": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/DashboardWidgetScheme"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Widgets"
          }
        },
        "type": "object",
        "required": [
          "created",
          "creator",
          "updated",
          "updater",
          "id",
          "name",
          "default",
          "company_id",
          "user_id",
          "cards",
          "widgets"
        ],
        "title": "DashboardFullStructScheme"
      },
      "DashboardScheme": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 256,
            "title": "name",
            "description": "dashboard name",
            "examples": ["My Dashboard"]
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "DashboardScheme"
      },
      "DashboardType": {
        "type": "string",
        "enum": ["user", "company"],
        "title": "DashboardType"
      },
      "DashboardWidgetScheme": {
        "properties": {
          "widget": {
            "anyOf": [
              { "$ref": "#/components/schemas/ObjectWidgetScheme" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": ["widget"],
        "title": "DashboardWidgetScheme"
      },
      "DataChannelBaseScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "data channel id",
            "examples": [1]
          },
          "direct": {
            "allOf": [{ "$ref": "#/components/schemas/DataDirection" }],
            "title": "direct",
            "description": "Direction",
            "examples": [1]
          },
          "proto": {
            "type": "string",
            "title": "proto",
            "description": "Protocol",
            "examples": ["http"]
          },
          "class_converter": {
            "type": "string",
            "title": "converter_class",
            "description": "Converter class",
            "examples": ["server.integration.conversion.ConvertAirBit"]
          },
          "net_id_type_id": {
            "type": "integer",
            "title": "net_id_type_id",
            "description": "Type of devices ID",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "Name",
            "examples": ["WSdev"]
          },
          "slug": {
            "type": "string",
            "title": "slug",
            "description": "Slug. \"The following characters are valid: A-Z a-z 0-9 - . _\"",
            "examples": ["wsdev"]
          },
          "save_to_db": {
            "type": "boolean",
            "title": "save_to_db",
            "description": "Save to DB. Save incoming data and decoding result to database",
            "examples": [true]
          },
          "uri_full_manual": {
            "type": "string",
            "title": "uri_full_manual",
            "description": "URI",
            "examples": ["https://127.0.0.1/api/callback/http/"]
          },
          "uri_unblock": {
            "type": "boolean",
            "title": "uri_unblock",
            "description": "Unblock URI field",
            "examples": [false]
          },
          "account": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "account",
            "description": "External account id",
            "examples": [1]
          },
          "uri_detailed_field": {
            "type": "object",
            "title": "Uri Detailed Field"
          }
        },
        "type": "object",
        "required": [
          "status",
          "created",
          "creator",
          "updated",
          "updater",
          "company_id",
          "id",
          "direct",
          "proto",
          "class_converter",
          "net_id_type_id",
          "name",
          "slug",
          "save_to_db",
          "uri_full_manual",
          "uri_unblock",
          "account",
          "uri_detailed_field"
        ],
        "title": "DataChannelBaseScheme"
      },
      "DataDirection": {
        "type": "integer",
        "enum": [1, 2],
        "title": "DataDirection"
      },
      "DefaultStatus": {
        "type": "integer",
        "enum": [1, 2],
        "title": "DefaultStatus"
      },
      "DeviceDataScheme": {
        "properties": {
          "ext_id": {
            "type": "integer",
            "title": "ext_id",
            "description": "unique packet id",
            "examples": [7]
          },
          "data_converter_id": {
            "type": "integer",
            "title": "data_converter_id",
            "description": "unique data converter id",
            "examples": [8]
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "created",
            "description": "state creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "device_date": {
            "type": "string",
            "format": "date-time",
            "title": "device_date",
            "description": "state device date time",
            "examples": ["2023-01-01T00:01:00Z"]
          },
          "parsed_data": { "type": "object", "title": "Parsed Data" },
          "net_protocol_data": {
            "type": "object",
            "title": "Net Protocol Data"
          },
          "specific_data": { "type": "object", "title": "Specific Data" }
        },
        "type": "object",
        "required": [
          "ext_id",
          "data_converter_id",
          "created",
          "device_date",
          "parsed_data",
          "net_protocol_data",
          "specific_data"
        ],
        "title": "DeviceDataScheme"
      },
      "DeviceNetIdTypeScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "Device net id type id",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "Device net id type name",
            "examples": ["DevEUI"]
          },
          "slug": {
            "type": "string",
            "title": "slug",
            "description": "Device net id type slug",
            "examples": ["deveui"]
          },
          "regexp": {
            "type": "string",
            "title": "regexp",
            "description": "Device net id type regexp",
            "examples": ["^[0-9a-fA-F]{16}$"]
          },
          "comments": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "comments",
            "description": "Device net id type comment",
            "examples": [
              "This device net id type is a test device net id type and does not contain real information."
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "created",
          "creator",
          "updated",
          "updater",
          "company_id",
          "id",
          "name",
          "slug",
          "regexp",
          "comments"
        ],
        "title": "DeviceNetIdTypeScheme"
      },
      "DeviceScheme": {
        "properties": {
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "Device id",
            "examples": [654]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "Device name",
            "examples": ["СИ-22"]
          },
          "net_id_type_id": {
            "type": "integer",
            "title": "net_id_type_id",
            "description": "Device network type id",
            "examples": [2]
          },
          "net_id": {
            "type": "string",
            "title": "net_id",
            "description": "Device network id",
            "examples": ["FFFFFFFFFFFFFFFF"]
          },
          "templ_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "templ_id",
            "description": "Template id",
            "examples": [1]
          },
          "conv_group_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "conv_group_id",
            "description": "Converter group id",
            "examples": [2]
          },
          "groups": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/DictItemScheme" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "groups",
            "description": "List of device groups"
          },
          "longitude": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "longitude",
            "description": "Device longitude",
            "examples": [59.86035]
          },
          "latitude": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "latitude",
            "description": "Device latitude",
            "examples": [57.63456]
          },
          "altitude": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "altitude",
            "description": "Device altitude",
            "examples": [98]
          },
          "addr_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "addr_id",
            "description": "Address id",
            "examples": [1]
          },
          "comments": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "comments",
            "description": "Device comments",
            "examples": [
              "This device is a test device and does not contain real data."
            ]
          }
        },
        "type": "object",
        "required": [
          "created",
          "creator",
          "updated",
          "updater",
          "status",
          "company_id",
          "id",
          "name",
          "net_id_type_id",
          "net_id",
          "templ_id",
          "conv_group_id",
          "groups",
          "longitude",
          "latitude",
          "altitude",
          "addr_id",
          "comments"
        ],
        "title": "DeviceScheme"
      },
      "DictItemBaseScheme": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "id",
            "description": "pass",
            "examples": [25]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "pass",
            "examples": ["name"]
          }
        },
        "type": "object",
        "required": ["id", "name"],
        "title": "DictItemBaseScheme"
      },
      "DictItemScheme": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "id",
            "description": "pass",
            "examples": [25]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "pass",
            "examples": ["name"]
          }
        },
        "type": "object",
        "required": ["id", "name"],
        "title": "DictItemScheme"
      },
      "Endian": { "type": "integer", "enum": [1, 2], "title": "Endian" },
      "ExternalAccountBaseScheme": {
        "properties": {
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "external account id",
            "examples": [1]
          },
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "name",
            "description": "external account name",
            "examples": ["mqtt air-bit"]
          },
          "proto": {
            "type": "string",
            "title": "proto",
            "description": "protocol",
            "examples": ["amqp"]
          },
          "secure": {
            "type": "boolean",
            "title": "secure",
            "description": "secure connection",
            "examples": [true]
          },
          "hostname": {
            "type": "string",
            "title": "hostname",
            "description": "hostname",
            "examples": ["air-bit.eu"]
          },
          "port": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "port",
            "description": "port",
            "examples": ["8000"]
          },
          "username": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "username",
            "description": "external account username",
            "examples": ["AirBit"]
          },
          "comments": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "comments",
            "description": "external account comments",
            "examples": [
              "This external account is a test external account and does not contain real data."
            ]
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ExternalAccountTagsBaseScheme"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "tags",
            "description": "list of external account tags"
          }
        },
        "type": "object",
        "required": [
          "created",
          "creator",
          "updated",
          "updater",
          "status",
          "company_id",
          "id",
          "name",
          "proto",
          "secure",
          "hostname",
          "port",
          "username",
          "comments",
          "tags"
        ],
        "title": "ExternalAccountBaseScheme"
      },
      "ExternalAccountTagsBaseScheme": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "id",
            "description": "external account tag id",
            "examples": [1]
          },
          "action_name": {
            "type": "string",
            "title": "action_name",
            "description": "action name",
            "examples": ["SendToAMQPBroker"]
          }
        },
        "type": "object",
        "required": ["id", "action_name"],
        "title": "ExternalAccountTagsBaseScheme"
      },
      "GraphClass": {
        "type": "string",
        "enum": ["As is", "Delta", "Delta/s"],
        "title": "GraphClass"
      },
      "GroupFullStructScheme": {
        "properties": {
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "Group id",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "Group name",
            "examples": ["group_name"]
          },
          "comments": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "comments",
            "description": "Group comment",
            "examples": [
              "This group is a test group and does not contain real information."
            ]
          },
          "color": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "color",
            "description": "group color",
            "examples": ["#a94d4d"]
          },
          "num_expr": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "num_expr",
            "description": "group num_expr",
            "examples": ["sin(1)"]
          },
          "tagged_groups": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/GroupTagScheme" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Tagged Groups"
          }
        },
        "type": "object",
        "required": [
          "created",
          "creator",
          "updated",
          "updater",
          "status",
          "company_id",
          "id",
          "name",
          "comments",
          "color",
          "num_expr",
          "tagged_groups"
        ],
        "title": "GroupFullStructScheme"
      },
      "GroupScheme": {
        "properties": {
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "Group id",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "Group name",
            "examples": ["group_name"]
          },
          "comments": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "comments",
            "description": "Group comment",
            "examples": [
              "This group is a test group and does not contain real information."
            ]
          },
          "color": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "color",
            "description": "group color",
            "examples": ["#a94d4d"]
          },
          "num_expr": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "num_expr",
            "description": "group num_expr",
            "examples": ["sin(1)"]
          }
        },
        "type": "object",
        "required": [
          "created",
          "creator",
          "updated",
          "updater",
          "status",
          "company_id",
          "id",
          "name",
          "comments",
          "color",
          "num_expr"
        ],
        "title": "GroupScheme"
      },
      "GroupTagScheme": {
        "properties": {
          "tag": {
            "type": "string",
            "title": "tag",
            "description": "Field should contain only latin [a-zA-Z] chars",
            "examples": ["A"]
          },
          "tagged_group_id": {
            "type": "integer",
            "title": "tagged_group_id",
            "description": "",
            "examples": [2]
          }
        },
        "type": "object",
        "required": ["tag", "tagged_group_id"],
        "title": "GroupTagScheme"
      },
      "GroupType": {
        "type": "integer",
        "enum": [1, 2, 3],
        "title": "GroupType"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "IntervalTypes": {
        "type": "string",
        "enum": ["Day", "Week", "Month", "Year"],
        "title": "IntervalTypes"
      },
      "ListDictItemScheme": {
        "properties": {
          "items": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/DictItemScheme" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Items"
          }
        },
        "type": "object",
        "required": ["items"],
        "title": "ListDictItemScheme"
      },
      "MetricType": {
        "type": "integer",
        "enum": [1, 2, 3],
        "title": "MetricType"
      },
      "ModbusRegisterBaseScheme": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "status",
            "description": "Status",
            "examples": [2]
          },
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "modbus register id",
            "examples": [1]
          },
          "slave_id": {
            "type": "integer",
            "title": "slave_id",
            "description": "Slave/Unit ID",
            "examples": [1]
          },
          "type": {
            "type": "integer",
            "title": "type",
            "description": "Register type",
            "examples": [3]
          },
          "address": {
            "type": "integer",
            "title": "address",
            "description": "Address",
            "examples": [100]
          },
          "count": {
            "type": "integer",
            "title": "count",
            "description": "Registers count",
            "examples": [2]
          },
          "byte_order": {
            "type": "integer",
            "title": "byte_order",
            "description": "Byte order",
            "examples": [1]
          },
          "word_order": {
            "type": "integer",
            "title": "word_order",
            "description": "Word order",
            "examples": [1]
          },
          "dev_id": {
            "type": "integer",
            "title": "dev",
            "description": "Device",
            "examples": [1]
          },
          "param_id": {
            "type": "integer",
            "title": "param_id",
            "description": "Parameter",
            "examples": [72]
          }
        },
        "type": "object",
        "required": [
          "status",
          "created",
          "creator",
          "updated",
          "updater",
          "company_id",
          "id",
          "slave_id",
          "type",
          "address",
          "count",
          "byte_order",
          "word_order",
          "dev_id",
          "param_id"
        ],
        "title": "ModbusRegisterBaseScheme"
      },
      "ObjScheme": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "id",
            "description": "object id",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "object name",
            "examples": ["Apartment"]
          }
        },
        "type": "object",
        "required": ["id", "name"],
        "title": "ObjScheme"
      },
      "ObjectBaseScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "unique object id",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "object name",
            "examples": ["Apartment"]
          },
          "addr_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "addr_id",
            "description": "address id",
            "examples": [1]
          },
          "groups": {
            "items": { "$ref": "#/components/schemas/DictItemScheme" },
            "type": "array",
            "title": "groups",
            "description": "list of object groups"
          },
          "object_types": {
            "items": { "$ref": "#/components/schemas/DictItemScheme" },
            "type": "array",
            "title": "object_types",
            "description": "list of object types"
          },
          "comment": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "comment",
            "description": "object comment",
            "examples": [
              "This object is a test object and does not contain real information."
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "created",
          "creator",
          "updated",
          "updater",
          "company_id",
          "id",
          "name",
          "addr_id",
          "groups",
          "object_types",
          "comment"
        ],
        "title": "ObjectBaseScheme"
      },
      "ObjectDataScheme": {
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "created",
            "description": "state creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "device_date": {
            "type": "string",
            "format": "date-time",
            "title": "device_date",
            "description": "state device date time",
            "examples": ["2023-01-01T00:01:00Z"]
          },
          "dipd_id": {
            "type": "integer",
            "title": "dipd_id",
            "description": "unique packet id",
            "examples": [7]
          },
          "types_data": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ObjectTypesDataScheme"
            },
            "type": "object",
            "title": "Types Data"
          },
          "purpose_data": { "type": "object", "title": "Purpose Data" }
        },
        "type": "object",
        "required": [
          "created",
          "device_date",
          "dipd_id",
          "types_data",
          "purpose_data"
        ],
        "title": "ObjectDataScheme"
      },
      "ObjectFullStructScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "unique object id",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "object name",
            "examples": ["Apartment"]
          },
          "addr_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "addr_id",
            "description": "address id",
            "examples": [1]
          },
          "groups": {
            "items": { "$ref": "#/components/schemas/DictItemScheme" },
            "type": "array",
            "title": "groups",
            "description": "list of object groups"
          },
          "object_types": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/ObjectTypeScheme" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "object_types",
            "description": "object type ids"
          },
          "comment": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "comment",
            "description": "object comment",
            "examples": [
              "This object is a test object and does not contain real information."
            ]
          },
          "self_metrics": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/ObjectMetricScheme" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "self_metrics",
            "description": "list self metrics"
          }
        },
        "type": "object",
        "required": [
          "status",
          "created",
          "creator",
          "updated",
          "updater",
          "company_id",
          "id",
          "name",
          "addr_id",
          "groups",
          "object_types",
          "comment",
          "self_metrics"
        ],
        "title": "ObjectFullStructScheme"
      },
      "ObjectLastDataScheme": {
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "created",
            "description": "state creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "device_date": {
            "type": "string",
            "format": "date-time",
            "title": "device_date",
            "description": "state device date time",
            "examples": ["2023-01-01T00:01:00Z"]
          },
          "dipd_id": {
            "type": "integer",
            "title": "dipd_id",
            "description": "unique packet id",
            "examples": [7]
          },
          "obj_id": {
            "type": "integer",
            "title": "obj_id",
            "description": "object id",
            "examples": [1]
          },
          "types_data": { "type": "object", "title": "Types Data" },
          "purpose_data": { "type": "object", "title": "Purpose Data" }
        },
        "type": "object",
        "required": [
          "created",
          "device_date",
          "dipd_id",
          "obj_id",
          "types_data",
          "purpose_data"
        ],
        "title": "ObjectLastDataScheme"
      },
      "ObjectMetricScheme": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "id",
            "description": "unique metric id",
            "examples": [1]
          },
          "main": {
            "type": "boolean",
            "title": "main",
            "description": "main",
            "default": false,
            "examples": [false]
          },
          "name": {
            "type": "string",
            "title": "metric",
            "description": "metric name",
            "examples": ["Apartment"]
          },
          "comment": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "comment",
            "description": "metric comment",
            "examples": [
              "This metric is a test metric and does not contain real data."
            ]
          },
          "slug": {
            "type": "string",
            "title": "slug",
            "description": "metric slug",
            "examples": ["Hz"]
          },
          "unit": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "unit",
            "description": "metric unit",
            "examples": ["sec"]
          },
          "metric_type": {
            "allOf": [{ "$ref": "#/components/schemas/MetricType" }],
            "title": "metric type",
            "description": "metric type (1 - Constant, 2 - Device, 3 - Expression)",
            "examples": [2]
          },
          "num_expr": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "expression",
            "description": "math expression",
            "examples": ["sin(1)"]
          },
          "omv": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ObjectMetricValueScheme"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "metric values",
            "description": "list metric values"
          }
        },
        "type": "object",
        "required": [
          "id",
          "main",
          "name",
          "comment",
          "slug",
          "unit",
          "metric_type",
          "num_expr",
          "omv"
        ],
        "title": "ObjectMetricScheme"
      },
      "ObjectMetricValueScheme": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "id",
            "description": "unique object metric value id",
            "examples": [1]
          },
          "dev_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "id",
            "description": "unique device id",
            "examples": [1]
          },
          "param_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "id",
            "description": "unique js result param id",
            "examples": [1]
          },
          "const_value": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "constant value",
            "description": "constant value",
            "examples": [1.01]
          },
          "date_from": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "date_from",
            "description": "date to",
            "examples": ["2023-01-01T00:01:00Z"]
          },
          "date_to": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "date_to",
            "description": "date to",
            "examples": ["2023-01-01T00:01:00Z"]
          }
        },
        "type": "object",
        "required": [
          "id",
          "dev_id",
          "param_id",
          "const_value",
          "date_from",
          "date_to"
        ],
        "title": "ObjectMetricValueScheme"
      },
      "ObjectTypeBaseScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "unique object id",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "object type name",
            "examples": ["Apartment"]
          },
          "slug": {
            "type": "string",
            "title": "slug",
            "description": "object type slug",
            "examples": ["Hz"]
          },
          "conv_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "conv_id",
            "description": "unique converter id",
            "examples": [1]
          },
          "conv_attach": {
            "type": "boolean",
            "title": "conv_attach",
            "description": "converter attach",
            "examples": [true]
          }
        },
        "type": "object",
        "required": [
          "status",
          "created",
          "creator",
          "updated",
          "updater",
          "company_id",
          "id",
          "name",
          "slug",
          "conv_id",
          "conv_attach"
        ],
        "title": "ObjectTypeBaseScheme"
      },
      "ObjectTypeFullStructScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "unique object id",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "object type name",
            "examples": ["Apartment"]
          },
          "slug": {
            "type": "string",
            "title": "slug",
            "description": "object type slug",
            "examples": ["Hz"]
          },
          "conv_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "conv_id",
            "description": "unique converter id",
            "examples": [1]
          },
          "conv_attach": {
            "type": "boolean",
            "title": "conv_attach",
            "description": "converter attach",
            "examples": [true]
          },
          "metrics": {
            "items": { "$ref": "#/components/schemas/ObjectMetricScheme" },
            "type": "array",
            "title": "object type metrics",
            "description": "list object type metrics"
          }
        },
        "type": "object",
        "required": [
          "status",
          "created",
          "creator",
          "updated",
          "updater",
          "company_id",
          "id",
          "name",
          "slug",
          "conv_id",
          "conv_attach",
          "metrics"
        ],
        "title": "ObjectTypeFullStructScheme"
      },
      "ObjectTypeScheme": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "id",
            "description": "unique object type id",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "object type name",
            "examples": ["Apartment"]
          },
          "slug": {
            "type": "string",
            "title": "slug",
            "description": "object type slug",
            "examples": ["ob_t"]
          },
          "metrics": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/ObjectMetricScheme" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "metrics",
            "description": "list object type metrics"
          }
        },
        "type": "object",
        "required": ["id", "name", "slug", "metrics"],
        "title": "ObjectTypeScheme"
      },
      "ObjectTypesDataScheme": {
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "created",
            "description": "state creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "device_date": {
            "type": "string",
            "format": "date-time",
            "title": "device_date",
            "description": "state device date time",
            "examples": ["2023-01-01T00:01:00Z"]
          },
          "obj_id": {
            "type": "integer",
            "title": "obj_id",
            "description": "object id",
            "examples": [1]
          },
          "data": { "type": "object", "title": "Data" }
        },
        "type": "object",
        "required": ["created", "device_date", "obj_id", "data"],
        "title": "ObjectTypesDataScheme"
      },
      "ObjectWidgetPlotSettingsBaseScheme": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "id",
            "description": "object widget plot settings id",
            "examples": [1]
          },
          "obj_id": {
            "type": "integer",
            "title": "obj_id",
            "description": "object id",
            "examples": [2]
          },
          "obj_param_id": {
            "type": "integer",
            "title": "obj_param_id",
            "description": "object id",
            "examples": [3]
          },
          "param_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "param_name",
            "description": "parameter name of metric",
            "examples": ["temperature"]
          },
          "plot_type_id": {
            "type": "integer",
            "title": "plot_type_id",
            "description": "plot type",
            "examples": [2]
          },
          "color": {
            "type": "string",
            "title": "color",
            "description": "plot color",
            "examples": ["#2770bf"]
          }
        },
        "type": "object",
        "required": [
          "id",
          "obj_id",
          "obj_param_id",
          "param_name",
          "plot_type_id",
          "color"
        ],
        "title": "ObjectWidgetPlotSettingsBaseScheme"
      },
      "ObjectWidgetScheme": {
        "properties": {
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "object widget id",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "object widget name",
            "examples": ["WIDGET"]
          },
          "display_type": {
            "allOf": [{ "$ref": "#/components/schemas/WidgetDisplayType" }],
            "title": "display_type",
            "description": "object widget display type",
            "examples": [1]
          },
          "plots": {
            "items": {
              "$ref": "#/components/schemas/ObjectWidgetPlotSettingsBaseScheme"
            },
            "type": "array",
            "title": "Plots"
          }
        },
        "type": "object",
        "required": ["company_id", "id", "name", "display_type", "plots"],
        "title": "ObjectWidgetScheme"
      },
      "Page_AddressNodeNormScheme_": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/AddressNodeNormScheme" },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[AddressNodeNormScheme]"
      },
      "Page_AddressNodeScheme_": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/AddressNodeScheme" },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[AddressNodeScheme]"
      },
      "Page_CompanyScheme_": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/CompanyScheme" },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[CompanyScheme]"
      },
      "Page_ConsumptionGroupBaseScheme_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ConsumptionGroupBaseScheme"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[ConsumptionGroupBaseScheme]"
      },
      "Page_ConverterGroupBaseScheme_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ConverterGroupBaseScheme-Output"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[ConverterGroupBaseScheme]"
      },
      "Page_DataChannelBaseScheme_": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/DataChannelBaseScheme" },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[DataChannelBaseScheme]"
      },
      "Page_DeviceDataScheme_": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/DeviceDataScheme" },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[DeviceDataScheme]"
      },
      "Page_DeviceNetIdTypeScheme_": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/DeviceNetIdTypeScheme" },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[DeviceNetIdTypeScheme]"
      },
      "Page_DeviceScheme_": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/DeviceScheme" },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[DeviceScheme]"
      },
      "Page_DictItemScheme_": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/DictItemScheme" },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[DictItemScheme]"
      },
      "Page_ExternalAccountBaseScheme_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ExternalAccountBaseScheme"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[ExternalAccountBaseScheme]"
      },
      "Page_GroupScheme_": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/GroupScheme" },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[GroupScheme]"
      },
      "Page_ModbusRegisterBaseScheme_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ModbusRegisterBaseScheme"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[ModbusRegisterBaseScheme]"
      },
      "Page_ObjectBaseScheme_": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/ObjectBaseScheme" },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[ObjectBaseScheme]"
      },
      "Page_ObjectDataScheme_": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/ObjectDataScheme" },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[ObjectDataScheme]"
      },
      "Page_ObjectLastDataScheme_": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/ObjectLastDataScheme" },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[ObjectLastDataScheme]"
      },
      "Page_ObjectTypeBaseScheme_": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/ObjectTypeBaseScheme" },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[ObjectTypeBaseScheme]"
      },
      "Page_ObjectWidgetScheme_": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/ObjectWidgetScheme" },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[ObjectWidgetScheme]"
      },
      "Page_TaskTimeScheme_": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/TaskTimeScheme" },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[TaskTimeScheme]"
      },
      "Page_TemplateScheme_": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/TemplateScheme" },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[TemplateScheme]"
      },
      "Page_UserBaseScheme_": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/UserBaseScheme" },
            "type": "array",
            "title": "Items"
          },
          "pagination": { "$ref": "#/components/schemas/Pagination" }
        },
        "type": "object",
        "required": ["items", "pagination"],
        "title": "Page[UserBaseScheme]"
      },
      "Pagination": {
        "properties": {
          "total": {
            "type": "integer",
            "title": "total",
            "description": "total items",
            "examples": [100000]
          },
          "pages": {
            "type": "integer",
            "title": "pages",
            "description": "total pages",
            "examples": [100]
          },
          "has_prev": {
            "type": "boolean",
            "title": "has_prev",
            "description": "indicates whether there is a previous page",
            "default": true,
            "examples": [true]
          },
          "has_hext": {
            "type": "boolean",
            "title": "has_hext",
            "description": "indicates whether there is a next page",
            "default": true,
            "examples": [true]
          },
          "page": {
            "type": "integer",
            "title": "has_hext",
            "description": "current page number",
            "examples": [5]
          },
          "prev_num": {
            "type": "integer",
            "title": "prev_num",
            "description": "previous page number",
            "examples": [4]
          },
          "next_num": {
            "type": "integer",
            "title": "next_num",
            "description": "next page number",
            "examples": [6]
          },
          "per_page": {
            "type": "integer",
            "title": "per_page",
            "description": "number of items per page",
            "examples": [10]
          }
        },
        "type": "object",
        "required": [
          "total",
          "pages",
          "has_prev",
          "has_hext",
          "page",
          "prev_num",
          "next_num",
          "per_page"
        ],
        "title": "Pagination"
      },
      "Period": {
        "type": "integer",
        "enum": [0, 1, 2, 3, 4],
        "title": "Period"
      },
      "ProcessActionBaseScheme": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "id",
            "description": "process action id",
            "examples": [1]
          },
          "prio": {
            "type": "integer",
            "title": "prio",
            "description": "prio",
            "examples": [0]
          },
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "name",
            "description": "process action name",
            "examples": ["process action name"]
          },
          "action_class": {
            "type": "string",
            "title": "action_class",
            "description": "path to action class",
            "examples": ["app.libs.actions.SendToApiLNS"]
          },
          "action_params": {
            "type": "object",
            "title": "action_params",
            "description": "action params",
            "examples": [
              {
                "account": 2,
                "conf": false,
                "data_hex": "",
                "dev_eui": "CU-22",
                "fpend": false,
                "fport": 1,
                "imme": false,
                "mac": "",
                "nodel": false,
                "prio": 0
              }
            ]
          }
        },
        "type": "object",
        "required": ["id", "prio", "name", "action_class", "action_params"],
        "title": "ProcessActionBaseScheme"
      },
      "ProcessBaseScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "process id",
            "examples": [1]
          },
          "prio": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "prio",
            "description": "prio",
            "examples": [0]
          },
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "name",
            "description": "process name",
            "examples": ["process name"]
          },
          "process_class": {
            "type": "string",
            "title": "process_class",
            "description": "path to process class",
            "examples": ["app.libs.processes.LNSPayloadProcess"]
          },
          "process_params": {
            "type": "object",
            "title": "process_params",
            "description": "process params",
            "examples": [
              {
                "conf": false,
                "data": "",
                "dev_eui": "CU-22",
                "fpend": false,
                "fport": 1,
                "imme": false,
                "mac": "",
                "nodel": false,
                "prio": 0
              }
            ]
          },
          "actions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ProcessActionBaseScheme"
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Actions"
          }
        },
        "type": "object",
        "required": [
          "status",
          "created",
          "creator",
          "updated",
          "updater",
          "id",
          "prio",
          "name",
          "process_class",
          "process_params",
          "actions"
        ],
        "title": "ProcessBaseScheme"
      },
      "ProcessScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "process id",
            "examples": [1]
          },
          "prio": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "prio",
            "description": "prio",
            "examples": [0]
          },
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "name",
            "description": "process name",
            "examples": ["process name"]
          },
          "process_class": {
            "type": "string",
            "title": "process_class",
            "description": "path to process class",
            "examples": ["app.libs.processes.LNSPayloadProcess"]
          },
          "process_params": {
            "type": "object",
            "title": "process_params",
            "description": "process params",
            "examples": [
              {
                "conf": false,
                "data": "",
                "dev_eui": "CU-22",
                "fpend": false,
                "fport": 1,
                "imme": false,
                "mac": "",
                "nodel": false,
                "prio": 0
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "created",
          "creator",
          "updated",
          "updater",
          "id",
          "prio",
          "name",
          "process_class",
          "process_params"
        ],
        "title": "ProcessScheme"
      },
      "Proto": {
        "type": "string",
        "enum": ["amqp", "http", "mqtt"],
        "title": "Proto"
      },
      "Protocol": {
        "type": "integer",
        "enum": [1, 2, 3, 4],
        "title": "Protocol"
      },
      "PurposeClass": {
        "type": "string",
        "enum": [
          "battery",
          "device_date",
          "frag_number",
          "frag_pkt_id",
          "frag_total",
          "location",
          "profile_id",
          "hit_event",
          "motion_event",
          "sos_event"
        ],
        "title": "PurposeClass"
      },
      "RegisterTypes": {
        "type": "integer",
        "enum": [1, 2, 3, 4],
        "title": "RegisterTypes"
      },
      "ResetPasswordScheme": {
        "properties": {
          "new_password": {
            "type": "string",
            "maxLength": 32,
            "minLength": 5,
            "format": "password",
            "title": "new password",
            "description": "user new password",
            "writeOnly": true,
            "examples": ["12345"]
          },
          "confirm_password": {
            "type": "string",
            "maxLength": 32,
            "minLength": 5,
            "format": "password",
            "title": "new password",
            "description": "user new password",
            "writeOnly": true,
            "examples": ["12345"]
          }
        },
        "type": "object",
        "required": ["new_password", "confirm_password"],
        "title": "ResetPasswordScheme"
      },
      "SimpleTimeBaseScheme": {
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "start_date",
            "description": "start date (format YYYY-MM-DDThh:mm:ss)",
            "examples": [""]
          },
          "interval_type": {
            "allOf": [{ "$ref": "#/components/schemas/IntervalTypes" }],
            "title": "interval_type",
            "description": "Interval",
            "examples": ["Day"]
          },
          "week_choices": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/WeekDays" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "week_choices",
            "description": "day of week",
            "examples": [[1]]
          },
          "end_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "end_date",
            "description": "end time (format YYYY-MM-DDThh:mm:ss). required field if ending type is \"Date\""
          },
          "repetitions_count": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "repetitions_count",
            "description": "Repetitions count"
          },
          "ending_type": {
            "anyOf": [
              { "$ref": "#/components/schemas/TasksEndingTypes" },
              { "type": "null" }
            ],
            "title": "ending_type",
            "description": "ending type \n * 0 - Never \n \n * 1 - Date \n \n * 2 - In \n "
          }
        },
        "type": "object",
        "required": [
          "start_date",
          "interval_type",
          "week_choices",
          "end_date",
          "repetitions_count",
          "ending_type"
        ],
        "title": "SimpleTimeBaseScheme"
      },
      "Status": { "type": "integer", "enum": [1, 2], "title": "Status" },
      "StatusUser": {
        "type": "integer",
        "enum": [1, 2, 3],
        "title": "StatusUser"
      },
      "TaskTimeBaseScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "task time id",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "task time name",
            "examples": ["task_name"]
          },
          "time_field": {
            "anyOf": [
              { "$ref": "#/components/schemas/SimpleTimeBaseScheme" },
              { "$ref": "#/components/schemas/AdvancedTimeBaseScheme" }
            ],
            "title": "time_field",
            "description": "task time parameters"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "start_date",
            "description": "task time start date (format YYYY-MM-DDThh:mm:ss)",
            "examples": ["2023-12-14 09:41:00"]
          },
          "end_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "end_date",
            "description": "task time end date (format YYYY-MM-DDThh:mm:ss)",
            "examples": ["2024-12-14 09:41:00"]
          },
          "tz": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "tz",
            "description": "time zone",
            "examples": ["Europe/Moscow"]
          },
          "regular": {
            "type": "boolean",
            "title": "regular",
            "description": "Regular dispatch",
            "examples": [true]
          },
          "crontab_advanced": {
            "type": "boolean",
            "title": "crontab_advanced",
            "description": "Enable Advanced Crontab",
            "examples": [false]
          },
          "ending_type": {
            "anyOf": [
              { "$ref": "#/components/schemas/TasksEndingTypes" },
              { "type": "null" }
            ],
            "title": "ending_type",
            "description": "endpoint type \n * 0 - Never \n \n * 1 - Date \n \n * 2 - In \n ",
            "examples": [2]
          },
          "repetitions_count": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "repetitions_count",
            "description": "repetitions count",
            "examples": [5]
          }
        },
        "type": "object",
        "required": [
          "status",
          "company_id",
          "created",
          "creator",
          "updated",
          "updater",
          "id",
          "name",
          "time_field",
          "start_date",
          "end_date",
          "tz",
          "regular",
          "crontab_advanced",
          "ending_type",
          "repetitions_count"
        ],
        "title": "TaskTimeBaseScheme"
      },
      "TaskTimeScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "task time id",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "task time name",
            "examples": ["task_name"]
          },
          "time_field": {
            "anyOf": [
              { "$ref": "#/components/schemas/SimpleTimeBaseScheme" },
              { "$ref": "#/components/schemas/AdvancedTimeBaseScheme" }
            ],
            "title": "time_field",
            "description": "task time parameters"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "start_date",
            "description": "task time start date (format YYYY-MM-DDThh:mm:ss)",
            "examples": ["2023-12-14 09:41:00"]
          },
          "end_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "end_date",
            "description": "task time end date (format YYYY-MM-DDThh:mm:ss)",
            "examples": ["2024-12-14 09:41:00"]
          },
          "tz": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "tz",
            "description": "time zone",
            "examples": ["Europe/Moscow"]
          },
          "regular": {
            "type": "boolean",
            "title": "regular",
            "description": "Regular dispatch",
            "examples": [true]
          },
          "crontab_advanced": {
            "type": "boolean",
            "title": "crontab_advanced",
            "description": "Enable Advanced Crontab",
            "examples": [false]
          },
          "ending_type": {
            "anyOf": [
              { "$ref": "#/components/schemas/TasksEndingTypes" },
              { "type": "null" }
            ],
            "title": "ending_type",
            "description": "endpoint type \n * 0 - Never \n \n * 1 - Date \n \n * 2 - In \n ",
            "examples": [2]
          },
          "repetitions_count": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "repetitions_count",
            "description": "repetitions count",
            "examples": [5]
          },
          "processes": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/ProcessBaseScheme" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "processes",
            "description": "list of task time processes"
          }
        },
        "type": "object",
        "required": [
          "status",
          "company_id",
          "created",
          "creator",
          "updated",
          "updater",
          "id",
          "name",
          "time_field",
          "start_date",
          "end_date",
          "tz",
          "regular",
          "crontab_advanced",
          "ending_type",
          "repetitions_count",
          "processes"
        ],
        "title": "TaskTimeScheme"
      },
      "TasksEndingTypes": {
        "type": "integer",
        "enum": [0, 1, 2],
        "title": "TasksEndingTypes"
      },
      "TemplateScheme": {
        "properties": {
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/Status" }],
            "title": "status",
            "description": "status (1 - Inactive, 2 - Active)",
            "examples": [2]
          },
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "Template id",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "Template name",
            "examples": ["Temp 1"]
          },
          "conv_group_id": {
            "type": "integer",
            "title": "conv_group_id",
            "description": "Converter group id",
            "examples": [2]
          },
          "comments": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "comments",
            "description": "Template comments",
            "examples": [
              "This template is a test template and does not contain real information."
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "created",
          "creator",
          "updated",
          "updater",
          "company_id",
          "id",
          "name",
          "conv_group_id",
          "comments"
        ],
        "title": "TemplateScheme"
      },
      "UpdateObjectWidget": {
        "properties": {
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "maxLength": 128,
            "title": "name",
            "description": "object widget name",
            "examples": ["WIDGET"]
          },
          "display_type": {
            "allOf": [{ "$ref": "#/components/schemas/WidgetDisplayType" }],
            "title": "display_type",
            "description": "object widget display type",
            "examples": [1]
          },
          "plots": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/UpdateObjectWidgetPlotSettingsScheme"
                },
                {
                  "$ref": "#/components/schemas/CreateObjectWidgetPlotSettingsScheme"
                }
              ]
            },
            "type": "array",
            "title": "plots",
            "description": "list of widget plot settings"
          }
        },
        "type": "object",
        "required": ["name", "display_type", "plots"],
        "title": "UpdateObjectWidget"
      },
      "UpdateObjectWidgetPlotSettingsScheme": {
        "properties": {
          "obj_id": {
            "type": "integer",
            "title": "obj_id",
            "description": "object id",
            "examples": [2]
          },
          "obj_param_id": {
            "type": "integer",
            "title": "obj_param_id",
            "description": "object id",
            "examples": [3]
          },
          "param_name": {
            "anyOf": [
              { "type": "string", "maxLength": 50 },
              { "type": "null" }
            ],
            "title": "param_name",
            "description": "parameter name of metric",
            "examples": ["temperature"]
          },
          "plot_type_id": {
            "type": "integer",
            "title": "plot_type_id",
            "description": "plot type",
            "examples": [2]
          },
          "color": {
            "type": "string",
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "title": "color",
            "description": "plot color",
            "default": "#2770bf",
            "examples": ["#2770bf"]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "object widget plot settings id",
            "examples": [5]
          }
        },
        "type": "object",
        "required": ["obj_id", "obj_param_id", "plot_type_id", "id"],
        "title": "UpdateObjectWidgetPlotSettingsScheme"
      },
      "UserAuditScheme-Input": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "id",
            "description": "unique user id",
            "examples": [654]
          },
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "name",
            "description": "user name",
            "examples": ["Ivanov Ivan"]
          },
          "email": {
            "type": "string",
            "maxLength": 128,
            "title": "email",
            "description": "user email",
            "examples": ["ivan.ivanov@air-bit.eu"]
          },
          "role": { "$ref": "#/components/schemas/UserRole" }
        },
        "type": "object",
        "required": ["id", "email", "role"],
        "title": "UserAuditScheme"
      },
      "UserAuditScheme-Output": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "id",
            "description": "unique user id",
            "examples": [654]
          },
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "name",
            "description": "user name",
            "examples": ["Ivanov Ivan"]
          },
          "email": {
            "type": "string",
            "maxLength": 128,
            "title": "email",
            "description": "user email",
            "examples": ["ivan.ivanov@air-bit.eu"]
          },
          "role": { "$ref": "#/components/schemas/UserRole" }
        },
        "type": "object",
        "required": ["id", "name", "email", "role"],
        "title": "UserAuditScheme"
      },
      "UserBaseScheme": {
        "properties": {
          "company_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "company_id",
            "description": "Unique identifier of the owner's company, returned only for Superadmin",
            "examples": [1]
          },
          "created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "created",
            "description": "object creation time",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "creator": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "updated": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "updated",
            "description": "user name",
            "examples": ["2023-01-02T00:00:00Z"]
          },
          "updater": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuditScheme-Output" },
              { "type": "null" }
            ]
          },
          "id": {
            "type": "integer",
            "title": "id",
            "description": "unique user id",
            "examples": [654]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "user name",
            "examples": ["Ivanov Ivan"]
          },
          "email": {
            "type": "string",
            "maxLength": 128,
            "title": "email",
            "description": "user email",
            "examples": ["ivan.ivanov@air-bit.eu"]
          },
          "phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "phone",
            "description": "user phone",
            "examples": ["+79990001111"]
          },
          "role": { "$ref": "#/components/schemas/UserRole" },
          "locale": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "locale",
            "description": "user language in the system",
            "examples": ["English"]
          },
          "tz": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "tz",
            "description": "time zone of the user in the system",
            "examples": ["Europe/Moscow"]
          },
          "last_login": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "last_login",
            "description": "the last authorization of the user in the system",
            "examples": ["2023-01-01T00:00:00Z"]
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/StatusUser" }],
            "title": "status",
            "description": "user status (1 - Inactive, 2 - New, 3 - Active)",
            "examples": [3]
          }
        },
        "type": "object",
        "required": [
          "company_id",
          "created",
          "creator",
          "updated",
          "updater",
          "id",
          "name",
          "email",
          "phone",
          "role",
          "locale",
          "tz",
          "last_login",
          "status"
        ],
        "title": "UserBaseScheme"
      },
      "UserRecoveryPasswordScheme": {
        "properties": {
          "login": {
            "type": "string",
            "title": "login",
            "description": "User login(email or phone)",
            "examples": ["ivan.ivanov@air-bit.eu", "+79990001111"]
          }
        },
        "type": "object",
        "required": ["login"],
        "title": "UserRecoveryPasswordScheme"
      },
      "UserRegisterScheme": {
        "properties": {
          "email": {
            "type": "string",
            "maxLength": 128,
            "title": "email",
            "description": "user email",
            "examples": ["ivan.ivanov@air-bit.eu"]
          },
          "password": {
            "type": "string",
            "format": "password",
            "title": "password",
            "description": "user password",
            "writeOnly": true,
            "examples": ["12345"]
          }
        },
        "type": "object",
        "required": ["email", "password"],
        "title": "UserRegisterScheme"
      },
      "UserRole": {
        "type": "integer",
        "enum": [0, 1, 2, 3, 4],
        "title": "UserRole"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "ViewClass": {
        "type": "string",
        "enum": ["Battery charge", "Checker", "Percent scale"],
        "title": "ViewClass"
      },
      "WeekDays": {
        "type": "integer",
        "enum": [1, 2, 3, 4, 5, 6, 0],
        "title": "WeekDays"
      },
      "WidgetDisplayType": {
        "type": "integer",
        "enum": [1, 2],
        "title": "WidgetDisplayType"
      },
      "app__apiv2__constans__ActionPrio__1": {
        "type": "integer",
        "enum": [0, 1, 2],
        "title": "ActionPrio"
      },
      "app__apiv2__constans__ActionPrio__2": {
        "$ref": "#/components/schemas/app__apiv2__constans__ActionPrio__1"
      },
      "app__apiv2__constans__Actions__1": {
        "type": "string",
        "enum": [
          "DataChannels",
          "SendToApiLNS",
          "SendToAMQPBroker",
          "SendToEmail",
          "SendToHTTP",
          "SendToMQTT",
          "SendToSMS",
          "SendToTelegram"
        ],
        "title": "Actions"
      },
      "app__apiv2__constans__Actions__2": {
        "$ref": "#/components/schemas/app__apiv2__constans__Actions__1"
      },
      "app__apiv2__constans__DataFormatInOut__1": {
        "type": "string",
        "enum": ["hex", "str"],
        "title": "DataFormatInOut"
      },
      "app__apiv2__constans__DataFormatInOut__2": {
        "$ref": "#/components/schemas/app__apiv2__constans__DataFormatInOut__1"
      }
    },
    "securitySchemes": {
      "AWSAuthenticator": {
        "type": "http",
        "description": "Authorization by session",
        "scheme": "basic"
      }
    }
  }
}
