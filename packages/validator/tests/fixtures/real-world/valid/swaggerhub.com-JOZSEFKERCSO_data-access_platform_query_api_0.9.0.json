{
  "openapi": "3.1.0",
  "info": {
    "title": "Data Access Platform Query API",
    "version": "0.9.0",
    "description": "[Datasets](tables/index.html) | [Entity relationship diagram](erd/index.html) | [PostgreSQL schema](sql/postgresql.sql) | [MySQL schema](sql/mysql.sql) | [JSON schema](schema.json)\n\n# Data representation\n\nSnapshot and incremental queries in Data Access Platform (DAP) write output to AWS S3 buckets, and return pre-signed URLs to files (objects) in S3. Output comprises of records exported from data tables, and optional metadata associated with them.\n\n## Data formats\n\nDAP API supports several output data formats, including text (TSV), CSV and JSON. Data in all formats is transferred with GZIP compression.\n\n### Text (TSV)\n\nText format is a simple tabular format in which each record (table row) occupies a single line.\n\n* Output always begins with a header row, which lists all metadata and data field names.\n* Fields (table columns) are delimited by *tab* characters.\n* Non-printable characters and special values are escaped with *backslash* (`\\`), as shown below:\n\n| Escape | Interpretation               |\n| ------ | ---------------------------- |\n| `\\N`   | NULL value                   |\n| `\\b`   | Backspace (ASCII 8)          |\n| `\\f`   | Form feed (ASCII 12)         |\n| `\\n`   | Newline (ASCII 10)           |\n| `\\r`   | Carriage return (ASCII 13)   |\n| `\\t`   | Tab (ASCII 9)                |\n| `\\v`   | Vertical tab (ASCII 11)      |\n| `\\\\`   | Backslash (single character) |\n\nThis format allows data to be easily imported into a database engine, e.g. with PostgreSQL [COPY](https://www.postgresql.org/docs/current/sql-copy.html).\n\nOutput in this format is transmitted as media type `text/plain` in UTF-8 encoding.\n\n### Comma-separated values (CSV)\n\nComma-separated values (CSV) output follows [RFC 4180](https://www.ietf.org/rfc/rfc4180.html) with a few extensions:\n\n* Output always begins with a header row, which lists all metadata and data field names.\n* Strings are quoted with double quotes (`\"`) if they contain special characters such as the double quote itself, the comma delimiter, a newline, a carriage return, a tab character, etc.\n* Empty strings are always represented as `\"\"` to avoid ambiguity with missing values.\n* Missing values (a.k.a. `NULL`) are represented with no data (no characters between delimiters).\n* Each row has the same number of fields.\n\nThese extensions allow differentiating empty strings (`\"\"`) from missing values (a.k.a. `NULL`, represented as no data), for which RFC 4180 defines no rules. If a field is missing, the comma separators are still included, i.e. multiple comma separators may follow one another in a row if there is no data in subsequent fields.\n\nDouble quotes act as escape sequences inside a quoted string. If there are two consecutive double quote characters (i.e. `\"\"`), the sequence is interpreted as a single double quote character (`\"`). If a string contains newline or carriage return characters, they are emitted verbatim (in compliance with RFC 4180). As such, a record may be broken into several lines if the data contains newlines. (Some applications might not interpret these flawlessly, double-check your integration when you deal with CSV files.)\n\nThe following example demonstrates some of the above:\n```csv\nmeta.action,key.pkey,value.prop1,value.prop2\nU,1,a string,42\nU,2,\"a string, but in \"\"quotes\"\".\",\nD,3,,\nU,4,\"a multi-line\nstring\",\n```\n\nOutput in this format is transmitted as media type `text/csv` in UTF-8 encoding.\n\n### JSON Lines\n\nWhen the output data is represented in the [JSON Lines](https://jsonlines.org/) format, each record (table row) occupies a single line. Each line is a JSON object, which can be validated against the JSON schema returned by DAP API.\n\nOutput in this format is transmitted as media type `application/jsonlines` in UTF-8 encoding.\n\n## Metadata\n\nOutput of DAP API may include record-level metadata in addition to table data.\n\nIn tabular formats (such as text and CSV), metadata are included in the output as additional columns. Consider the following example:\n```csv\nmeta.action,key.pkey,value.prop1,value.prop2\nU,1,\"value1\",42\nU,2,\"value2\",NULL\nD,3,,\n```\n\nThis CSV output has a metadata section (`meta`), a primary key section (`key`) and a record value section (`value`). The metadata section contains a single field called `action`. The key and value sections comprise of several fields: `pkey`, `prop1` and `prop2`.\n\nIn the JSON Lines format, metadata, key and value sections are top-level properties `meta`, `key` and `value`, and have properties of their own:\n```json\n{ \"meta\": { \"action\": \"U\", ... }, \"key\": { \"pkey\": 1 }, \"value\": { \"prop1\": \"value1\", \"prop2\": 42 } }\n{ \"meta\": { \"action\": \"U\", ... }, \"key\": { \"pkey\": 2 }, \"value\": { \"prop1\": \"value2\", \"prop2\": null } }\n{ \"meta\": { \"action\": \"D\", ... }, \"key\": { \"pkey\": 3 } }\n```\n\nThe set of metadata fields returned depends on the context. Some contexts may produce fields that other contexts do not. If output would contain no metadata fields, the section is omitted entirely.\n\n### Action\n\nThe metadata field `action` identifies whether a record is *upserted* (inserted or updated) or *(hard) deleted* for an incremental query. In the result of a snapshot query, all records are to be understood as upserted.\n\n* Upserted records (denoted by `U`) have all fields present in the data.\n* Deleted records (denoted by `D`) only have the primary key field in their data, other field values are missing.\n\nOccasionally, the term *soft delete* is used, which in this context is equivalent to an update, and is denoted with a `U`, and all field values are included in the output.\n\n### Timestamp\n\nThe metadata field `ts` indicates when a record was last updated in the underlying transactional data lake table. For an incremental query with `since` and `until` timestamp parameters, `ts` for all returned records is always strictly greater than `since`, and always less than or equal to `until`.\n\nThe timestamp may correlate to but does not correspond to the real time when the event took place (e.g. when a student enrolled to a course). If you need to know when the event happened, use the timestamp embedded in the data. Specifically, many tables have timestamp data columns such as `created_at` or `updated_at`, which are controlled by the product or application that generates the event (e.g. Canvas).\n\nTimestamps are stored in fields of JSON type `string`, are formatted as per ISO-8601, and are to be understood as in time zone UTC. This is aligned with how timestamps are represented in the OpenAPI format `date-time` as per [RFC 3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).\n\n## Format transformations\n\nTabular data formats such as CSV cannot capture the hierarchy that JSON can represent easily. Nested JSON objects are flattened before they are included in the output. For example, consider the JSON data:\n```json\n{\n    \"id\": 1,\n    \"question\": {\n        \"headline\": \"title\",\n        \"text\": \"some text\"\n    },\n    \"answers\": [\n        { \"answer\": \"A\", \"score\": 0 },\n        { \"answer\": \"B\", \"score\": 1 },\n        { \"answer\": \"C\", \"score\": 0 }\n    ]\n}\n```\nHere, the property `question` with two fixed sub-properties can be flattened into CSV columns `question.headline` and `question.text`. However, the property `answers` cannot be flattened because the list has an indeterminate cardinality. Items with indeterminate cardinality are transmitted as a JSON string. (Cardinality check is performed on the data (JSON) schema, not the actual data.)\n\nThis is how text output would look like after flattening (tabs are shown as four spaces):\n```\ndata.id    data.question.headline    data.question.text    data.answers\n1    title    some text    [{\"answer\":\"A\",\"score\":0},{\"answer\":\"B\",\"score\":1},{\"answer\":\"C\",\"score\":0}]\n```\n\nIn a similar fashion, this is how CSV output would look after flattening:\n```csv\ndata.id,data.question.headline,data.question.text,data.answers\n1,title,some text,\"[{\"\"answer\"\":\"\"A\"\",\"\"score\"\":0},{\"\"answer\"\":\"\"B\"\",\"\"score\"\":1},{\"\"answer\"\":\"\"C\"\",\"\"score\"\":0}]\"\n```\n\nIf you wish to avoid format transformations entirely, use the JSON Lines data format.\n"
  },
  "servers": [{ "url": "https://api-gateway.instructure.com/dap" }],
  "paths": {
    "/job/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "A snapshot query that has completed with success. **OR** An incremental query that has completed with success. **OR** A data access job that has terminated with failure.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/CompleteSnapshotJob" },
                    { "$ref": "#/components/schemas/CompleteIncrementalJob" },
                    { "$ref": "#/components/schemas/FailedJob" }
                  ]
                }
              }
            }
          },
          "202": {
            "description": "A data access job in progress.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TableJob" }
              }
            }
          },
          "401": {
            "description": "Client lacks valid authentication credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/AuthenticationError"
                    }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          },
          "404": {
            "description": "The job does not exist or has expired.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "$ref": "#/components/schemas/NotFoundError" }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                },
                "example": {
                  "error": {
                    "type": "ObjectNotFound",
                    "uuid": "123e4567-e89b-12d3-a456-426614174000",
                    "message": "Job does not exist.",
                    "id": "12345678-1234-5678-1234-567812345678",
                    "kind": "job"
                  }
                }
              }
            }
          },
          "500": {
            "description": "The requested account has not been onboarded yet. **OR** The requested account has been onboarded but client access has been restricted. **OR** Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "A machine-processable identifier for the error. Typically corresponds to the fully-qualified exception class, as per the type system of the language that emitted the message (e.g. Java, Python or Scala exception type)."
                            },
                            "uuid": {
                              "type": "string",
                              "description": "Unique identifier of the error. This identifier helps locate the exact source of the error (e.g. find the log entry in the server log stream). Make sure to include this identifier when contacting support."
                            },
                            "message": {
                              "type": "string",
                              "description": "A human-readable description for the error for informational purposes. The exact format of the message is unspecified, and implementations should not rely on the presence of any specific information."
                            }
                          },
                          "additionalProperties": false,
                          "required": ["type", "uuid", "message"],
                          "title": "Raised when the client is not onboarded."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "A machine-processable identifier for the error. Typically corresponds to the fully-qualified exception class, as per the type system of the language that emitted the message (e.g. Java, Python or Scala exception type)."
                            },
                            "uuid": {
                              "type": "string",
                              "description": "Unique identifier of the error. This identifier helps locate the exact source of the error (e.g. find the log entry in the server log stream). Make sure to include this identifier when contacting support."
                            },
                            "message": {
                              "type": "string",
                              "description": "A human-readable description for the error for informational purposes. The exact format of the message is unspecified, and implementations should not rely on the presence of any specific information."
                            }
                          },
                          "additionalProperties": false,
                          "required": ["type", "uuid", "message"],
                          "title": "Raised when the client is onboarded but access is forbidden."
                        },
                        { "$ref": "#/components/schemas/ProcessingError" }
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          },
          "504": {
            "description": "Gateway timeout error, usually should be handled with retry logic.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/GatewayTimeoutError"
                    }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          }
        },
        "tags": ["API"],
        "summary": "Returns status information about a job.",
        "description": "Jobs (and all objects they created) are deleted 24 hours after the job was started. Deleted jobs are no longer returned by this endpoint.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier returned when the job was started by querying data.",
            "required": true,
            "schema": { "type": "string" }
          }
        ]
      }
    },
    "/object/url": {
      "post": {
        "responses": {
          "200": {
            "description": "A list of pre-signed URLs.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResourceResult" }
              }
            }
          },
          "400": {
            "description": "The input is malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "$ref": "#/components/schemas/ValidationError" }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          },
          "401": {
            "description": "Client lacks valid authentication credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/AuthenticationError"
                    }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          },
          "404": {
            "description": "Objects do not exist or have expired.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "$ref": "#/components/schemas/NotFoundError" }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          },
          "500": {
            "description": "The requested account has not been onboarded yet. **OR** The requested account has been onboarded but client access has been restricted. **OR** Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "A machine-processable identifier for the error. Typically corresponds to the fully-qualified exception class, as per the type system of the language that emitted the message (e.g. Java, Python or Scala exception type)."
                            },
                            "uuid": {
                              "type": "string",
                              "description": "Unique identifier of the error. This identifier helps locate the exact source of the error (e.g. find the log entry in the server log stream). Make sure to include this identifier when contacting support."
                            },
                            "message": {
                              "type": "string",
                              "description": "A human-readable description for the error for informational purposes. The exact format of the message is unspecified, and implementations should not rely on the presence of any specific information."
                            }
                          },
                          "additionalProperties": false,
                          "required": ["type", "uuid", "message"],
                          "title": "Raised when the client is not onboarded."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "A machine-processable identifier for the error. Typically corresponds to the fully-qualified exception class, as per the type system of the language that emitted the message (e.g. Java, Python or Scala exception type)."
                            },
                            "uuid": {
                              "type": "string",
                              "description": "Unique identifier of the error. This identifier helps locate the exact source of the error (e.g. find the log entry in the server log stream). Make sure to include this identifier when contacting support."
                            },
                            "message": {
                              "type": "string",
                              "description": "A human-readable description for the error for informational purposes. The exact format of the message is unspecified, and implementations should not rely on the presence of any specific information."
                            }
                          },
                          "additionalProperties": false,
                          "required": ["type", "uuid", "message"],
                          "title": "Raised when the client is onboarded but access is forbidden."
                        },
                        { "$ref": "#/components/schemas/ProcessingError" }
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          },
          "504": {
            "description": "Gateway timeout error, usually should be handled with retry logic.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/GatewayTimeoutError"
                    }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          }
        },
        "tags": ["API"],
        "summary": "Produces a list of pre-signed URLs for a list of objects.",
        "description": "In contrast to objects, which have a longer lifetime, pre-signed URLs are valid for a shorter duration,\ntypically 15 minutes.\n\nFile paths returned by this endpoint do not adhere to any specification. While they may contain auxiliary\ninformation such as job ID or part counter, these are only informative. Downstream systems should not depend\non any specific patterns of file names, or make any assumptions how much data each file contains.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/Object" }
              },
              "example": [{ "id": "uuid-1" }, { "id": "uuid-2" }]
            }
          },
          "required": true
        }
      }
    },
    "/query/{namespace}/table/{table}/data": {
      "post": {
        "responses": {
          "200": {
            "description": "A snapshot query that has completed with success. **OR** An incremental query that has completed with success. **OR** A data access job that has terminated with failure.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/CompleteSnapshotJob" },
                    { "$ref": "#/components/schemas/CompleteIncrementalJob" },
                    { "$ref": "#/components/schemas/FailedJob" }
                  ]
                }
              }
            }
          },
          "202": {
            "description": "A data access job in progress.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TableJob" }
              }
            }
          },
          "400": {
            "description": "The input is malformed. **OR** There is no data in the requested range. **OR** Raised when data is queried outside of the allowed time range, and the table was reloaded recently.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "oneOf": [
                        { "$ref": "#/components/schemas/ValidationError" },
                        { "$ref": "#/components/schemas/OutOfRangeError" },
                        { "$ref": "#/components/schemas/SnapshotRequiredError" }
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          },
          "401": {
            "description": "Client lacks valid authentication credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/AuthenticationError"
                    }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          },
          "404": {
            "description": "The namespace or table does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "$ref": "#/components/schemas/NotFoundError" }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          },
          "500": {
            "description": "The requested account has not been onboarded yet. **OR** The requested account has been onboarded but client access has been restricted. **OR** Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "A machine-processable identifier for the error. Typically corresponds to the fully-qualified exception class, as per the type system of the language that emitted the message (e.g. Java, Python or Scala exception type)."
                            },
                            "uuid": {
                              "type": "string",
                              "description": "Unique identifier of the error. This identifier helps locate the exact source of the error (e.g. find the log entry in the server log stream). Make sure to include this identifier when contacting support."
                            },
                            "message": {
                              "type": "string",
                              "description": "A human-readable description for the error for informational purposes. The exact format of the message is unspecified, and implementations should not rely on the presence of any specific information."
                            }
                          },
                          "additionalProperties": false,
                          "required": ["type", "uuid", "message"],
                          "title": "Raised when the client is not onboarded."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "A machine-processable identifier for the error. Typically corresponds to the fully-qualified exception class, as per the type system of the language that emitted the message (e.g. Java, Python or Scala exception type)."
                            },
                            "uuid": {
                              "type": "string",
                              "description": "Unique identifier of the error. This identifier helps locate the exact source of the error (e.g. find the log entry in the server log stream). Make sure to include this identifier when contacting support."
                            },
                            "message": {
                              "type": "string",
                              "description": "A human-readable description for the error for informational purposes. The exact format of the message is unspecified, and implementations should not rely on the presence of any specific information."
                            }
                          },
                          "additionalProperties": false,
                          "required": ["type", "uuid", "message"],
                          "title": "Raised when the client is onboarded but access is forbidden."
                        },
                        { "$ref": "#/components/schemas/ProcessingError" }
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          },
          "504": {
            "description": "Gateway timeout error, usually should be handled with retry logic.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/GatewayTimeoutError"
                    }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          }
        },
        "tags": ["API"],
        "summary": "Queries a table for data.",
        "description": "This is an asynchronous operation. Calling this endpoint will start a new job and return immediately with status information.\nHowever, the operation will continue running on the server. The caller can poll the status of the job to find out when it is\nready.\n\nIf a job with the same query parameters already exists, its details are returned rather than starting a new job.\n\nIf no scope is specified, then the endpoint uses the default scope of the authenticated user.\nReturns an error if the user has access to several scopes and the scope is not explicitly specified.\n\nFor incremental queries, the output uses a special metadata field called `action` to identify whether a record is *upserted*\n(inserted or updated) or *(hard) deleted* (`U` corresponds to upsert, and `D` to delete):\n```json\n{ \"meta\": { \"action\": \"U\", ... }, \"key\": { \"pkey\": 1 }, \"value\": { \"prop1\": \"value1\", \"prop2\": 42 } }\n{ \"meta\": { \"action\": \"U\", ... }, \"key\": { \"pkey\": 2 }, \"value\": { \"prop1\": \"value2\", \"prop2\": null } }\n{ \"meta\": { \"action\": \"D\", ... }, \"key\": { \"pkey\": 3 } }\n```\nUpserted records have the primary key fields present in the sub-object `key` and all other data fields in the sub-object `value`.\nDeleted records only have the primary key fields in the `key` property, and lack the `value` property.\n\nHard deletes are infrequent. They only take place when a record is irreversibly deleted from the source database, e.g. to comply\nwith privacy or legal requirements.\n\nIn most cases, records are *soft-deleted*, i.e. they are updated in such a way as to be understood *deleted* or *inactive* though\nthe record is retained in the database, e.g. by setting a `workflow_state` column to the value `inactive` or `deleted`. In this\ncontext, soft deletes are equivalent to an update, and are denoted with a `U`, and all field values are included in the output.\n\nIn the rare event that inserting a record is quickly followed by a hard delete in the source database between two successive\nincremental queries, a record might appear with a new (so far unseen) `key`, no `value` and an `action` of `D`.\n\nFor snapshot queries, deleted records are not included in the output:\n```json\n{ \"meta\": { ... }, \"key\": { \"pkey\": 1 }, \"value\": { \"prop1\": \"value1\", \"prop2\": 42 } }\n{ \"meta\": { ... }, \"key\": { \"pkey\": 2 }, \"value\": { \"prop1\": \"value2\", \"prop2\": null } }\n```\n\nThis is a rate-limited endpoint. If excessive data volume is requested repeatedly using this endpoint (e.g. a full snapshot every\nhour), future requests may be denied. We encourage making use of incremental queries, which substantially reduce the amount of data\nreturned.",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Identifies the domain or product that the request pertains to, e.g. `canvas`.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "table",
            "in": "path",
            "description": "Canonical name of the table whose data to return.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Identifies the scope to access, e.g. a root account UUID for Canvas, or a district ID for Mastery.",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Query" },
              "example": {
                "format": "jsonl",
                "since": "2022-07-14T10:30:00Z",
                "until": "2022-07-14T14:30:00Z"
              }
            }
          },
          "required": true
        }
      }
    },
    "/query/{namespace}/table": {
      "get": {
        "responses": {
          "200": {
            "description": "A list of tables in the given scope.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TableList" },
                "example": { "tables": ["accounts", "submissions", "users"] }
              }
            }
          },
          "401": {
            "description": "Client lacks valid authentication credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/AuthenticationError"
                    }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          },
          "404": {
            "description": "The namespace does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "$ref": "#/components/schemas/NotFoundError" }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          },
          "500": {
            "description": "The requested account has not been onboarded yet. **OR** The requested account has been onboarded but client access has been restricted. **OR** Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "A machine-processable identifier for the error. Typically corresponds to the fully-qualified exception class, as per the type system of the language that emitted the message (e.g. Java, Python or Scala exception type)."
                            },
                            "uuid": {
                              "type": "string",
                              "description": "Unique identifier of the error. This identifier helps locate the exact source of the error (e.g. find the log entry in the server log stream). Make sure to include this identifier when contacting support."
                            },
                            "message": {
                              "type": "string",
                              "description": "A human-readable description for the error for informational purposes. The exact format of the message is unspecified, and implementations should not rely on the presence of any specific information."
                            }
                          },
                          "additionalProperties": false,
                          "required": ["type", "uuid", "message"],
                          "title": "Raised when the client is not onboarded."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "A machine-processable identifier for the error. Typically corresponds to the fully-qualified exception class, as per the type system of the language that emitted the message (e.g. Java, Python or Scala exception type)."
                            },
                            "uuid": {
                              "type": "string",
                              "description": "Unique identifier of the error. This identifier helps locate the exact source of the error (e.g. find the log entry in the server log stream). Make sure to include this identifier when contacting support."
                            },
                            "message": {
                              "type": "string",
                              "description": "A human-readable description for the error for informational purposes. The exact format of the message is unspecified, and implementations should not rely on the presence of any specific information."
                            }
                          },
                          "additionalProperties": false,
                          "required": ["type", "uuid", "message"],
                          "title": "Raised when the client is onboarded but access is forbidden."
                        },
                        { "$ref": "#/components/schemas/ProcessingError" }
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          },
          "504": {
            "description": "Gateway timeout error, usually should be handled with retry logic.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/GatewayTimeoutError"
                    }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          }
        },
        "tags": ["API"],
        "summary": "Returns a list of table names that exist in the given scope (e.g. organization domain).",
        "description": "If no scope is specified, then the endpoint uses the default scope of the authenticated user.\nReturns an error if the user has access to several scopes and the scope is not explicitly specified.",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Identifies the domain or product that the request pertains to, e.g. `canvas`.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Identifies the scope to access, e.g. a root account UUID for Canvas, or a district ID for Mastery.",
            "required": false,
            "schema": { "type": "string" }
          }
        ]
      }
    },
    "/query/{namespace}/table/{table}/schema": {
      "get": {
        "responses": {
          "200": {
            "description": "The versioned JSON schema specification for the table.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VersionedSchema" }
              }
            }
          },
          "401": {
            "description": "Client lacks valid authentication credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/AuthenticationError"
                    }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          },
          "404": {
            "description": "The namespace or table does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "$ref": "#/components/schemas/NotFoundError" }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          },
          "500": {
            "description": "The requested account has not been onboarded yet. **OR** The requested account has been onboarded but client access has been restricted. **OR** Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "A machine-processable identifier for the error. Typically corresponds to the fully-qualified exception class, as per the type system of the language that emitted the message (e.g. Java, Python or Scala exception type)."
                            },
                            "uuid": {
                              "type": "string",
                              "description": "Unique identifier of the error. This identifier helps locate the exact source of the error (e.g. find the log entry in the server log stream). Make sure to include this identifier when contacting support."
                            },
                            "message": {
                              "type": "string",
                              "description": "A human-readable description for the error for informational purposes. The exact format of the message is unspecified, and implementations should not rely on the presence of any specific information."
                            }
                          },
                          "additionalProperties": false,
                          "required": ["type", "uuid", "message"],
                          "title": "Raised when the client is not onboarded."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "A machine-processable identifier for the error. Typically corresponds to the fully-qualified exception class, as per the type system of the language that emitted the message (e.g. Java, Python or Scala exception type)."
                            },
                            "uuid": {
                              "type": "string",
                              "description": "Unique identifier of the error. This identifier helps locate the exact source of the error (e.g. find the log entry in the server log stream). Make sure to include this identifier when contacting support."
                            },
                            "message": {
                              "type": "string",
                              "description": "A human-readable description for the error for informational purposes. The exact format of the message is unspecified, and implementations should not rely on the presence of any specific information."
                            }
                          },
                          "additionalProperties": false,
                          "required": ["type", "uuid", "message"],
                          "title": "Raised when the client is onboarded but access is forbidden."
                        },
                        { "$ref": "#/components/schemas/ProcessingError" }
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          },
          "504": {
            "description": "Gateway timeout error, usually should be handled with retry logic.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/GatewayTimeoutError"
                    }
                  },
                  "additionalProperties": false,
                  "required": ["error"]
                }
              }
            }
          }
        },
        "tags": ["API"],
        "summary": "Returns the JSON schema that records in the table conform to.",
        "description": "If data is returned in JSON Lines format (`*.jsonl`) then the schema applies to the JSON object obtained by combining\nthe sub-objects accessed via the `key` and `value` properties, respectively, of JSON items.\n\nAssume the schema reads as follows:\n```json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"pkey\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n        },\n        \"prop1\": {\n            \"type\": \"string\"\n        },\n        \"prop2\": {\n            \"type\": \"integer\"\n        },\n        \"additionalProperties\": false,\n        \"required\": [\n            \"pkey\",\n            \"prop1\"\n        ]\n    }\n}\n```\n\nSuppose we have the following JSON output:\n```json\n{ \"meta\": { \"action\": \"U\", ... }, \"key\": { \"pkey\": 1 }, \"value\": { \"prop1\": \"value1\", \"prop2\": 42 } }\n{ \"meta\": { \"action\": \"U\", ... }, \"key\": { \"pkey\": 2 }, \"value\": { \"prop1\": \"value2\", \"prop2\": null } }\n{ \"meta\": { \"action\": \"D\", ... }, \"key\": { \"pkey\": 3 } }\n```\nIn the example directly above, the first and second items (`update` records) would both validate against the pre-defined schema.\nThe validator would check the following synthesized JSON objects:\n```json\n{ \"pkey\": 1, \"prop1\": \"value1\", \"prop2\": 42 }\n{ \"pkey\": 2, \"prop1\": \"value2\", \"prop2\": null }\n```\nThe third item (a `delete` record) does not have to validate because it indicates that the client is to remove the item.\n\nIf data is returned in Comma-Separated Values format (`*.csv`) then the schema type constraints apply to CSV `key` and `value`\ncolumns, respectively, but not CSV `meta` columns. For example, assume we have the following CSV output:\n```csv\nmeta.action,key.pkey,value.prop1,value.prop2\nU,1,\"value1\",42\nU,2,\"value2\",\nD,3,,\n```\nThen the schema would read the same as in the JSON example above.\n\nNested JSON objects are flattened to simple fields, with composite names constructed using the dot notation (`parent.child`).\n\nIf no scope is specified, then the endpoint uses the default scope of the authenticated user.\nReturns an error if the user has access to several scopes and the scope is not explicitly specified.",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Identifies the domain or product that the request pertains to, e.g. `canvas`.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "table",
            "in": "path",
            "description": "Canonical name of the table whose schema to return.",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Identifies the scope to access, e.g. a root account UUID for Canvas, or a district ID for Mastery.",
            "required": false,
            "schema": { "type": "string" }
          }
        ]
      }
    }
  },
  "jsonSchemaDialect": "https://json-schema.org/draft/2020-12/schema",
  "components": {
    "schemas": {
      "CompleteIncrementalJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Opaque unique identifier of the job."
          },
          "status": {
            "type": "string",
            "enum": ["waiting", "running", "complete", "failed"],
            "description": "The current status of the job."
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time when job will no longer be available."
          },
          "objects": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Object" },
            "description": "The list of objects generated by the job."
          },
          "schema_version": {
            "type": "integer",
            "description": "Version of the schema that records in the table conform to."
          },
          "since": {
            "type": "string",
            "format": "date-time",
            "description": "Start timestamp (in UTC); only those records are returned that have been persisted since the specified date and time."
          },
          "until": {
            "type": "string",
            "format": "date-time",
            "description": "End timestamp (in UTC); only those records are returned that have been persisted before the specified date and time. This can be used as a starting point for future incremental queries."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "status",
          "objects",
          "schema_version",
          "since",
          "until"
        ],
        "title": "An incremental query that has completed with success."
      },
      "CompleteSnapshotJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Opaque unique identifier of the job."
          },
          "status": {
            "type": "string",
            "enum": ["waiting", "running", "complete", "failed"],
            "description": "The current status of the job."
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time when job will no longer be available."
          },
          "objects": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Object" },
            "description": "The list of objects generated by the job."
          },
          "schema_version": {
            "type": "integer",
            "description": "Version of the schema that records in the table conform to."
          },
          "at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp (in UTC) that identifies the table state. This can be used as a starting point for future incremental queries."
          }
        },
        "additionalProperties": false,
        "required": ["id", "status", "objects", "schema_version", "at"],
        "title": "A snapshot query that has completed with success."
      },
      "FailedJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Opaque unique identifier of the job."
          },
          "status": {
            "type": "string",
            "enum": ["waiting", "running", "complete", "failed"],
            "description": "The current status of the job."
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time when job will no longer be available."
          },
          "error": {
            "$ref": "#/components/schemas/ProcessingError",
            "description": "Provides more details on the error that occurred."
          }
        },
        "additionalProperties": false,
        "required": ["id", "status", "error"],
        "title": "A data access job that has terminated with failure."
      },
      "Object": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Uniquely identifies the object."
          }
        },
        "additionalProperties": false,
        "required": ["id"],
        "title": "A reference to a binary or text object persisted in object storage, such as a CSV, JSON, or Parquet file.",
        "description": "The lifetime of the object depends on the operation that created it but typically lasts for 24 hours.\nObject identifiers can be traded for pre-signed URLs via an authenticated endpoint operation while the object exists."
      },
      "ProcessingError": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "A machine-processable identifier for the error. Typically corresponds to the fully-qualified exception class, as per the type system of the language that emitted the message (e.g. Java, Python or Scala exception type)."
          },
          "uuid": {
            "type": "string",
            "description": "Unique identifier of the error. This identifier helps locate the exact source of the error (e.g. find the log entry in the server log stream). Make sure to include this identifier when contacting support."
          },
          "message": {
            "type": "string",
            "description": "A human-readable description for the error for informational purposes. The exact format of the message is unspecified, and implementations should not rely on the presence of any specific information."
          }
        },
        "additionalProperties": false,
        "required": ["type", "uuid", "message"],
        "title": "Raised when a job has terminated due to an unexpected error."
      },
      "TableJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Opaque unique identifier of the job."
          },
          "status": {
            "type": "string",
            "enum": ["waiting", "running", "complete", "failed"],
            "description": "The current status of the job."
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time when job will no longer be available."
          }
        },
        "additionalProperties": false,
        "required": ["id", "status"],
        "title": "A data access job in progress."
      },
      "AuthenticationError": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "A machine-processable identifier for the error. Typically corresponds to the fully-qualified exception class, as per the type system of the language that emitted the message (e.g. Java, Python or Scala exception type)."
          },
          "uuid": {
            "type": "string",
            "description": "Unique identifier of the error. This identifier helps locate the exact source of the error (e.g. find the log entry in the server log stream). Make sure to include this identifier when contacting support."
          },
          "message": {
            "type": "string",
            "description": "A human-readable description for the error for informational purposes. The exact format of the message is unspecified, and implementations should not rely on the presence of any specific information."
          }
        },
        "additionalProperties": false,
        "required": ["type", "uuid", "message"],
        "title": "Raised when the client fails to provide valid authentication credentials."
      },
      "NotFoundError": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "A machine-processable identifier for the error. Typically corresponds to the fully-qualified exception class, as per the type system of the language that emitted the message (e.g. Java, Python or Scala exception type)."
          },
          "uuid": {
            "type": "string",
            "description": "Unique identifier of the error. This identifier helps locate the exact source of the error (e.g. find the log entry in the server log stream). Make sure to include this identifier when contacting support."
          },
          "message": {
            "type": "string",
            "description": "A human-readable description for the error for informational purposes. The exact format of the message is unspecified, and implementations should not rely on the presence of any specific information."
          },
          "id": {
            "type": "string",
            "description": "The identifier of the entity not found, e.g. the name of a table or the UUID of a job."
          },
          "kind": {
            "type": "string",
            "description": "The entity that is not found such as a namespace, table, object or job."
          }
        },
        "additionalProperties": false,
        "required": ["type", "uuid", "message", "id", "kind"],
        "title": "Raised when an entity does not exist or has expired."
      },
      "GatewayTimeoutError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Always the same message signaling that a timeout received."
          }
        },
        "additionalProperties": false,
        "required": ["message"],
        "title": "Raised when received timeout from gateway."
      },
      "Resource": {
        "type": "object",
        "properties": {
          "url": {
            "$ref": "#/components/schemas/URL",
            "description": "URL to the object."
          }
        },
        "additionalProperties": false,
        "required": ["url"],
        "title": "A pre-signed URL to a binary or text object persisted in object storage, such as a CSV, JSON or Parquet file.",
        "description": "The lifetime of the pre-signed URL depends on the operation that created it but typically lasts for 15 minutes.\nNo authentication is required to fetch the object via the pre-signed URL."
      },
      "URL": {
        "type": "string",
        "format": "uri",
        "pattern": "^https?://",
        "title": "A Uniform Resource Locator (URL)."
      },
      "ResourceResult": {
        "type": "object",
        "properties": {
          "urls": {
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/Resource" },
            "description": "A dictionary of key-value pairs consisting of an ObjectID and the corresponding resource URL."
          }
        },
        "additionalProperties": false,
        "required": ["urls"],
        "title": "Associates object identifiers with pre-signed URLs to output resources."
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "A machine-processable identifier for the error. Typically corresponds to the fully-qualified exception class, as per the type system of the language that emitted the message (e.g. Java, Python or Scala exception type)."
          },
          "uuid": {
            "type": "string",
            "description": "Unique identifier of the error. This identifier helps locate the exact source of the error (e.g. find the log entry in the server log stream). Make sure to include this identifier when contacting support."
          },
          "message": {
            "type": "string",
            "description": "A human-readable description for the error for informational purposes. The exact format of the message is unspecified, and implementations should not rely on the presence of any specific information."
          },
          "location": {
            "type": "object",
            "properties": {
              "line": {
                "type": "integer",
                "description": "Line number (1-based)."
              },
              "column": {
                "type": "integer",
                "description": "Column number w.r.t. the beginning of the line (1-based)."
              },
              "character": {
                "type": "integer",
                "description": "Character number w.r.t. the beginning of the input (1-based)."
              }
            },
            "additionalProperties": false,
            "required": ["line", "column", "character"],
            "description": "Location of where invalid input was found."
          }
        },
        "additionalProperties": false,
        "required": ["type", "uuid", "message", "location"],
        "title": "Raised when a JSON validation error occurs."
      },
      "Filter": {
        "type": "object",
        "properties": {
          "select": {
            "type": "array",
            "items": { "type": "string" },
            "description": "A list of column names to include in the data set returned; other columns are excluded. If omitted, return all columns."
          },
          "where": {
            "type": "object",
            "description": "A filter condition to apply to records; only records that meet the condition are included. If omitted, return all records."
          }
        },
        "additionalProperties": false,
        "title": "Identifies a subset of data to fetch from a table.",
        "description": "(This feature is not currently implemented.)\n\nFilter encompasses column-level (`select`) and row-level (`where`) filters.\n\nColumn-level filters allow clients to include only those columns in the output they are interested in.\nRow-level filters let clients specify a condition that is applied to each record; if the condition is true,\nthe record is included in the output, otherwise omitted. Row-level filters are inspired by the\n[where argument](https://hasura.io/docs/latest/queries/postgres/query-filters/#the-where-argument) in Hasura.\n\nConsider a table with the following columns:\n\n* `family_name` of type `string`,\n* `given_name` of type `string`,\n* `birth_date` of type `datetime`,\n* `height` of type `number`, representing a person's height in meters,\n* `status`, which is an enumeration that can take the values `active`, `inactive`, `pending`.\n\nInclude only those people whose family name is `Smith`:\n\n```json\n{ \"family_name\": { \"_eq\": \"Smith\" } }\n```\n\nReturn people born in the 21st century:\n\n```json\n{ \"birth_date\": { \"_gte\": \"2001-01-01\" } }\n```\n\nInclude only those people whose height is between 1.6 and 1.7 meters:\n\n```json\n{ \"height\": { \"_gt\": 1.6, \"_lt\": 1.7 } }\n```\n\nReturn people whose status is `active` or `pending`:\n\n```json\n{ \"status\": { \"_in\": [\"active\", \"pending\"] } }\n```\n\nFind people whose family name is `Smith` and given name starts with `L` or `K`:\n\n```json\n{ \"family_name\": { \"_eq\": \"Smith\" }, \"given_name\": { \"_match\": \"^[LK]\" } }\n```\n\nFind people whose family name is `Smith` *or* whose given name starts with `L` or `K`:\n\n```json\n{ \"_or\": [\n    { \"family_name\": { \"_eq\": \"Smith\" } },\n    { \"given_name\": { \"_match\": \"^[LK]\" } }\n] }\n```\n\nThe type of the value matched in the condition must be compatible with the type of the column.\n\nThe following operators are generally available for all types:\n\n* `_eq` (equal to)\n* `_neq` (not equal to)\n\nComparison operators for strings:\n\n* `_match` (value matches regular expression)\n\nComparison operators for numbers, dates and timestamps:\n\n* `_gt` (greater than)\n* `_lt` (less than)\n* `_gte` (greater than or equal to)\n* `_lte` (less than or equal to)\n\nComparison operators for enumerations:\n\n* `_in` (value in set of values)\n* `_nin` (value not in set of values)\n\nOperators to build composite Boolean expressions:\n\n* `_and`\n* `_or`\n* `_not`"
      },
      "Format": {
        "type": "string",
        "enum": ["tsv", "csv", "jsonl", "parquet"],
        "title": "Identifies the format of the data returned, e.g. TSV, CSV, JSON Lines, or Parquet.",
        "description": "Tab-separated values (TSV) is a simple tabular format in which each record (table row) occupies a single line.\n\n* Output always begins with a header row, which lists all metadata and data field names.\n* Fields (table columns) are delimited by *tab* characters.\n* Non-printable characters and special values are escaped with *backslash* (`\\`).\n\nComma-separated values (CSV) output follows [RFC 4180](https://www.ietf.org/rfc/rfc4180.html) with a few extensions:\n\n* Output always begins with a header row, which lists all metadata and data field names.\n* Strings are quoted with double quotes (`\"`) if they contain special characters such as the double quote itself,\n  the comma delimiter, a newline, a carriage return, a tab character, etc., or if their string representation would\n  be identical to a special value such as NULL.\n* Empty strings are always represented as `\"\"`.\n* NULL values are represented with the unquoted literal string `NULL`.\n* Missing values are presented as an empty string (no characters between delimiters).\n* Each row has the same number of fields.\n\nWhen the output data is represented in the [JSON Lines](https://jsonlines.org/) format, each record (table row)\noccupies a single line. Each line is a JSON object, which can be validated against the corresponding JSON schema.\n\nParquet files are compatible with Spark version 3.0 and later."
      },
      "IncrementalQuery": {
        "type": "object",
        "properties": {
          "format": {
            "$ref": "#/components/schemas/Format",
            "description": "The format of the data to be returned."
          },
          "filter": {
            "$ref": "#/components/schemas/Filter",
            "description": "(Not implemented; this field must be omitted.) Any filters applied to the source, e.g. include specific columns, or omit specific rows."
          },
          "since": {
            "type": "string",
            "format": "date-time",
            "description": "Start timestamp (in UTC); only those records are returned that have been persisted since the specified date and time. This typically equals `at` returned by a previous snapshot query job, or `until` returned by a previous incremental query job."
          },
          "until": {
            "type": "string",
            "format": "date-time",
            "description": "End timestamp (in UTC); only those records are returned that have not been changed after the specified date and time. If omitted (recommended), defaults to the commit time of the latest record."
          }
        },
        "additionalProperties": false,
        "required": ["format", "since"],
        "title": "Incremental queries return consolidated updates to a table, and help update a previous state to the present state.",
        "description": "If only a *since* timestamp is given (recommended), the operation returns all changes since the specified point in\ntime. If multiple updates took place to a record since the specified time, only the most recent version of the\nrecord is returned.\n\nIf both a *since* and an *until* timestamp is given, the operation returns all records that have changed since\nthe start timestamp of the interval but have not been altered after the end timestamp of the interval. Any records\nthat have been updated after the *until* timestamp are not included in the query result. This functionality is\nuseful to break up larger batches of changes but cannot be reliably used as a means of reconstructing a database\nstate in the past (i.e. a point-in-time query or a backup of a previous state).\n\nThe range defined by *since* and *until* is inclusive for the *since* timestamp but exclusive for the *until*\ntimestamp.\n\nYou would normally use incremental queries to fetch changes since a snapshot query or a previous incremental query.\nIf issued as a follow-up to a snapshot query, the *since* timestamp of the incremental query would be equal to the\n*at* timestamp of the snapshot query. If issued as a follow-up to an incremental query, you would chain the *until*\ntimestamp returned by the previous query job with the *since* timestamp of the new query request."
      },
      "Query": {
        "oneOf": [
          { "$ref": "#/components/schemas/SnapshotQuery" },
          { "$ref": "#/components/schemas/IncrementalQuery" }
        ]
      },
      "SnapshotQuery": {
        "type": "object",
        "properties": {
          "format": {
            "$ref": "#/components/schemas/Format",
            "description": "The format of the data to be returned."
          },
          "filter": {
            "$ref": "#/components/schemas/Filter",
            "description": "(Not implemented; this field must be omitted.) Any filters applied to the source, e.g. include specific columns, or omit specific rows."
          }
        },
        "additionalProperties": false,
        "required": ["format"],
        "title": "Snapshot queries return the present state of the table.",
        "description": "Snapshot queries help populate an empty database. After the initial snapshot query, you would use incremental\nqueries to get the most up-to-date version of the data."
      },
      "OutOfRangeError": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "A machine-processable identifier for the error. Typically corresponds to the fully-qualified exception class, as per the type system of the language that emitted the message (e.g. Java, Python or Scala exception type)."
          },
          "uuid": {
            "type": "string",
            "description": "Unique identifier of the error. This identifier helps locate the exact source of the error (e.g. find the log entry in the server log stream). Make sure to include this identifier when contacting support."
          },
          "message": {
            "type": "string",
            "description": "A human-readable description for the error for informational purposes. The exact format of the message is unspecified, and implementations should not rely on the presence of any specific information."
          },
          "since": {
            "type": "string",
            "format": "date-time",
            "description": "The earliest permitted timestamp."
          },
          "until": {
            "type": "string",
            "format": "date-time",
            "description": "The latest permitted timestamp."
          }
        },
        "additionalProperties": false,
        "required": ["type", "uuid", "message", "since"],
        "title": "Raised when data is queried outside of the allowed time range."
      },
      "SnapshotRequiredError": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "A machine-processable identifier for the error. Typically corresponds to the fully-qualified exception class, as per the type system of the language that emitted the message (e.g. Java, Python or Scala exception type)."
          },
          "uuid": {
            "type": "string",
            "description": "Unique identifier of the error. This identifier helps locate the exact source of the error (e.g. find the log entry in the server log stream). Make sure to include this identifier when contacting support."
          },
          "message": {
            "type": "string",
            "description": "A human-readable description for the error for informational purposes. The exact format of the message is unspecified, and implementations should not rely on the presence of any specific information."
          },
          "since": {
            "type": "string",
            "format": "date-time",
            "description": "The earliest permitted timestamp."
          },
          "until": {
            "type": "string",
            "format": "date-time",
            "description": "The latest permitted timestamp."
          }
        },
        "additionalProperties": false,
        "required": ["type", "uuid", "message", "since"],
        "title": "Raised when data is queried outside of the allowed time range, and the table was reloaded recently. A new snapshot is required to keep data consistency."
      },
      "TableList": {
        "type": "object",
        "properties": {
          "tables": { "type": "array", "items": { "type": "string" } }
        },
        "additionalProperties": false,
        "required": ["tables"],
        "title": "A list of tables that exist in the organization domain."
      },
      "JsonType": {
        "oneOf": [
          { "type": "null" },
          { "type": "boolean" },
          { "type": "integer" },
          { "type": "number" },
          { "type": "string" },
          {
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/JsonType" }
          },
          {
            "type": "array",
            "items": { "$ref": "#/components/schemas/JsonType" }
          }
        ],
        "examples": [
          {
            "property1": null,
            "property2": true,
            "property3": 64,
            "property4": "string",
            "property5": ["item"],
            "property6": { "key": "value" }
          }
        ]
      },
      "VersionedSchema": {
        "type": "object",
        "properties": {
          "schema": {
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/JsonType" },
            "description": "The JSON Schema object to validate against."
          },
          "version": {
            "type": "integer",
            "description": "The version of the schema."
          }
        },
        "additionalProperties": false,
        "required": ["schema", "version"],
        "title": "The state of the schema at a specific point in time.",
        "description": "Schemas are backwards compatible. They receive strictly monotonically increasing version numbers as schema\nevolution takes place.",
        "examples": [
          {
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "title": "The ID of this version object. Primary key."
                },
                "user_id": {
                  "type": "integer",
                  "format": "int64",
                  "title": "The ID of the submitter. Foreign key to `users.id`."
                },
                "context_id": {
                  "type": "integer",
                  "format": "int64",
                  "title": "The ID of the course this submission belongs to. Foreign key to `courses.id`."
                },
                "context_type": {
                  "type": "string",
                  "enum": ["Course"],
                  "title": "The type of the context object (typically `Course`)."
                }
              },
              "additionalProperties": false,
              "required": ["id", "context_type"],
              "title": "This table stores information describing previous versions of individual submission objects."
            },
            "version": 1
          }
        ]
      },
      "access_tokens": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for an access token record."
          },
          "developer_key_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a developer key."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of the user the token acts as."
          },
          "real_user_id": {
            "type": "integer",
            "format": "int64",
            "description": "If the token was created while masquerading, this is the real user doing the masquerading. Used for auditing."
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of last access using this access token."
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "The expiration date/time for this token. This may be a NULL value."
          },
          "purpose": {
            "type": "string",
            "maxLength": 255,
            "description": "For user-generated tokens, purpose can be manually set. For app-generated tokens, this should be generated based on the scope defined in the authentication process."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when an `access_tokens` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when an `access_tokens` record was updated."
          },
          "scopes": {
            "type": "string",
            "description": "A list of scopes that can be applied to access tokens. i.e.: courses."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "The current state of the access token record."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "developer_key_id",
          "created_at",
          "updated_at",
          "workflow_state"
        ],
        "title": "Stores the access tokens for a user and developer tools.",
        "description": "This table in Canvas Data 2 will only share developer tool specific token metadata. All users have an option to create an access token\nbased on their role and level of data access."
      },
      "account_users": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the users account association record."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when an `account_users` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when an `account_users` record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "The current state of the account user record."
          },
          "account_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of an account."
          },
          "role_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a role."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "user_id",
          "created_at",
          "updated_at",
          "workflow_state",
          "account_id",
          "role_id"
        ],
        "title": "Join table for accounts, users and roles.",
        "description": "Contains users' roles within an account (this table includes the account admins)."
      },
      "accounts": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the Account object."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The display name of the account."
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the account was deleted. Will only ever be NULL for end customers."
          },
          "parent_account_id": {
            "type": "integer",
            "format": "int64",
            "description": "The account's parent ID, or NULL if this is the root account."
          },
          "current_sis_batch_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the currently processing SIS (Student Information System) batch (if submitted via UI, not API)."
          },
          "storage_quota": {
            "type": "integer",
            "format": "int64",
            "description": "The storage quote for the account, in megabytes."
          },
          "default_storage_quota": {
            "type": "integer",
            "format": "int64",
            "description": "The storage quota for children accounts in megabytes, if not otherwise specified."
          },
          "default_locale": {
            "type": "string",
            "maxLength": 255,
            "description": "Language for the account."
          },
          "default_user_storage_quota": {
            "type": "integer",
            "format": "int64",
            "description": "The default storage quota for users in the account in megabytes, if not otherwise specified."
          },
          "default_group_storage_quota": {
            "type": "integer",
            "format": "int64",
            "description": "The storage quota for a group in the account in megabytes, if not otherwise specified."
          },
          "integration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The account's identifier in the Student Information System."
          },
          "lti_context_id": {
            "type": "string",
            "maxLength": 255,
            "description": "UUID of the Canvas context in LTI standard. Secondary ID for this context, could be used in API to identify resource as well."
          },
          "consortium_parent_account_id": {
            "type": "integer",
            "format": "int64",
            "description": "The root account of the consortium account, if this root account is part of a consortium."
          },
          "course_template_id": {
            "type": "integer",
            "format": "int64",
            "description": "The course selected as a template for new courses created in this account. 0 if a template should not be used, nor inherited."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the account was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the account was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted", "suspended"],
            "description": "Life-cycle state for account."
          },
          "default_time_zone": {
            "type": "string",
            "maxLength": 255,
            "description": "The default time zone of the account. Allowed time zones are [IANA time zones](https://www.iana.org/time-zones) or friendlier [Ruby on Rails time zones](https://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html)."
          },
          "uuid": {
            "type": "string",
            "maxLength": 255,
            "description": "The UUID of the account."
          },
          "sis_source_id": {
            "type": "string",
            "maxLength": 255,
            "description": "Correlated id for the record for this course in the SIS system (assuming SIS integration is configured)"
          }
        },
        "additionalProperties": false,
        "required": ["id", "created_at", "updated_at", "workflow_state"],
        "title": "Stores data about account objects in the Canvas system.",
        "description": "Accounts are most often used to represent a hierarchy of colleges, schools, departments, campuses."
      },
      "assessment_question_banks": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the question bank."
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time the question bank was deleted. If the question bank has not been deleted the value will be NULL."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time the question bank was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time the question bank was last updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "Life-cycle state for the question bank."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the question bank's context (account or course)."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Account", "Course"],
            "description": "The type of context the question bank is associated with."
          },
          "migration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The unique identifier of the migration that imported this question bank."
          },
          "title": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The title for the question bank."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "context_type"
        ],
        "title": "Stores data about question banks.",
        "description": "Question Banks are a place to house questions that can be added to quizzes across courses or accounts."
      },
      "assessment_questions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the Assessment Question."
          },
          "name": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Name of the question."
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time the question was deleted. If the question has not been deleted the value will be NULL."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the quiz question was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the quiz question was last updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "active",
              "independently_edited",
              "deleted"
            ],
            "description": "Life-cycle state for the quiz question."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the question bank's context (account or course). No longer used as Canvas delegates to `context_id` of the associated AssessmentQuestion."
          },
          "context_type": {
            "type": "string",
            "maxLength": 255,
            "description": "The type of context the question bank is associated with. No longer used as Canvas delegates to the context of the associated AssessmentQuestion."
          },
          "question_data": {
            "type": "string",
            "description": "A variety of question data related points."
          },
          "assessment_question_bank_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the assessment question bank this question is associated with."
          },
          "migration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The unique identifier of the migration that imported this assessment question."
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "description": "The position of the question."
          }
        },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Stores attributes of a question associated with a quiz.",
        "description": "The column `question_data` stores a variety of question data related points such as:\n    * `question_type` denotes the type of the question. Possible values are:\n            - `calculated_question`\n            - `essay_question`\n            - `file_upload_question`\n            - `fill_in_multiple_blanks_question`\n            - `matching_question`\n            - `multiple_answers_question`\n            - `multiple_choice_question`\n            - `multiple_dropdowns_question`\n            - `numerical_question`,\n            - `short_answer_question`\n            - `text_only_question`\n            - `true_false_question`\n    * `question_text` is the text of the question.\n    * `regrade_option` denotes if regrading is available for the question. Possible values are: `available`\n      and `unavailable` for question types `multiple_answers_question`, `multiple_choice_question`,\n      `true_false_question`, and NULL for others. Defaults to `available` for the allowed question types, and NULL\n      for the rest.\n    * `correct_comments` are comments to be displayed if the student answers the question correctly.\n    * `incorrect_comments` are comments to be displayed if the student answers the question incorrectly.\n    * `neutral_comments` are comments to be displayed regardless of how the student answers the question.\n    * `answers` is a JSON array of all possible answers."
      },
      "assignment_groups": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the assignment group."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The name of the assignment group."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time when the assignment group was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time when the assignment group was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "available", "deleted", "active"],
            "description": "Life-cycle state for the assignment group."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the assignments group context (course)."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Course"],
            "description": "The type of object represented by `context_id`."
          },
          "default_assignment_name": {
            "type": "string",
            "maxLength": 255,
            "description": "The default title for an assignment when it is created in this assignment group."
          },
          "group_weight": {
            "type": "number",
            "format": "float64",
            "description": "The weight of the assignment group."
          },
          "migration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The unique identifier of the migration that imported this assignment group."
          },
          "sis_source_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The Student Information System source ID of the assignment group."
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "description": "The position of the assignment group."
          },
          "rules": {
            "type": "object",
            "properties": {
              "drop_highest": {
                "type": "integer",
                "format": "int32",
                "description": "Number of highest scores to be dropped for each user."
              },
              "drop_lowest": {
                "type": "integer",
                "format": "int32",
                "description": "Number of lowest scores to be dropped for each user."
              },
              "never_drop": {
                "type": "array",
                "items": { "type": "integer", "format": "int32" },
                "description": "Assignment IDs that should never be dropped. E.g.: [33, 17, 24]."
              }
            },
            "additionalProperties": false,
            "required": ["never_drop"],
            "title": "Type extracted from column `assignment_groups.rules`."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "context_id",
          "context_type"
        ],
        "title": "Stores rules associated with an assignment group."
      },
      "assignment_override_students": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the Assignment Override Student."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the user."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the `assignment_override_student` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the `assignment_override_student` was last updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "Life-cycle state for assignment override students record."
          },
          "assignment_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the assignment the override is associated with."
          },
          "quiz_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the quiz the override is associated with."
          },
          "assignment_override_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the assignment override dimension."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "user_id",
          "created_at",
          "updated_at",
          "workflow_state",
          "assignment_override_id"
        ],
        "title": "Stores measures related to ad hoc users for whom an assignment override exists."
      },
      "assignment_overrides": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the `assignment_override`."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the `assignment_override` was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the `assignment_override` was last updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "Gives the workflow state of this record."
          },
          "due_at": {
            "type": "string",
            "format": "date-time",
            "description": "The new *due at* date-time for this group of users."
          },
          "unlock_at": {
            "type": "string",
            "format": "date-time",
            "description": "The new *unlock at* date-time for this group of users."
          },
          "lock_at": {
            "type": "string",
            "format": "date-time",
            "description": "The new *lock at* date-time for this group of users."
          },
          "all_day": {
            "type": "boolean",
            "description": "Indicates if the `all_day` field overrides the original `all_day` field in the table `assignment` for this group of users."
          },
          "assignment_version": {
            "type": "integer",
            "format": "int32",
            "description": "The version of the assignment this override is applied to."
          },
          "set_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "Group",
              "CourseSection",
              "ADHOC",
              "Noop"
            ],
            "description": "Used in conjunction with `set_id`, this field tells us what type of foreign relation is used."
          },
          "set_id": {
            "type": "integer",
            "format": "int64",
            "description": "The primary key for the object type described in `set_id`."
          },
          "due_at_overridden": {
            "type": "boolean",
            "description": "Indicates if the `unlock_at` field overrides the original."
          },
          "unlock_at_overridden": {
            "type": "boolean",
            "description": "Indicates if the `unlock_at` field overrides the original `unlock_at` field in the table `assignment` for this group of users."
          },
          "lock_at_overridden": {
            "type": "boolean",
            "description": "Indicates if the `lock_at` field overrides the original `lock_at` field in the table `assignment` for this group of users."
          },
          "quiz_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the quiz the override is associated with."
          },
          "quiz_version": {
            "type": "integer",
            "format": "int32",
            "description": "The version of the quiz this override is applied to."
          },
          "assignment_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the assignment the override is associated with."
          },
          "all_day_date": {
            "type": "string",
            "format": "date",
            "description": "The new date version of the due date if the `all_day` flag is true."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "The title for this `assignment_override`."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "set_type",
          "due_at_overridden",
          "unlock_at_overridden",
          "lock_at_overridden",
          "title"
        ],
        "title": "Stores records for assignment due date overrides.",
        "description": "There may be many records in this table for each assignment. Use the data in this table to calculate actual due, all day, lock and\nunlock dates/times."
      },
      "assignments": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Primary key for this record in the Canvas assignments table."
          },
          "integration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "Third Party unique identifier for Assignments."
          },
          "lti_context_id": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "UUID of the Canvas context in LTI standard. Secondary ID for this context, could be used in API to identify resource as well."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which this assignment was originally created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which this assignment was last modified."
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "unpublished",
              "published",
              "deleted",
              "duplicating",
              "fail_to_import",
              "failed_to_duplicate",
              "failed_to_import",
              "failed_to_migrate",
              "importing",
              "migrating"
            ],
            "description": "Current workflow state of the assignment."
          },
          "due_at": {
            "type": "string",
            "format": "date-time",
            "description": "The due date for the assignment. Returns NULL if not present."
          },
          "unlock_at": {
            "type": "string",
            "format": "date-time",
            "description": "The unlock date, meaning that the assignment is unlocked after this date. Returns NULL if not present."
          },
          "lock_at": {
            "type": "string",
            "format": "date-time",
            "description": "The lock date, meaning that the assignment is locked after this date. Returns NULL if not present."
          },
          "points_possible": {
            "type": "number",
            "format": "float64",
            "description": "The maximum points possible for the assignment."
          },
          "grading_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "gpa_scale",
              "letter_grade",
              "not_graded",
              "pass_fail",
              "percent",
              "points",
              "default"
            ],
            "description": "The type of grading the assignment receives."
          },
          "submission_types": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "__dap_unspecified__",
                "discussion_topic",
                "online_quiz",
                "on_paper",
                "none",
                "external_tool",
                "online",
                "online_text_entry",
                "online_url",
                "online_upload",
                "media_recording",
                "not_graded",
                "wiki_page",
                "student_annotation",
                "default_external_tool"
              ],
              "title": "Type for column `assignments.submission_types`."
            },
            "description": "The types of submissions allowed for this assignment."
          },
          "assignment_group_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies which assignment grouping the particular assignment is part of (assignment groups may have a scoring weight to determine how much of the assignment group contributes to the total grade)."
          },
          "grading_standard_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the grading standard being applied to this assignment. Valid if `grading_type` is `letter_grade` or `gpa_scale`."
          },
          "submissions_downloads": {
            "type": "integer",
            "format": "int32",
            "description": "Number of times submissions have been downloaded in a zip bundle."
          },
          "peer_review_count": {
            "type": "integer",
            "format": "int32",
            "description": "Represents the amount of reviews each user is assigned. NOTE: This key is NOT present unless you have automatic_peer_reviews set to true."
          },
          "peer_reviews_due_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp for when peer reviews should be completed."
          },
          "peer_reviews_assigned": {
            "type": "boolean",
            "description": "True if all peer reviews have been assigned."
          },
          "peer_reviews": {
            "type": "boolean",
            "description": "Indicates if peer reviews are required for this assignment."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the object this assignment belongs to. Typically course."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Course"],
            "description": "The type of object this assignment belongs to."
          },
          "automatic_peer_reviews": {
            "type": "boolean",
            "description": "Indicates if peer reviews are assigned automatically. If false, the teacher is expected to manually assign peer reviews."
          },
          "all_day": {
            "type": "boolean",
            "description": "True if a specific time for when the assignment is due was not given. The effective due time will be 11:59pm."
          },
          "all_day_date": {
            "type": "string",
            "format": "date",
            "description": "The date version of the due date if the `all_day` flag is true."
          },
          "could_be_locked": {
            "type": "boolean",
            "description": "True if the assignment is under a module that can be locked."
          },
          "migration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The unique identifier of the migration that imported this assignment. For assignments which have been imported via a content migration, an opaque identifier for the assignment in its source. This field is used by Canvas to identify when an assignment is being re-imported, and can also be used to identify multiple assignments that have been copied from the same source."
          },
          "grade_group_students_individually": {
            "type": "boolean",
            "description": "If this is a group assignment, boolean flag indicating whether or not students will be graded individually."
          },
          "anonymous_peer_reviews": {
            "type": "boolean",
            "description": "If true, hide the identities of peer-reviewing and peer-reviewed students. Only relevant if `peer_reviews` is true."
          },
          "turnitin_enabled": {
            "type": "boolean",
            "description": "Flag indicating whether or not Turnitin has been enabled for the assignment. NOTE: This flag will not appear unless your account has the Turnitin plugin available."
          },
          "allowed_extensions": {
            "type": "string",
            "maxLength": 255,
            "description": "Allowed file extensions, which take effect if `submission_types` includes `online_upload`."
          },
          "group_category_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the assignment’s group set, if this is a group assignment. For group discussions, set `group_category_id` on the discussion topic, not the linked assignment."
          },
          "freeze_on_copy": {
            "type": "boolean",
            "description": "Indicates if assignment will be frozen when it is copied. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account."
          },
          "only_visible_to_overrides": {
            "type": "boolean",
            "description": "Indicates whether the assignment is only visible to overrides."
          },
          "post_to_sis": {
            "type": "boolean",
            "description": "Present if Sync Grades to Student Information System feature is enabled."
          },
          "moderated_grading": {
            "type": "boolean",
            "description": "Indicates if the assignment is moderated."
          },
          "grades_published_at": {
            "type": "string",
            "format": "date-time",
            "description": "For assignments with moderated grading, a timestamp identifying when provisional grades were published."
          },
          "omit_from_final_grade": {
            "type": "boolean",
            "description": "If true, the assignment will be omitted from the student's final grade."
          },
          "intra_group_peer_reviews": {
            "type": "boolean",
            "description": "Indicates whether or not members from within the same group on a group assignment can be assigned to peer review their own group's work."
          },
          "vericite_enabled": {
            "type": "boolean",
            "description": "Flag indicating whether or not VeriCite has been enabled for the assignment. NOTE: This flag will not appear unless your account has the VeriCite plugin available."
          },
          "anonymous_instructor_annotations": {
            "type": "boolean",
            "description": "Flag indicating whether instructor annotations in document submissions for this assignment should be anonymous."
          },
          "duplicate_of_id": {
            "type": "integer",
            "format": "int64",
            "description": "If the assignment is a duplicate, the ID of the original assignment."
          },
          "anonymous_grading": {
            "type": "boolean",
            "description": "Indicates if the assignment is graded anonymously. If true, graders cannot see student identities."
          },
          "graders_anonymous_to_graders": {
            "type": "boolean",
            "description": "Indicates if provisional graders' identities are hidden from other provisional graders. Only relevant for moderated assignments with grader_comments_visible_to_graders set to true."
          },
          "grader_count": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of provisional graders who may issue grades for this assignment. Only relevant for moderated assignments. Must be a positive value, and must be set to 1 if the course has fewer than two active instructors. Otherwise, the maximum value is the number of active instructors in the course minus one, or 10 if the course has more than 11 active instructors."
          },
          "grader_comments_visible_to_graders": {
            "type": "boolean",
            "description": "Indicates if provisional graders' comments are visible to other provisional graders. Only relevant for moderated assignments."
          },
          "grader_section_id": {
            "type": "integer",
            "format": "int64",
            "description": "Graders for an assignment with anonymous moderated marking are assigned from this section if provided, or all sections otherwise."
          },
          "final_grader_id": {
            "type": "integer",
            "format": "int64",
            "description": "User ID of the final grader."
          },
          "grader_names_visible_to_final_grader": {
            "type": "boolean",
            "description": "Indicates if provisional grader identities are visible to the final grader. Only relevant for moderated assignments."
          },
          "allowed_attempts": {
            "type": "integer",
            "format": "int32",
            "description": "The number of submission attempts a student can make for this assignment. -1 is considered unlimited."
          },
          "sis_source_id": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "ID for the correlated record for the assignment in the Student Information System. It can be NULL."
          },
          "annotatable_attachment_id": {
            "type": "integer",
            "format": "int64",
            "description": "For an `Annotated Document` type assignment, the ID of the annotatable attachment."
          },
          "important_dates": {
            "type": "boolean",
            "description": "Indicates if the assignment has important dates."
          },
          "description": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The assignment description in an HTML fragment."
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "description": "The sorting order of the assignment in the group."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "Title of the assignment."
          },
          "turnitin_settings": {
            "type": "object",
            "properties": {
              "originality_report_visibility": {
                "type": "string",
                "enum": [
                  "__dap_unspecified__",
                  "immediate",
                  "after_grading",
                  "after_due_date",
                  "never"
                ],
                "description": "Allows to set the timeframe when the report will become visible."
              },
              "exclude_small_matches_type": {
                "type": "string",
                "enum": ["__dap_unspecified__", "off", "words", "percent"],
                "description": "Exclude small sources from the Similarity Report by a set number of words or percentage."
              },
              "exclude_small_matches_value": {
                "type": "integer",
                "format": "int32",
                "description": "If exclude_small_matches_type is set to percent or number then the value will be will be a number (of words or a percent)."
              },
              "s_paper_check": {
                "type": "boolean",
                "description": "If set to TRUE, will allow to compare submission against other students' papers."
              },
              "s_view_report": {
                "type": "boolean",
                "description": "If set to TRUE students will be able to access their originality report."
              },
              "internet_check": {
                "type": "boolean",
                "description": "Select the content you'd like to compare papers against: current and archived website content."
              },
              "journal_check": {
                "type": "boolean",
                "description": "Select the content you'd like to compare papers against: periodicals, journals and publications."
              },
              "exclude_biblio": {
                "type": "boolean",
                "description": "Selecting this option will exclude text appearing in the bibliography, works cited, or references sections of student papers from being checked for matches when generating Similarity Reports."
              },
              "exclude_quoted": {
                "type": "boolean",
                "description": "Selecting this option will exclude text appearing in the bibliography, works cited, or references sections of student papers from being checked for matches when generating Similarity Reports."
              },
              "submit_papers_to": {
                "type": "boolean",
                "description": "If set to FALSE, a similarity report will still be generated for paper submissions but students' papers will not be stored in the Turnitin standard paper repository or the institution's paper repository for future comparison."
              }
            },
            "additionalProperties": false,
            "title": "Type extracted from column `assignments.turnitin_settings`."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "workflow_state",
          "submission_types",
          "submissions_downloads",
          "peer_review_count",
          "peer_reviews_assigned",
          "peer_reviews",
          "context_id",
          "context_type",
          "automatic_peer_reviews",
          "all_day",
          "could_be_locked",
          "grade_group_students_individually",
          "anonymous_peer_reviews",
          "turnitin_enabled",
          "freeze_on_copy",
          "only_visible_to_overrides",
          "post_to_sis",
          "moderated_grading",
          "omit_from_final_grade",
          "intra_group_peer_reviews",
          "vericite_enabled",
          "anonymous_instructor_annotations",
          "anonymous_grading",
          "graders_anonymous_to_graders",
          "grader_count",
          "grader_comments_visible_to_graders",
          "grader_names_visible_to_final_grader",
          "important_dates"
        ],
        "title": "This table stores attributes for assignments.",
        "description": "There is one record in this table for each assignment."
      },
      "attachment_associations": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of an attachment associations record."
          },
          "attachment_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of an attachment record."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the context of this attachment association."
          },
          "context_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "ConversationMessage",
              "Submission",
              "Course",
              "Group"
            ],
            "description": "The type of the object represented by `context_id`."
          }
        },
        "additionalProperties": false,
        "required": ["id", "context_type"],
        "title": "Links user files to an assignment to allow grader to see the student's submission."
      },
      "attachments": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of an attachment record."
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when this record was deleted. If the record has not been deleted the value will be NULL."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when an attachments record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when an attachments record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "deleted",
              "errored",
              "pending_upload",
              "processed",
              "processing",
              "to_be_zipped",
              "unattached",
              "unattached_temporary",
              "zipped",
              "zipping"
            ],
            "description": "Current workflow state of the attachment."
          },
          "unlock_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time to unlock the file at."
          },
          "lock_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time to lock the file at."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the attachments's context."
          },
          "context_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "Account",
              "AssessmentQuestion",
              "Assignment",
              "Attachment",
              "ContentExport",
              "ContentMigration",
              "Course",
              "Eportfolio",
              "EpubExport",
              "Folder",
              "GradebookUpload",
              "Group",
              "GroupAndMembershipImporter",
              "OutcomeImport",
              "Purgatory",
              "Quizzes::Quiz",
              "Quizzes::QuizStatistics",
              "Quizzes::QuizSubmission",
              "SisBatch",
              "Submission",
              "User"
            ],
            "description": "The type of the object represented by context_id."
          },
          "folder_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a folder record."
          },
          "filename": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The name of the actual file."
          },
          "locked": {
            "type": "boolean",
            "description": "Flag if file is locked or available."
          },
          "file_state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "unpublished",
              "published",
              "deleted",
              "available",
              "hidden",
              "errored",
              "broken"
            ],
            "description": "Similar to `workflow_state` but for the file itself."
          },
          "media_entry_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The ID of a Kaltura/Notorious media entry associated with the file."
          },
          "md5": {
            "type": "string",
            "maxLength": 255,
            "description": "A hash of the file. Historically this was MD5 in Canvas Data 1 and API but newer records store a SHA512 in this column."
          },
          "replacement_attachment_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the attachment that this record replaced."
          },
          "usage_rights_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the `usage_rights` record."
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when an attachment record was updated."
          },
          "viewed_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when an attachment record was last viewed."
          },
          "could_be_locked": {
            "type": "boolean",
            "description": "True if the file is in a lockable module item."
          },
          "migration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "Only applicable for files which have been imported via a content migration, an opaque identifier for the file in its source. This field is used by Canvas to identify when a file is being re-imported, and can also be used to identify multiple files that have been copied from the same source."
          },
          "namespace": {
            "type": "string",
            "maxLength": 255,
            "description": "The asset string of the root account associated with the file's storage."
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "description": "The size of the file in bytes."
          },
          "display_name": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The attachment name that is displayed."
          },
          "content_type": {
            "type": "string",
            "maxLength": 255,
            "description": "MIME type of the associated file."
          },
          "uuid": {
            "type": "string",
            "maxLength": 255,
            "description": "The UUID of the attachment."
          },
          "root_attachment_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifier of the source file from which this file was copied and created. Defaults to `NULL` when this is the only copy."
          }
        },
        "additionalProperties": false,
        "required": ["id", "locked", "file_state"],
        "title": "Describes files in Canvas."
      },
      "calendar_events": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a calendar event record."
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when this record was deleted. If the record has not been deleted the value will be NULL."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `calendar_events` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `calendar_events` record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "locked", "deleted"],
            "description": "Current state of the event."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the context of this calendar event (account, course, user)."
          },
          "context_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "AppointmentGroup",
              "Course",
              "CourseSection",
              "Group",
              "User",
              "Account"
            ],
            "description": "The type of the object represented by context_id."
          },
          "location_address": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The address where the event is taking place."
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "description": "The start date for the calendar event, if applicable."
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "description": "The end date for the calendar event, if applicable."
          },
          "context_code": {
            "type": "string",
            "maxLength": 255,
            "description": "The context code of the calendar this event belongs to (course, user or group)."
          },
          "time_zone_edited": {
            "type": "string",
            "maxLength": 255,
            "description": "Time zone of the user editing the event."
          },
          "parent_calendar_event_id": {
            "type": "integer",
            "format": "int64",
            "description": "Normally NULL. If this is a reservation (see the Appointment Groups API), the ID will indicate the time slot it is for. If this is a section-level event, this will be the course-level parent event."
          },
          "effective_context_code": {
            "type": "string",
            "maxLength": 255,
            "description": "If specified, it indicates which calendar this event should be displayed on. For example, a section-level event would have the course's context code here, while the section's context code would be returned above."
          },
          "participants_per_appointment": {
            "type": "integer",
            "format": "int32",
            "description": "If the event is a time slot, this is the participant limit."
          },
          "comments": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Comments associate with this reservation."
          },
          "web_conference_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of a web conference associated with the calendar event."
          },
          "all_day": {
            "type": "boolean",
            "description": "Indicates whether this is an all-day event (midnight to midnight)."
          },
          "all_day_date": {
            "type": "string",
            "format": "date",
            "description": "The date of this event."
          },
          "migration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The unique identifier of the migration that imported this calendar event."
          },
          "important_dates": {
            "type": "boolean",
            "description": "Indicates if the calendar event has important dates."
          },
          "location_name": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The location name of the event."
          },
          "description": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The HTML description of the event."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "The title of the calendar event."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "context_id",
          "context_type",
          "important_dates"
        ],
        "title": "The model for calendar events in Canvas.",
        "description": "These can be manually created, or automatically generated from other items like Assignments with a date attached."
      },
      "canvadocs_annotation_contexts": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of this record."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When this record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When this record was last updated."
          },
          "attachment_id": {
            "type": "integer",
            "format": "int64",
            "description": "The attachment that this DocViewer launch is owned by."
          },
          "submission_id": {
            "type": "integer",
            "format": "int64",
            "description": "The submission this DocViewer launch is associated with."
          },
          "launch_id": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The ID that differentiates a DocViewer launch from another using the same attachment."
          },
          "submission_attempt": {
            "type": "integer",
            "format": "int32",
            "description": "The submission attempt associated with the launch_id."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "attachment_id",
          "submission_id",
          "launch_id"
        ],
        "title": "Launch context associated with DocViewer when assignment is of type `Annotated_Document`."
      },
      "comment_bank_items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the comment bank item."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the user who created the comment bank item."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the comment_bank_item record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the comment_bank_item record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "Workflow status of the comment bank item."
          },
          "course_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the course."
          },
          "comment": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The text of the comment bank item."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "user_id",
          "created_at",
          "updated_at",
          "workflow_state",
          "course_id",
          "comment"
        ],
        "title": "Stores user comments that have been added to the comment bank."
      },
      "communication_channels": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a user communication channel record."
          },
          "path": {
            "type": "string",
            "maxLength": 255,
            "description": "The address of the communication channel e.g. an email address or a phone number."
          },
          "path_type": {
            "type": "string",
            "maxLength": 255,
            "description": "The type of communication channel being described. This field determines the type of value seen in `address`."
          },
          "pseudonym_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user's pseudonym record."
          },
          "bounce_count": {
            "type": "integer",
            "format": "int32",
            "description": "The number of times a communication channel has bounced when trying to deliver messages."
          },
          "confirmation_code_expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date-time when the issued confirmation code will expire."
          },
          "confirmation_sent_count": {
            "type": "integer",
            "format": "int32",
            "description": "The number of confirmations sent for the channel."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `communication_channels` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `communication_channels` record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "unconfirmed", "active", "retired"],
            "description": "Current state of the communication channel."
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "description": "The position of this communication channel relative to the user's other channels when they are ordered."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "path",
          "path_type",
          "bounce_count",
          "confirmation_sent_count",
          "user_id",
          "created_at",
          "updated_at",
          "workflow_state"
        ],
        "title": "Channels through which a user receives Canvas notifications.",
        "description": "Examples include an email address, a phone number, a mobile device token for push notifications, etc."
      },
      "content_migrations": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a content migration record."
          },
          "attachment_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of the package being imported."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a `content_migrations` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `content_migrations` record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "created",
              "exported",
              "exporting",
              "failed",
              "imported",
              "importing",
              "pre_process_error",
              "pre_processed",
              "pre_processing",
              "queued"
            ],
            "description": "Current state of the content migration."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a `content_migrations` context."
          },
          "context_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "Course",
              "Account",
              "Group",
              "User"
            ],
            "description": "The type of the object represented by `context_id`."
          },
          "overview_attachment_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of the packages overview.json file."
          },
          "exported_attachment_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of the resulting exported package."
          },
          "source_course_id": {
            "type": "integer",
            "format": "int64",
            "description": "The course to copy from for a course copy migration (required if doing course copy)."
          },
          "migration_type": {
            "type": "string",
            "maxLength": 255,
            "description": "The type of the migration. Use the Migrator endpoint to see all available migrators. Examples include: `academic_benchmark_importer`, `angel_exporter`, `blackboard_exporter`, `canvas_cartridge_importer`, `common_cartridge_importer`, `course_copy_importer`, `d2l_exporter`, `master_course_import`, `moodle_converter`, `qti_converter`, `webct_scraper`, `zip_file_importer`, `context_external_tool_1234`."
          },
          "child_subscription_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of the `master_courses_child_subscription` record indicating a blueprint association."
          },
          "migration_settings": {
            "type": "string",
            "description": "Ruby hash of settings that determine what data will get imported for this migration."
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a content migration started."
          },
          "finished_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a content migration finished."
          },
          "progress": {
            "type": "number",
            "format": "float64",
            "description": "Current migration progress. 100 indicates done at 100%."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "context_id",
          "context_type"
        ],
        "title": "Saves data about what and when was added to a course through a course copy or import."
      },
      "content_participation_counts": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a content participation count record."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a content_participation_counts record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a content_participation_counts record was updated."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a content_participation_counts's context (course)."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Course"],
            "description": "The type of the object represented by context_id."
          },
          "unread_count": {
            "type": "integer",
            "format": "int32",
            "description": "The number of unread actions for this user on this course."
          },
          "content_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Submission"],
            "description": "The type of content."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "context_type",
          "unread_count",
          "content_type"
        ],
        "title": "Shows students a count of the number of submissions they have that have something unread."
      },
      "content_participations": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a content participation record."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "read", "unread"],
            "description": "Current state of the record."
          },
          "content_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a content record."
          },
          "content_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Submission"],
            "description": "The type of the object represented by `content_id`."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "user_id",
          "workflow_state",
          "content_id",
          "content_type"
        ],
        "title": "Stores data related to students submission updates or feedback.",
        "description": "Examples include new grade, new excused status, or new score."
      },
      "content_shares": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a content share."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Name of the content item being shared."
          },
          "type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "SentContentShare",
              "ReceivedContentShare"
            ],
            "description": "Type of content share."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the user who owns the content share."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a `content_share` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a `content_share` record was updated."
          },
          "content_export_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the ContentExport containing the content of the share."
          },
          "sender_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the user who sent the content share. Only populated for ReceivedContentShare."
          },
          "read_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "read", "unread"],
            "description": "State of the content shared."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "type",
          "user_id",
          "created_at",
          "updated_at",
          "content_export_id",
          "read_state"
        ],
        "title": "Provides a link to a content export from a sender to a receiver.",
        "description": "The receiver can use this link to import the content export into any of their courses."
      },
      "content_tags": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a content tag record."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `content_tags` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `content_tags` record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "unpublished", "deleted"],
            "description": "The workflow state of the content tag."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the `content_tags` context (account, course, user). Depends on `context_type` value: `Course`: `courses.id`, `Assignment`: `assignments.id`."
          },
          "context_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "Account",
              "Assignment",
              "Course",
              "LearningOutcomeGroup",
              "Quizzes::Quiz",
              "User"
            ],
            "description": "The type of the object represented by `context_id`, typically `Course` or `Account` or `User`."
          },
          "context_code": {
            "type": "string",
            "maxLength": 255,
            "description": "An asset string describing the content tag context (for example: `assignment_3`)."
          },
          "comments": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Comments associated with the tag."
          },
          "migration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The ID of the migration that created the content tag."
          },
          "content_id": {
            "type": "integer",
            "format": "int64",
            "description": "Refers to the ID of the object that is linked to another object (`context_type`)."
          },
          "tag_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "context_module",
              "default",
              "learning_outcome",
              "learning_outcome_association"
            ],
            "description": "Identifies the type of tag."
          },
          "context_module_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the context module the content tag belongs to (if `tag_type` is `context_module`)."
          },
          "learning_outcome_id": {
            "type": "integer",
            "format": "int64",
            "description": "Has a value if `tag_type` is `learning_outcome`, indicates that the content (`content_type`, `content_id`) is aligned with the given LearningOutcome."
          },
          "mastery_score": {
            "type": "number",
            "format": "float64",
            "description": "when `tag_type` is `learning_outcome` and `content_type` is `AssessmentQuestionBank`, indicates the required score on a set of bank questions to show mastery."
          },
          "rubric_association_id": {
            "type": "integer",
            "format": "int64",
            "description": "(deprecated) when `tag_type` is `learning_outcome` and `content_type` is `Assignment`, indicates the *RubricAssociation* which aligns the *LearningOutcome* to the *Assignment*."
          },
          "associated_asset_id": {
            "type": "integer",
            "format": "int64",
            "description": "Associated asset, whose use varies by ContentTag use. When `tag_type` is `learning_outcome_association`, then `content_type` is `LearningOutcome` and `associated_asset_type` is `learning_outcome_group` and indicates the *LearningOutcome* (`content_id`) is displayed within the *LearningOutcomeGroup* (`associated_asset_id`). When `content_type` is `ContextExternalTool` and `associated_asset_type` is `Lti::ResourceLink`, indicates the resource link associated with an LTI tool link."
          },
          "associated_asset_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "LearningOutcomeGroup",
              "Lti::ResourceLink"
            ],
            "description": "when `tag_type` is `learning_outcome_association`, then `content_type` is `LearningOutcome` and `associated_asset_type` is `learning_outcome_group` and indicates the *LearningOutcome* (`content_id`) is displayed within the *LearningOutcomeGroup* (`associated_asset_id`)."
          },
          "link_settings": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Settings for LTI links associated with the content tag (for example, tool iframe width and height)."
          },
          "new_tab": {
            "type": "boolean",
            "description": "Whether or not the content should open in a new tab."
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "description": "The position of the content tag relative to other content tags when listed in a UI."
          },
          "content_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "Announcement",
              "AssessmentQuestionBank",
              "Assignment",
              "Attachment",
              "ContextExternalTool",
              "ContextModuleSubHeader",
              "DiscussionTopic",
              "ExternalUrl",
              "LearningOutcome",
              "LearningOutcomeGroup",
              "LiveAssessments::Assessment",
              "Lti::MessageHandler",
              "Quizzes::Quiz",
              "Rubric",
              "WikiPage"
            ],
            "description": "The type of the tag's content. Corresponds to the tables that `content_id` is a foreign key for, the exceptions being: `Announcement` (for which `content_id` references the `discussion_topics` table) and `ContextModuleSubheader` and `ExternalUrl` (which have no tables)."
          },
          "url": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The URL of the content where applicable (for example: the launch URL of a context_external_tool). Applicable when `content_type` is `ExternalUrl`, `ContextExternalTool` or `Lti::MessageHandler`."
          },
          "title": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The title of the content tag."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "context_id",
          "context_type",
          "content_id",
          "tag_type"
        ],
        "title": "In the context of LTI, joins `context_external_tools` to either `assignments` or to `context_modules`.",
        "description": "Some of the ways to use this table would be to: identify the external tool that is used to submit an assignment, identify the items\nthat are in modules (the IDs in this table are also referred to as `module_item_id`), identify the learning outcome group that an\noutcome is part of."
      },
      "context_external_tools": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Primary key for this record in the `context_external_tools` table in the Canvas database."
          },
          "developer_key_id": {
            "type": "integer",
            "format": "int64",
            "description": "The client ID of the tool provider. LTI 1.3 only."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the activation was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the tool was last updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "anonymous",
              "deleted",
              "disabled",
              "email_only",
              "name_only",
              "public"
            ],
            "description": "Workflow state for activation (active, deleted)."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the context the tool is deployed to. Identifies either a course (`courses`.`id` if `context_type` is `Course`) or an account (`accounts`.`id` if `context_type` is `Account`)."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Account", "Course"],
            "description": "The type of object the tool was activated in."
          },
          "migration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The unique identifier of the migration that imported the tool."
          },
          "consumer_key": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "A key used by the tool for validation at launch time. This value is set by the Canvas user who installs the tool."
          },
          "cloned_item_id": {
            "type": "integer",
            "format": "int64",
            "description": "The Id of the item in which this context_external_tool was cloned from."
          },
          "tool_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The tool ID received from the external tool. May be missing if the tool does not send an ID."
          },
          "not_selectable": {
            "type": "boolean",
            "description": "true - tool is selectable in all scenarios. false - not selectable for assignment or module selection menu."
          },
          "app_center_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The tool ID from eduappcenter.com."
          },
          "allow_membership_service_access": {
            "type": "boolean",
            "description": "Indicates that the tool has access to the legacy membership service. LTI 1 only. This setting is set by the Canvas user who installs the tool."
          },
          "description": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The description of the tool activation as entered by the user."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The name of tool activation as entered by the user."
          },
          "domain": {
            "type": "string",
            "maxLength": 255,
            "description": "The domain for the tool launch URL (optional field). Canvas uses this domain to lookup the correct tool to launch when the tool ID is unknown."
          },
          "url": {
            "type": "string",
            "maxLength": 4096,
            "description": "The URL to where the tool may launch to (if this value is NULL, use the `domain` field)."
          },
          "settings": {
            "type": "object",
            "properties": {
              "course_home_sub_navigation": {
                "type": "string",
                "description": "Course home sub navigation placement type."
              },
              "course_settings_sub_navigation": {
                "type": "string",
                "description": "Course settings sub navigation placement type."
              },
              "custom_fields": {
                "type": "string",
                "description": "Custom parameters provider request to share on every single LTI launch, each placement column might have its own set of custom_fields."
              },
              "discussion_menu": {
                "type": "string",
                "description": "Discussion menu placement type."
              },
              "discussion_topic_index_menu": {
                "type": "string",
                "description": "Discussion topic index menu placement type."
              },
              "discussion_topic_menu": {
                "type": "string",
                "description": "Discussion topic menu placement type."
              },
              "editor_button": {
                "type": "string",
                "description": "RCE placement type."
              },
              "enabled": {
                "type": "string",
                "description": "Controls if the tool is disabled for user to click on, typically tool gets removed altogether but sometimes provider uses this setting to just disable it in the UI."
              },
              "file_index_menu": {
                "type": "string",
                "description": "File index menu placement type."
              },
              "file_menu": {
                "type": "string",
                "description": "File menu placement type."
              },
              "global_navigation": {
                "type": "string",
                "description": "Global navigation placement type."
              },
              "grade_passback": {
                "type": "string",
                "description": "Grade pass-back placement type."
              },
              "homework_selection": {
                "type": "string",
                "description": "Homework selection placement type."
              },
              "homework_submission": {
                "type": "string",
                "description": "Homework submission placement type."
              },
              "launch_presentation_document_target": {
                "type": "string",
                "description": "Tells us if it should be opened in another window."
              },
              "link_selection": {
                "type": "string",
                "description": "Link selection placement type."
              },
              "migration_selection": {
                "type": "string",
                "description": "Migration selection placement type."
              },
              "module_group_menu": {
                "type": "string",
                "description": "Module group menu placement type."
              },
              "module_index_menu": {
                "type": "string",
                "description": "Module index menu placement type."
              },
              "account_navigation": {
                "type": "string",
                "description": "account navigation placement type."
              },
              "assignment_group_menu": {
                "type": "string",
                "description": "Assignment group menu placement type."
              },
              "assignment_index_menu": {
                "type": "string",
                "description": "Assignment index menu placement type."
              },
              "assignment_menu": {
                "type": "string",
                "description": "Assignment menu placement type."
              },
              "assignment_selection": {
                "type": "string",
                "description": "Assignment selection placement type."
              },
              "canvas_caliper_url": {
                "type": "string",
                "description": "URL to caliper endpoint if supported by the tool."
              },
              "collaboration": {
                "type": "string",
                "description": "Collaboration placement type."
              },
              "content_migration": {
                "type": "string",
                "description": "Content migration placement type."
              },
              "course_assignments_menu": {
                "type": "string",
                "description": "Course assignments menu placement type."
              },
              "course_navigation": {
                "type": "string",
                "description": "Course navigation placement type."
              },
              "module_menu": {
                "type": "string",
                "description": "Module menu placement type."
              },
              "post_grades": {
                "type": "string",
                "description": "Post grades placement type."
              },
              "quiz_index_menu": {
                "type": "string",
                "description": "Quiz index menu placement type."
              },
              "quiz_menu": {
                "type": "string",
                "description": "Quiz menu placement type."
              },
              "similarity_detection": {
                "type": "string",
                "description": "Plagiarism platform placement."
              },
              "student_context_card": {
                "type": "string",
                "description": "Student context card placement type."
              },
              "text": {
                "type": "string",
                "description": "Identifies the name of the tool, default what the user can see if no label is set."
              },
              "tool_configuration": {
                "type": "string",
                "description": "Identifies the LTI tool configuration dataset."
              },
              "use_1_3": {
                "type": "string",
                "description": "LTI 1.3 compliant tool."
              },
              "user_navigation": {
                "type": "string",
                "description": "User navigation placement type."
              },
              "visibility": {
                "type": "string",
                "description": "Controls if it is an admin only tool, takes values of `admin` and `members`."
              },
              "wiki_index_menu": {
                "type": "string",
                "description": "Wiki index menu placement type."
              },
              "wiki_page_menu": {
                "type": "string",
                "description": "Wiki page menu placement type."
              }
            },
            "additionalProperties": false,
            "title": "Type extracted from column `context_external_tools.settings`."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "consumer_key",
          "allow_membership_service_access",
          "name"
        ],
        "title": "Stores data about installed LTI 1 and 1.3 tools."
      },
      "context_module_progressions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a user module progression record."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a context_module_progressions record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a context_module_progressions record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "completed",
              "locked",
              "started",
              "unlocked"
            ],
            "description": "The current state of the record."
          },
          "requirements_met": {
            "type": "string",
            "description": "Object indicating which requirements have been met."
          },
          "collapsed": {
            "type": "boolean",
            "description": "Flag indicating whether modules items are collapsed for user."
          },
          "current_position": {
            "type": "integer",
            "format": "int32",
            "description": "For sequential access, this is the current position of the module item (ContentTag)."
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when this user completed this module progression."
          },
          "current": {
            "type": "boolean",
            "description": "Flag indicating that this progression is current and not outdated."
          },
          "evaluated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when this progression was last evaluated for completion, lock, or unlock."
          },
          "incomplete_requirements": {
            "type": "string",
            "description": "Object that contains incomplete requirements related to min_score."
          },
          "context_module_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a associated context_module."
          },
          "lock_version": {
            "type": "integer",
            "format": "int32",
            "description": "Lock version of the module progression."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "lock_version"
        ],
        "title": "Shows which items a student has completed, started and not started in a module."
      },
      "context_modules": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a module record."
          },
          "name": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The name of the module that shows up in the UI."
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when this record was deleted. If the record has not been deleted, the value will be NULL."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a `context_modules` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a `context_modules` record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted", "unpublished"],
            "description": "Current state of the record."
          },
          "unlock_at": {
            "type": "string",
            "format": "date-time",
            "description": "Module can be locked until this date."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the context of `context_modules` (`courses`.`id` if `context_type` is `Course`)."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Course"],
            "description": "The type of the object represented by context_id."
          },
          "migration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "An identifier used by the Blueprint system to match with the blueprint content."
          },
          "prerequisites": {
            "type": "string",
            "description": "An object indicating which module(s) must be completed before accessing this one. Has value if course module has prerequisites; field contains ids (context_modules.id), type and name of prerequisites."
          },
          "completion_requirements": {
            "type": "string",
            "description": "An object indicating the requirements to complete this module. Contains ids and types (the action required). Requirements can be \"must_mark_done\" , \"must_view\", or \"must_contribute\"."
          },
          "require_sequential_progress": {
            "type": "boolean",
            "description": "Indicates whether requirements must be completed in sequential order."
          },
          "completion_events": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Events that can trigger module completion in CSV format: publish_final_grade."
          },
          "requirement_count": {
            "type": "integer",
            "format": "int32",
            "description": "The number of requirements to be completed before marking module as complete: can be 1 or NULL for all."
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "description": "Where the module should fall in the list of modules."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "context_id",
          "context_type"
        ],
        "title": "Modules in Canvas.",
        "description": "A place to link items so that students can proceed through course content in order."
      },
      "conversation_message_participants": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a conversation recipients record."
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when this record was deleted. If the record has not been deleted the value will be NULL."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "The workflow state of the conversation participants."
          },
          "conversation_message_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the messages dataset for the associated message."
          },
          "conversation_participant_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the conversations dataset for the associated conversation."
          },
          "tags": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Tags used to identify multiple contexts such as course, group, etc."
          }
        },
        "additionalProperties": false,
        "required": ["id"],
        "title": "The participants in a certain message in a Conversation."
      },
      "conversation_messages": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a conversation message record."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `conversation_messages` record was created."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the context of `conversation_messages` (account, course, user)."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Account"],
            "description": "The type of the object represented by `context_id`, typically `Course` or `Account` or `User`."
          },
          "conversation_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the conversation."
          },
          "author_id": {
            "type": "integer",
            "format": "int64",
            "description": "User ID of the author of the message."
          },
          "generated": {
            "type": "boolean",
            "description": "This attribute is true if the system generated this message (e.g. \"John was added to this conversation\")."
          },
          "forwarded_message_ids": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The IDs of any messages that were created as a forward of the current message."
          },
          "media_comment_id": {
            "type": "string",
            "maxLength": 255,
            "description": "Media comment ID of an audio of video file to be associated with this message."
          },
          "media_comment_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "audio",
              "audio/*",
              "video",
              "video/*"
            ],
            "description": "Type of the associated media file."
          },
          "asset_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of an attached asset, such as a submission."
          },
          "asset_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Submission"],
            "description": "The type of an attached asset."
          },
          "attachment_ids": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Comma-separated list of attachments ids. These must be files that have been previously uploaded to the sender's \"conversation attachments\" folder."
          },
          "has_attachments": {
            "type": "boolean",
            "description": "True if the message has attachments."
          },
          "has_media_objects": {
            "type": "boolean",
            "description": "True if the message has media objects."
          },
          "body": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The HTML content of the message."
          }
        },
        "additionalProperties": false,
        "required": ["id"],
        "title": "The messages that belong to a certain Conversation, these are in the *Inbox*."
      },
      "conversation_participants": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a conversation message participants record."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `conversation_participants` record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "read",
              "unread",
              "archived",
              "deleted"
            ],
            "description": "The workflow state of the message."
          },
          "has_attachments": {
            "type": "boolean",
            "description": "If the conversation has attachments."
          },
          "has_media_objects": {
            "type": "boolean",
            "description": "If the conversation has media objects associated."
          },
          "last_message_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp of the latest message."
          },
          "subscribed": {
            "type": "boolean",
            "description": "Indicates whether the current user is subscribed to the conversation."
          },
          "message_count": {
            "type": "integer",
            "format": "int32",
            "description": "The number of messages in the conversation."
          },
          "label": {
            "type": "string",
            "maxLength": 255,
            "description": "Any label applied to the conversation, such as *starred*."
          },
          "tags": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Tags used to identify multiple contexts such as course, group, etc."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "user_id",
          "workflow_state",
          "has_attachments",
          "has_media_objects",
          "subscribed",
          "message_count"
        ],
        "title": "The participants in a Conversation."
      },
      "conversations": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a conversations record. Links to `conversation_messages.conversation_id`."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a conversations record was updated."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the conversations's context (account, course, user). ID associated with the `context_type`."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Course", "Group", "Account"],
            "description": "The type of the object represented by context_id."
          },
          "has_attachments": {
            "type": "boolean",
            "description": "If the conversation has attachments."
          },
          "has_media_objects": {
            "type": "boolean",
            "description": "If the conversation has media objects associated."
          },
          "subject": {
            "type": "string",
            "maxLength": 255,
            "description": "The subject line of the conversation."
          },
          "tags": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Tags used to identify multiple contexts such as course, group, etc. Contains a comma-delimited list of IDs of the course or group if the conversation is associated with a course or group. The format of the values are `course_12345` or `group_12345`."
          }
        },
        "additionalProperties": false,
        "required": ["id", "has_attachments", "has_media_objects"],
        "title": "Conversation threads from the Canvas Inbox."
      },
      "course_account_associations": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a course account association record."
          },
          "course_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the course."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the record was updated."
          },
          "account_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the accounts dataset. Points to the account associated with the course. Could be Canvas root account or sub-account ID."
          },
          "course_section_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the course section."
          },
          "depth": {
            "type": "integer",
            "format": "int32",
            "description": "How many steps in the account chain are between the courses' direct account (`course`.`account_id`) and the `account_id` of the association."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "course_id",
          "created_at",
          "updated_at",
          "account_id",
          "depth"
        ],
        "title": "An explicit place to keep track of all the the accounts in the account hierarchy that a course belongs to."
      },
      "course_sections": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the section."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The name of the section."
          },
          "course_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique Canvas identifier for the course in which the section belongs."
          },
          "integration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The integration ID of the section. This field is only included if there is an integration set up between Canvas and SIS."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp for when this section was entered into the system."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp for when the last time the section was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "Life-cycle state for the section."
          },
          "sis_batch_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the SIS import if created through SIS."
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "description": "The start date for the section, if applicable. When a user is allowed to participate in a course. enrollment term dates, course dates, and course section dates flow together in all aspects of Canvas. Various dates allow different users to participate in the course. The hierarchy of dates are: course section dates override course dates, course dates override term dates."
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "description": "The end date for the section, if applicable. When a user is allowed to participate in a course."
          },
          "sis_source_id": {
            "type": "string",
            "maxLength": 255,
            "description": "Id for the correlated record for the section in the SIS (assuming SIS integration has been properly configured)."
          },
          "default_section": {
            "type": "boolean",
            "description": "True if this is the default section."
          },
          "accepting_enrollments": {
            "type": "boolean",
            "description": "True if this section is open for enrollment."
          },
          "restrict_enrollments_to_section_dates": {
            "type": "boolean",
            "description": "Restrict user enrollments to the start and end dates of the section. True when \"Users can only participate in the course between these dates\" is checked."
          },
          "nonxlist_course_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the original course of a cross-listed section."
          },
          "enrollment_term_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the associated enrollment term."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "course_id",
          "created_at",
          "updated_at",
          "workflow_state"
        ],
        "title": "Stores attributes for a section of a course.",
        "description": "Sections are a group of students that have been organized for administrative purposes.  When users are enrolled in a course, they are\nactually enrolled in one of the sections of that course. It is possible to place more than one section in course, but it is not\npossible to put sections within sections. All sections of a course share the same content. If a course is taught by one instructor,\nsections can remain under one course. However, if each section is taught by a different instructor, those sections will need to be\nhoused under separate courses. Each section can have its own varied due dates for assignments, quizzes, and discussions. For example, a\ncourse may have sections that meet on different days of the week or in different formats (online vs. face-to-face). Sections are also\nbeneficial when Teacher Assistants are assigned to help manage courses and oversee grading for a portion of a course enrollment. As\npart of SIS or manual enrollments, you can limit students to only see students in their section. Instructors can also limit students if\nyou allow them to manually enroll users in their own courses."
      },
      "courses": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the course."
          },
          "storage_quota": {
            "type": "integer",
            "format": "int64",
            "description": "The total amount of storage space (in bytes) allowed to be used by files in the course."
          },
          "integration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "the integration identifier for the course, if defined."
          },
          "lti_context_id": {
            "type": "string",
            "maxLength": 255,
            "description": "UUID of the Canvas context in LTI standard. secondary ID for this context, could be used in API to identify resource as well."
          },
          "sis_batch_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the SIS import."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date the course was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time the course was last updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "created",
              "claimed",
              "available",
              "completed",
              "deleted"
            ],
            "description": "Life-cycle state for the course."
          },
          "account_id": {
            "type": "integer",
            "format": "int64",
            "description": "Points to the account associated with the course."
          },
          "grading_standard_id": {
            "type": "integer",
            "format": "int64",
            "description": "The grading standard associated with the course."
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "description": "The start date for the course, if applicable. If NULL, then use `start_at` value from `enrollment_terms` table. Enrollment term dates, course dates, and course section dates flow together in all aspects of Canvas. Various dates allow different users to participate in the course. The hierarchy of dates are: course section dates override course dates, course dates override term dates."
          },
          "sis_source_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The SIS identifier for the course, if defined."
          },
          "group_weighting_scheme": {
            "type": "string",
            "maxLength": 255,
            "description": "Whether final grades will be weighted based on the `group_weight` value of assignment groups `percent` if weighted `equal` or NULL otherwise."
          },
          "conclude_at": {
            "type": "string",
            "format": "date-time",
            "description": "The end date for the course, if applicable. If NULL, then use `start_at` value from `enrollment_terms` table."
          },
          "is_public": {
            "type": "boolean",
            "description": "True if the course is publicly visible."
          },
          "allow_student_wiki_edits": {
            "type": "boolean",
            "description": "Whether Pages in the course can be created and are editable by students."
          },
          "syllabus_body": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "User-generated HTML for the course syllabus."
          },
          "default_wiki_editing_roles": {
            "type": "string",
            "maxLength": 255,
            "description": "Comma-separated list used as the default `editing_roles` value for new `wiki_pages` in the course."
          },
          "wiki_id": {
            "type": "integer",
            "format": "int64",
            "description": "Foreign key to the `wikis` dataset."
          },
          "allow_student_organized_groups": {
            "type": "boolean",
            "description": "Whether students are able to organize their own groups."
          },
          "course_code": {
            "type": "string",
            "maxLength": 255,
            "description": "The course code."
          },
          "default_view": {
            "type": "string",
            "maxLength": 255,
            "description": "the type of page that users will see when they first visit the course - `feed`: Recent Activity Dashboard - `wiki`: Wiki Front Page - `modules`: Course Modules/Sections Page - `assignments`: Course Assignments List - `syllabus`: Course Syllabus Page other types may be added in the future."
          },
          "abstract_course_id": {
            "type": "integer",
            "format": "int64",
            "description": "Foreign key to the `abstract_courses` table."
          },
          "enrollment_term_id": {
            "type": "integer",
            "format": "int64",
            "description": "The enrollment term associated with the course."
          },
          "open_enrollment": {
            "type": "boolean",
            "description": "Whether the course has enabled open enrollment."
          },
          "tab_configuration": {
            "type": "string",
            "description": "A YAML serialized list detailing the order and visibility status of tabs in the left-hand navigation for the course."
          },
          "turnitin_comments": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Comments to be shown to students when submitting a Turnitin-enabled assignment."
          },
          "self_enrollment": {
            "type": "boolean",
            "description": "Whether the course has enabled self enrollment."
          },
          "license": {
            "type": "string",
            "maxLength": 255,
            "description": "The default license for content in the course; `private`: Private (Copyrighted), `public_domain`: Public Domain, `cc_by`: CC Attribution, `cc_by_sa`: CC Attribution Share Alike, `cc_by_nc`: CC Attribution Noncommercial, `cc_by_nc_sa`: CC Attribution Noncommercial Share Alike, `cc_by_nd`: CC Attribution No Derivatives, `cc_by_nc_nd`: CC Attribution Noncommercial No Derivatives."
          },
          "indexed": {
            "type": "boolean",
            "description": "Whether the course is included in the public course index."
          },
          "restrict_enrollments_to_course_dates": {
            "type": "boolean",
            "description": "Whether the course's start and end dates will override dates from the term when determining user access."
          },
          "template_course_id": {
            "type": "integer",
            "format": "int64",
            "description": "If set, this course was originally created via SIS when a section was marked to be cross listed to a non-existent course, using attributes from the original section's course and setting that course ID here."
          },
          "replacement_course_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the course created to replace this one when it had its content reset."
          },
          "public_description": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The public description of the course."
          },
          "self_enrollment_code": {
            "type": "string",
            "maxLength": 255,
            "description": "The alpha-numeric code students can use to enroll in the course through self enrollment."
          },
          "self_enrollment_limit": {
            "type": "integer",
            "format": "int32",
            "description": "The number of students that can enroll in the course through self enrollment."
          },
          "turnitin_id": {
            "type": "integer",
            "format": "int64",
            "description": "A unique identifier for use with Turnitin."
          },
          "show_announcements_on_home_page": {
            "type": "boolean",
            "description": "Whether announcements will be shown on the course home page."
          },
          "home_page_announcement_limit": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of announcements to show on the course home page."
          },
          "latest_outcome_import_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the most recent Outcome Import for the course."
          },
          "grade_passback_setting": {
            "type": "string",
            "maxLength": 255,
            "description": "The grade_passback_setting set on the course."
          },
          "template": {
            "type": "boolean",
            "description": "Course is marked as a template for accounts to use."
          },
          "homeroom_course": {
            "type": "boolean",
            "description": "Course is marked as a homeroom course."
          },
          "sync_enrollments_from_homeroom": {
            "type": "boolean",
            "description": "Enrollments for this course will be synced from the associated homeroom."
          },
          "homeroom_course_id": {
            "type": "integer",
            "format": "int64",
            "description": "Points to the homeroom course from which this course receives its enrollments."
          },
          "locale": {
            "type": "string",
            "maxLength": 255,
            "description": "The course-set locale, if applicable."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The full name of the course."
          },
          "time_zone": {
            "type": "string",
            "maxLength": 255,
            "description": "The course's IANA time zone name."
          },
          "uuid": {
            "type": "string",
            "maxLength": 255,
            "description": "The UUID of the course."
          },
          "settings": {
            "type": "object",
            "properties": {
              "allow_student_discussion_editing": {
                "type": "string",
                "description": "Let students edit or delete their own discussion posts."
              },
              "allow_student_discussion_topics": {
                "type": "string",
                "description": "Let students create discussion topics."
              },
              "course_format": {
                "type": "string",
                "description": "Format of a course, values include `blended`, `on_campus`, `online`."
              },
              "filter_speed_grader_by_student_group": { "type": "string" },
              "hide_distribution_graphs": {
                "type": "string",
                "description": "Hide grade distribution graphs from students."
              },
              "hide_final_grade": {
                "type": "string",
                "description": "Hide totals in student grades summary."
              },
              "is_public_to_auth_users": {
                "type": "string",
                "description": "Set to true if course is public only to authenticated users."
              },
              "lock_all_announcements": {
                "type": "string",
                "description": "Disable comments on announcements."
              },
              "public_syllabus": {
                "type": "string",
                "description": "Set to true to make the course syllabus public. Values include true, false."
              },
              "public_syllabus_to_auth": {
                "type": "string",
                "description": "Set to true to make the course syllabus public for authenticated users."
              },
              "restrict_student_future_view": {
                "type": "string",
                "description": "Restrict students from viewing courses before start date."
              },
              "restrict_student_past_view": {
                "type": "string",
                "description": "Restrict students from viewing courses after end date."
              },
              "syllabus_updated_at": {
                "type": "string",
                "description": "Timestamp when syllabus was updated in a course."
              },
              "usage_rights_required": {
                "type": "string",
                "description": "Copyright and license information must be provided for files before they are published."
              },
              "allow_student_forum_attachments": {
                "type": "string",
                "description": "Whether students can attach files to discussions."
              }
            },
            "additionalProperties": false,
            "title": "Type extracted from column `courses.settings`."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "account_id",
          "allow_student_organized_groups",
          "enrollment_term_id",
          "template",
          "homeroom_course",
          "sync_enrollments_from_homeroom"
        ],
        "title": "Stores attributes for a course."
      },
      "custom_gradebook_column_data": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a custom gradebook column data record."
          },
          "content": {
            "type": "string",
            "maxLength": 255,
            "description": "The particular value of the specified column for the user denoted by user_id."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of the user to whom this data record applies."
          },
          "custom_gradebook_column_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the associated custom column."
          }
        },
        "additionalProperties": false,
        "required": ["id", "content", "user_id", "custom_gradebook_column_id"],
        "title": "Contains per-user data for the custom columns defined in custom_gradebook_columns."
      },
      "custom_gradebook_columns": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a custom Gradebook column data definition."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a custom_gradebook_columns record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a custom_gradebook_columns record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "hidden", "deleted"],
            "description": "Life-cycle state for the custom gradebook column."
          },
          "course_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the course that defines this column."
          },
          "teacher_notes": {
            "type": "boolean",
            "description": "True if this column represents the predefined *Notes* column in Gradebook."
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "description": "The ordering of this column among the columns defined for this course."
          },
          "read_only": {
            "type": "boolean",
            "description": "If true, the contents of this column cannot be edited from Gradebook."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "The title of the column, as displayed in Gradebook."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "course_id",
          "teacher_notes",
          "position",
          "read_only",
          "title"
        ],
        "title": "Contains configuration information for custom Gradebook columns defined for specific courses."
      },
      "developer_key_account_bindings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a developer key and account association record."
          },
          "account_id": {
            "type": "integer",
            "format": "int64",
            "description": "Points to the account associated with the course. Could be Canvas root account or sub-account ID."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a developer_key_account_bindings record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a developer_key_account_bindings record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "on", "allow", "off"],
            "description": "The workflow state of the binding."
          },
          "developer_key_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the associated developer key."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "account_id",
          "created_at",
          "updated_at",
          "workflow_state",
          "developer_key_id"
        ],
        "title": "Joins the accounts table to developer_keys.",
        "description": "Describes if the associated developer key is \"on\" or \"off\" for the associated account."
      },
      "developer_keys": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a developer key record."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The name of the developer key."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `developer_keys` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `developer_keys` record was updated."
          },
          "scopes": {
            "type": "string",
            "description": "The list of scopes the developer key's access tokens may use."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted", "inactive"],
            "description": "The workflow state of the developer key."
          },
          "account_id": {
            "type": "integer",
            "format": "int64",
            "description": "Points to the account associated with the course. Could be Canvas root account or sub-account ID."
          },
          "redirect_uri": {
            "type": "string",
            "maxLength": 255,
            "description": "(legacy) The valid redirect URI for the developer key."
          },
          "icon_url": {
            "type": "string",
            "maxLength": 255,
            "description": "A URL pointing to the icon of the developer key."
          },
          "redirect_uris": {
            "type": "array",
            "items": { "type": "string", "maxLength": 255 },
            "description": "The list of valid redirect URIs for the developer key."
          },
          "notes": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Any notes added to the developer key."
          },
          "access_token_count": {
            "type": "integer",
            "format": "int32",
            "description": "The number of times the developer key has been used."
          },
          "require_scopes": {
            "type": "boolean",
            "description": "Whether or not access token for the developer key are required to be scoped."
          },
          "test_cluster_only": {
            "type": "boolean",
            "description": "If true, the developer key's access tokens are only valid on Canvas test and beta instances."
          },
          "public_jwk": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The public key (in JWK format) for the developer key. Used if the developer key is associated with an LTI 1.3 tool."
          },
          "allow_includes": {
            "type": "boolean",
            "description": "If true, requests made with this key's access token can use \"includes\" parameters to retrieve additional data in each request."
          },
          "is_lti_key": {
            "type": "boolean",
            "description": "If true, the developer key is intended to be used with LTI 1.3 tools."
          },
          "client_credentials_audience": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The intended audience of client credentials issued by the developer key. If internal (default), credentials will be verified by Canvas; if external, credentials will be verified by other parties using Canvas' public key."
          },
          "email": {
            "type": "string",
            "maxLength": 255,
            "description": "The email address of the developer key's owner."
          },
          "user_name": {
            "type": "string",
            "maxLength": 255,
            "description": "the login ID of the user who originated developer key."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "redirect_uris",
          "access_token_count",
          "require_scopes",
          "test_cluster_only",
          "allow_includes",
          "is_lti_key"
        ],
        "title": "A table representing a set of credentials used for API access.",
        "description": "Contains both normal API keys and the LTI keys used in LTI 1.3 apps."
      },
      "discussion_entries": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the entry."
          },
          "message": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The content of the entry. Contains html tags."
          },
          "attachment_id": {
            "type": "integer",
            "format": "int64",
            "description": "Representation of the attachment for the entry, if any. Present only if there is an attachment."
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the discussion entry was deleted."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the author of the entry."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The creation time of the entry."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The updated time of the entry, in ISO8601 format."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "Life-cycle state for the discussion message."
          },
          "migration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The unique identifier of the migration that imported the entry."
          },
          "discussion_topic_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the discussion topic that this entry is part of."
          },
          "parent_id": {
            "type": "integer",
            "format": "int64",
            "description": "The parent discussion entry ID of this discussion entry. Has a value if the entry is a reply to another entry."
          },
          "editor_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique user ID of the person to last edit the entry, if different than user_id."
          },
          "root_entry_id": {
            "type": "integer",
            "format": "int64",
            "description": "The root discussion entry ID that this entry is a part of. Has a value if the entry is a reply to another entry."
          },
          "depth": {
            "type": "integer",
            "format": "int32",
            "description": "Reply depth for this entry."
          },
          "rating_count": {
            "type": "integer",
            "format": "int32",
            "description": "Rating count is the amount of people who have submitted a rating on a given discussion with the only rating being \"like\"."
          },
          "rating_sum": {
            "type": "integer",
            "format": "int32",
            "description": "The rating sum is the sum of the ratings which occurred."
          }
        },
        "additionalProperties": false,
        "required": ["id", "created_at", "updated_at", "workflow_state"],
        "title": "Stores attributes for discussion entries.",
        "description": "Discussion entries are replies in a discussion topic."
      },
      "discussion_entry_participants": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The Id of the discussion entry participant."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the user who participated in this discussion entry."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "read", "unread"],
            "description": "Life-cycle state for the entry record, could be \"read\" if a participant read a discussion."
          },
          "forced_read_state": {
            "type": "boolean",
            "description": "Allows for users to force a discussion entry to be unread."
          },
          "discussion_entry_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the discussion entry that this participant participated in."
          },
          "rating": {
            "type": "integer",
            "format": "int32",
            "description": "It is a number of 0 or 1 that indicates the rating providing to the linked entry."
          }
        },
        "additionalProperties": false,
        "required": ["id", "user_id", "workflow_state", "discussion_entry_id"],
        "title": "Tracks who has read a particular entry."
      },
      "discussion_topic_participants": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a discussion topic participants record."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "read", "unread"],
            "description": "Current state of the record."
          },
          "subscribed": {
            "type": "boolean",
            "description": "Flag indicating that user is subscribed to discussion and will receive notifications for new comments."
          },
          "unread_entry_count": {
            "type": "integer",
            "format": "int32",
            "description": "The count of discussion entries that this user has not yet read."
          },
          "discussion_topic_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a discussion topic record."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "user_id",
          "workflow_state",
          "unread_entry_count",
          "discussion_topic_id"
        ],
        "title": "Links discussion topics to the users who have posted in them.",
        "description": "If a user has posted to a discussion topic, there will be a row in this table."
      },
      "discussion_topics": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of this topic."
          },
          "message": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The HTML content of the message body."
          },
          "type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Announcement"],
            "description": "Discussion topic type. Two types are default (blank) and Announcement."
          },
          "attachment_id": {
            "type": "integer",
            "format": "int64",
            "description": "Has a value if the discussion topic is associated with an attachment (file)."
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the discussion topic was deleted."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The username of the topic creator."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date the discussion topic was made."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date the discussion topic was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "active",
              "deleted",
              "locked",
              "post_delayed",
              "unpublished"
            ],
            "description": "Life-cycle state for the discussion topic."
          },
          "lock_at": {
            "type": "string",
            "format": "date-time",
            "description": "The datetime to lock the topic (if ever)."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the context that this discussion is used in, e.g. `courses`.`id` if `context_type` is `Course`."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Course", "Group"],
            "description": "The type of context this discussion is used with."
          },
          "locked": {
            "type": "boolean",
            "description": "Whether or not the discussion is *closed for comments*."
          },
          "assignment_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the assignment if the topic is for grading, otherwise NULL."
          },
          "migration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The unique identifier of the migration that imported this discussion topic."
          },
          "group_category_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the group category if the topic is a group discussion, otherwise NULL."
          },
          "cloned_item_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the item in which this discussion topic was cloned from."
          },
          "last_reply_at": {
            "type": "string",
            "format": "date-time",
            "description": "The datetime for when the last reply was in the topic."
          },
          "delayed_post_at": {
            "type": "string",
            "format": "date-time",
            "description": "The datetime to publish the topic (if not right away)."
          },
          "posted_at": {
            "type": "string",
            "format": "date-time",
            "description": "The datetime the topic was posted. If it is NULL it hasn't been posted yet."
          },
          "root_topic_id": {
            "type": "integer",
            "format": "int64",
            "description": "If the topic is for grading and a group assignment this will point to the original topic in the course."
          },
          "old_assignment_id": {
            "type": "integer",
            "format": "int64",
            "description": "the assignment ID after you change a topic from graded to ungraded, then restores the old one if it goes back to graded."
          },
          "subtopics_refreshed_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the subtopics for a group category discussion was refreshed at."
          },
          "external_feed_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the external feed that this discussion topic was created from."
          },
          "podcast_enabled": {
            "type": "boolean",
            "description": "Boolean to determine if the podcast is enabled."
          },
          "podcast_has_student_posts": {
            "type": "boolean",
            "description": "If true, the podcast will include posts from students as well. Implies podcast_enabled."
          },
          "require_initial_post": {
            "type": "boolean",
            "description": "If true then a user may not respond to other replies until that user has made an initial reply."
          },
          "editor_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the editor of the discussion."
          },
          "discussion_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "side_comment", "threaded"],
            "description": "The type of discussion."
          },
          "pinned": {
            "type": "boolean",
            "description": "Whether or not the discussion has been *pinned* by an instructor."
          },
          "allow_rating": {
            "type": "boolean",
            "description": "Whether or not users can rate entries in this topic."
          },
          "only_graders_can_rate": {
            "type": "boolean",
            "description": "Whether or not grade permissions are required to rate entries."
          },
          "sort_by_rating": {
            "type": "boolean",
            "description": "Whether or not entries should be sorted by rating."
          },
          "todo_date": {
            "type": "string",
            "format": "date-time",
            "description": "Date in which discussion topic will show up in the student planner feature."
          },
          "is_section_specific": {
            "type": "boolean",
            "description": "Boolean distinguishing if the topic is a section specific topic or not."
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "description": "The position on the discussions index page under pinned items."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "The topic title."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "context_id",
          "context_type",
          "locked",
          "podcast_enabled",
          "podcast_has_student_posts",
          "require_initial_post",
          "pinned",
          "allow_rating",
          "only_graders_can_rate",
          "sort_by_rating",
          "is_section_specific"
        ],
        "title": "This table stores attributes for discussion topics in Canvas.",
        "description": "Discussion topics are logical discussion threads. They can have many discussion entries. They also have their own message text for the\nmessage that started the topic."
      },
      "enrollment_dates_overrides": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for an enrollment date override record."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a enrollment_dates_overrides record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when an enrollment_dates_overrides record was updated."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of main Canvas account, always a root account ID in this table."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Account"],
            "description": "The type of the object represented by context_id."
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "description": "The start time of the enrollment."
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "description": "The end datetime for the enrollment date override, if applicable."
          },
          "enrollment_term_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the enrollment term."
          },
          "enrollment_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "DesignerEnrollment",
              "StudentEnrollment",
              "TaEnrollment",
              "TeacherEnrollment"
            ],
            "description": "The enrollment type. One of StudentEnrollment, TeacherEnrollment, TaEnrollment, DesignerEnrollment, ObserverEnrollment."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "context_id",
          "context_type"
        ],
        "title": "Supports allowing certain roles to have access to a term outside of term date boundaries."
      },
      "enrollment_states": {
        "type": "object",
        "properties": {
          "enrollment_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the enrollment."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when an `enrollment_states` record was updated."
          },
          "state_is_current": {
            "type": "boolean",
            "description": "Indicates if the enrollment state is current or needs recalculation."
          },
          "state_started_at": {
            "type": "string",
            "format": "date-time",
            "description": "Indicates the date that the enrollment state should take effect."
          },
          "state_valid_until": {
            "type": "string",
            "format": "date-time",
            "description": "Indicates the date that the enrollment state becomes stale."
          },
          "restricted_access": {
            "type": "boolean",
            "description": "Indicates if the enrollment is allowed to view the course."
          },
          "access_is_current": {
            "type": "boolean",
            "description": "Indicates if the state is within the start and valid until bounds."
          },
          "state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "active",
              "invited",
              "creation_pending",
              "deleted",
              "rejected",
              "completed",
              "inactive",
              "current_and_invited",
              "current_and_future",
              "current_and_concluded",
              "pending_active",
              "pending_invited"
            ],
            "description": "State of the user enrollment."
          }
        },
        "additionalProperties": false,
        "required": [
          "enrollment_id",
          "state_is_current",
          "restricted_access",
          "access_is_current"
        ],
        "title": "Stores the state of an enrollment."
      },
      "enrollment_terms": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the enrollment term."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The name of the term."
          },
          "integration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The ID of the enrollment term in the external tools or SIS, this ID usually gets populated via API or SIS import."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the enrollment term was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the enrollment term was last updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "Life-cycle state for the term."
          },
          "sis_batch_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information."
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "description": "The datetime of the start of the term. Set up by the administrator. Enrollment term dates, course dates, and course section dates flow together in all aspects of Canvas; various dates allow different users to participate in the course. The hierarchy of dates are: course section dates override course dates, course dates override term dates."
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "description": "The datetime of the end of the term. Set up by the administrator."
          },
          "sis_source_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The SIS ID of the term. Only included if the user has permission to view SIS information."
          },
          "term_code": {
            "type": "string",
            "maxLength": 255,
            "description": "Enrollment term code as viewed in the UI."
          },
          "grading_period_group_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the grading period group."
          }
        },
        "additionalProperties": false,
        "required": ["id", "created_at", "updated_at", "workflow_state"],
        "title": "Stores enrollment term records that describe the term or semester associated with courses (e.g. Fall 2013).",
        "description": "Use the dates in this table as a proxy for the course start/end dates if the `start_at` and `end_at` fields in the courses table are\nNULL."
      },
      "enrollments": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the enrollment."
          },
          "sis_batch_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of the user."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The created time of the enrollment."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The updated time of the enrollment."
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "creation_pending",
              "invited",
              "rejected",
              "active",
              "inactive",
              "completed",
              "deleted"
            ],
            "description": "Life-cycle state for the user's enrollment in the course."
          },
          "role_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the enrollment role."
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "description": "The start time of the enrollment, in ISO8601 format."
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "description": "The end time of the enrollment, in ISO8601 format."
          },
          "course_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of the course."
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "description": "Enrollment completed date."
          },
          "course_section_id": {
            "type": "integer",
            "format": "int64",
            "description": "The Section Integration ID in which the enrollment is associated. This field is only included if the user has permission to view SIS information."
          },
          "grade_publishing_status": {
            "type": "string",
            "maxLength": 255,
            "description": "Used internally with grade passback functionality."
          },
          "associated_user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of the associated user. Will be NULL unless type is ObserverEnrollment."
          },
          "self_enrolled": {
            "type": "boolean",
            "description": "Enrollment was created via self-enrollment."
          },
          "limit_privileges_to_course_section": {
            "type": "boolean",
            "description": "User can only access his or her own course section."
          },
          "last_activity_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last activity time of the user for the enrollment. This time stamp updates when a user navigates through the course using the Course Navigation menu, replies to a discussion or submits an assignment or quiz, and when they access course files and pages (does not include mobile interactions or group participation)."
          },
          "total_activity_time": {
            "type": "integer",
            "format": "int32",
            "description": "The total activity time of the user for the enrollment, in seconds. If user is viewing a page and is enrolled in that particular course, then the time is incremented. Requires at least 2 minutes, but not more than 10 (for ex: if a student just checks their grade or due date and was on the page for less than 2 min, it doesn't get counted). May not be incremented for page views through mobile app (will get incremented for page views through mobile browser); does not include group activity or page views for videos that do not include intermediate page requests, such as a half-hour recorded lecture."
          },
          "sis_pseudonym_id": {
            "type": "integer",
            "format": "int64",
            "description": "If enrolled via SIS import, which pseudonym was referenced to create this enrollment. It's the user ID that was referenced when an enrollment was created via SIS. it's used for some LTI calls to try and send consistent IDs. also used for splitting accidentally-merged-users to decide which way the enrollments should go."
          },
          "last_attended_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last attended date of the user for the enrollment in a course. The UI facing field that could be set by an end user or API call."
          },
          "type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "StudentEnrollment",
              "TeacherEnrollment",
              "TaEnrollment",
              "DesignerEnrollment",
              "ObserverEnrollment",
              "StudentViewEnrollment"
            ],
            "description": "The base enrollment type."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "user_id",
          "created_at",
          "updated_at",
          "workflow_state",
          "role_id",
          "course_id",
          "course_section_id",
          "grade_publishing_status",
          "limit_privileges_to_course_section",
          "type"
        ],
        "title": "This table stores user enrollments.",
        "description": "An enrollment represents a user's association with a specific course and section. There may be multiple records associated with a\n`course_id` and `user_id` combination (records are unique on: `course_id`, `user_id`, `course_section_id`, `role_id`, `workflow_state`,\n`associated_user_id`)."
      },
      "favorites": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a favorite record."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a favorites record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a favorites record was updated."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the favorites's context (account, course, user)."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Course", "Group"],
            "description": "The type of the object represented by `context_id`, typically `Course` or `Account` or `User`."
          }
        },
        "additionalProperties": false,
        "required": ["id", "created_at", "updated_at", "context_type"],
        "title": "A record of items that a user has favorited, such as a Course.",
        "description": "This affects how items are displayed in places like the Dashboard."
      },
      "folders": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a folder record."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Name of the folder."
          },
          "full_name": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Full path of the folder."
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when this record was deleted. If the record has not been deleted the value will be NULL."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a folders record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a folders record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "active",
              "deleted",
              "hidden",
              "private",
              "visible"
            ],
            "description": "In this context the workflow state indicates the visibility of the folder."
          },
          "unlock_at": {
            "type": "string",
            "format": "date-time",
            "description": "Indicates the date at which this folder should become accessible."
          },
          "lock_at": {
            "type": "string",
            "format": "date-time",
            "description": "Indicates the date at which this folder should no longer be accessible."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the folders's context (account, course, user)."
          },
          "context_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "Account",
              "Course",
              "Group",
              "User"
            ],
            "description": "The type of the object represented by context_id."
          },
          "locked": {
            "type": "boolean",
            "description": "Indicates if the folder is currently accessible [NULL=false]."
          },
          "cloned_item_id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier of the folder that this folder was cloned from."
          },
          "submission_context_code": {
            "type": "string",
            "maxLength": 255,
            "description": "A value indicating the context to which this folder should be submitted if it is for a submission."
          },
          "parent_folder_id": {
            "type": "integer",
            "format": "int64",
            "description": "Id of the parent folder."
          },
          "unique_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "media",
              "student annotation documents",
              "icon maker icons",
              "buttons and icons"
            ],
            "description": "Value indicating what kind of files are stored in this folder. NULL is the most common value, meaning this is a standard folder. `media` is a special case where media files are stored."
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "description": "An integer value used for sorting the order in which the folder is listed."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "context_id",
          "context_type"
        ],
        "title": "A collection of files (attachments)."
      },
      "grading_period_groups": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Primary key for the grading period groups."
          },
          "account_id": {
            "type": "integer",
            "format": "int64",
            "description": "Points to the account associated with the group."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when record was last updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "Life-cycle state for the grading period group."
          },
          "course_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the course."
          },
          "weighted": {
            "type": "boolean",
            "description": "Whether to weight individual grading periods within this grading group."
          },
          "display_totals_for_all_grading_periods": {
            "type": "boolean",
            "description": "If set, shows the option to display the totals for all grading periods within this group on the student grades page and the gradebook."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "The title for this grading period group."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "display_totals_for_all_grading_periods"
        ],
        "title": "Stores attributes for grading period groups, which are a group of grading periods."
      },
      "grading_periods": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the grading period."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when record was last updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "Life-cycle state for the grading periods."
          },
          "grading_period_group_id": {
            "type": "integer",
            "format": "int64",
            "description": "Surrogate ID to the grading period group dataset."
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "The start date of the grading period."
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "description": "The end date of the grading period."
          },
          "close_date": {
            "type": "string",
            "format": "date-time",
            "description": "Grades can only be changed before this close date of the grading period."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "The title for the grading period."
          },
          "weight": {
            "type": "number",
            "format": "float64",
            "description": "A weight value that contributes to the overall weight of a grading period set, used to calculate how much assignments in this period contribute to the total grade."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "grading_period_group_id",
          "start_date",
          "end_date"
        ],
        "title": "Stores attributes for grading period.",
        "description": "A Grading period is like a \"term\", essentially used for splitting up the grade book into \"periods\"."
      },
      "grading_standards": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a grading standard record."
          },
          "version": {
            "type": "integer",
            "format": "int32",
            "description": "Either 1 or 2, as noted in the definition of `data`."
          },
          "context_code": {
            "type": "string",
            "maxLength": 255,
            "description": "A value in string form representing the associated context (e.g., `course_5`)."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the user who created this grading standard."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `grading_standards` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `grading_standards` record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "Life-cycle state for the grading standard."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the account or course to which this grading standard belongs."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Account", "Course"],
            "description": "The type of the object represented by `context_id`, either Account or Course."
          },
          "migration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The ID of the associated migration, if this grading standard was created via a content migration."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "The name for this grading standard."
          },
          "data": {
            "type": "string",
            "description": "A stringified array representing the content of this grading standard. If the `version` column is 1, each element is a tuple containing a letter grade and the maximum value for that letter grade. If the `version` column is 2, each element is a tuple containing a letter grade and the minimum value for that letter grade."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "context_id",
          "context_type"
        ],
        "title": "Contains data for grading schemes defined for a course or account."
      },
      "group_categories": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a group category record."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The display name of the group category."
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when this record was deleted. If the record has not been deleted the value will be NULL."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `group_categories` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `group_categories` record was updated."
          },
          "sis_batch_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the context of `group_categories` (account, course, user)."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Account", "Course"],
            "description": "The type of the object represented by context_id."
          },
          "sis_source_id": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The unique identifier for this group in the customer SIS."
          },
          "role": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "communities",
              "student_organized",
              "imported"
            ],
            "description": "Certain types of group categories have special role designations. Currently, these include: `communities`, `student_organized`, and `imported`. Regular course/account group categories have a role of NULL."
          },
          "self_signup": {
            "type": "string",
            "maxLength": 255,
            "description": "If the group category allows users to join a group themselves, thought they may only be a member of one group per group category at a time. Values include `restricted`, `enabled`, and NULL. `enabled` allows students to assign themselves to a group, `restricted` restricts them to only joining a group in their section, NULL disallows students from joining groups."
          },
          "group_limit": {
            "type": "integer",
            "format": "int32",
            "description": "If self-signup is enabled, this field can be set to cap the number of users in each group. If NULL, there is no limit."
          },
          "auto_leader": {
            "type": "string",
            "maxLength": 255,
            "description": "Gives instructors the ability to automatically have group leaders assigned. Values include `random`, `first`, and NULL; `random` picks a student from the group at random as the leader, `first` sets the first student to be assigned to the group as the leader."
          }
        },
        "additionalProperties": false,
        "required": ["id", "context_type"],
        "title": "A container for a set of groups, since often you want everyone to be in exactly one group in a set."
      },
      "group_memberships": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a group membership record."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the user object to which the membership belongs."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `group_memberships` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `group_memberships` record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "accepted",
              "deleted",
              "invited",
              "rejected",
              "requested"
            ],
            "description": "The current state of the membership."
          },
          "sis_batch_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the SIS import if created through SIS. Only included if the user has permission to manage SIS information."
          },
          "group_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the group object to which the membership belongs."
          },
          "moderator": {
            "type": "boolean",
            "description": "Whether or not the user is a moderator of the group (the must also be an active member of the group to moderate)."
          },
          "uuid": {
            "type": "string",
            "maxLength": 255,
            "description": "UUID for a membership record."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "user_id",
          "created_at",
          "updated_at",
          "workflow_state",
          "group_id",
          "uuid"
        ],
        "title": "A join table of users and groups. Like enrollments, but for groups instead of courses."
      },
      "groups": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the group."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The display name of the group."
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the group was deleted."
          },
          "storage_quota": {
            "type": "integer",
            "format": "int64",
            "description": "The storage quota for the group."
          },
          "lti_context_id": {
            "type": "string",
            "maxLength": 255,
            "description": "UUID of the Canvas context in LTI standard. secondary ID for this context, could be used in API to identify resource as well."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the group was first saved in the system."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the group was last updated in the system."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "available", "deleted", "active"],
            "description": "Life-cycle state for the group."
          },
          "account_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the associated account, groups could be owned by sub-accounts."
          },
          "sis_batch_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the SIS import if created through SIS."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the context (account or course) this group belongs too. See also: context_type."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Account", "Course"],
            "description": "The course or account that the group belongs to. The pattern here is that whatever the `context_type` is, there will be an `_id` field named after that type. So if instead `context_type` was `account`, the `course_id` field would be replaced by an `account_id` field."
          },
          "migration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The unique identifier of the migration that imported this group."
          },
          "group_category_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the group's category."
          },
          "sis_source_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The SIS ID of the group."
          },
          "is_public": {
            "type": "boolean",
            "description": "Whether or not the group is public. Currently only community groups can be made public. Also, once a group has been set to public, it cannot be changed back to private."
          },
          "wiki_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of an associated wiki page."
          },
          "max_membership": {
            "type": "integer",
            "format": "int32",
            "description": "The maximum number of participating users in the group."
          },
          "join_level": {
            "type": "string",
            "maxLength": 255,
            "description": "How people are allowed to join the group. For all groups except for community groups, the user must share the group's parent course or account. For student organized or community groups, where a user can be a member of as many or few as they want, the applicable levels are `parent_context_auto_join`, `parent_context_request`, and `invitation_only`. For class groups, where students are divided up and should only be part of one group of the category, this value will always be `invitation_only`, and is not relevant. If `parent_context_auto_join`, anyone can join and will be automatically accepted. If `parent_context_request`, anyone can request to join, which must be approved by a group moderator. If `invitation_only`, only those how have received an invitation my join the group, by accepting that invitation."
          },
          "avatar_attachment_id": {
            "type": "integer",
            "format": "int64",
            "description": "Foreign key to the `attachments` table for the avatar of this group."
          },
          "leader_id": {
            "type": "integer",
            "format": "int64",
            "description": "Foreign key to the `users` table for the leader of this group."
          },
          "description": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "A description of the group."
          },
          "uuid": {
            "type": "string",
            "maxLength": 255,
            "description": "The UUID of the group."
          },
          "default_view": {
            "type": "string",
            "enum": ["__dap_unspecified__", "feed"],
            "description": "Default view for groups is the feed."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "account_id",
          "context_id",
          "context_type",
          "uuid"
        ],
        "title": "Stores attributes for groups in canvas.",
        "description": "Groups contain two or more students enrolled in a particular course working on an assignment or project together."
      },
      "late_policies": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a late policy record."
          },
          "course_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the course this late policy references."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `late_policies` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `late_policies` record was updated."
          },
          "missing_submission_deduction_enabled": {
            "type": "boolean",
            "description": "Whether to apply a deduction for submissions that have not been submitted as of their due date."
          },
          "missing_submission_deduction": {
            "type": "number",
            "multipleOf": 0.01,
            "exclusiveMinimum": -1000,
            "exclusiveMaximum": 1000,
            "description": "The amount to award for a missing submission, expressed as a percentage (from 0 to 100) of the assignment's possible points."
          },
          "late_submission_deduction_enabled": {
            "type": "boolean",
            "description": "Whether to apply a deduction for submissions submitted late."
          },
          "late_submission_deduction": {
            "type": "number",
            "multipleOf": 0.01,
            "exclusiveMinimum": -1000,
            "exclusiveMaximum": 1000,
            "description": "The amount to deduct from the submission for each interval it is late, expressed as a percentage (from 0 to 100) of the assignment's possible points."
          },
          "late_submission_interval": {
            "type": "string",
            "maxLength": 16,
            "description": "The interval at which points should be deducted: valid values are `day` and `hour`."
          },
          "late_submission_minimum_percent_enabled": {
            "type": "boolean",
            "description": "True if the points deducted for lateness should be capped."
          },
          "late_submission_minimum_percent": {
            "type": "number",
            "multipleOf": 0.01,
            "exclusiveMinimum": -1000,
            "exclusiveMaximum": 1000,
            "description": "If late_submission_minimum_percent_enabled is true, prevents late deductions from bringing a submission below this percentage of the total points. A value between 0 and 100."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "course_id",
          "created_at",
          "updated_at",
          "missing_submission_deduction_enabled",
          "missing_submission_deduction",
          "late_submission_deduction_enabled",
          "late_submission_deduction",
          "late_submission_interval",
          "late_submission_minimum_percent_enabled",
          "late_submission_minimum_percent"
        ],
        "title": "Contains late/missing policy configurations for courses."
      },
      "learning_outcome_groups": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a learning outcome group record."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a learning_outcome_groups record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a learning_outcome_groups record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "Workflow status of the learning outcome."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the learning_outcome_groups's context (account, course)."
          },
          "context_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "Account",
              "Course",
              "College",
              "Department"
            ],
            "description": "The type of the object represented by context_id."
          },
          "migration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "A GUID used to resolve outcomes during import and migration."
          },
          "learning_outcome_group_id": {
            "type": "integer",
            "format": "int64",
            "description": "ID associated with the parent of this group (NULL if it does not have parent). Refers to a learning_outcome_group record."
          },
          "root_learning_outcome_group_id": {
            "type": "integer",
            "format": "int64",
            "description": "ID associated with the root group in the group hierarchy (NULL if it is the root). Refers to a learning_outcome_group record."
          },
          "vendor_guid": {
            "type": "string",
            "maxLength": 255,
            "description": "A custom GUID for the learning standard."
          },
          "outcome_import_id": {
            "type": "integer",
            "format": "int64",
            "description": "Foreign key to the outcome import associated with this outcome group, if this group was imported."
          },
          "source_outcome_group_id": {
            "type": "integer",
            "format": "int64",
            "description": "Foreign key to the learning outcome group that the group was copied from."
          },
          "description": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Description of the learning outcome group."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "Title of the learning outcome group."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "title"
        ],
        "title": "Learning outcome groups organize outcomes hierarchically within a context, such as an account, course or the global context.",
        "description": "This table contains dimensions for learning outcome groups."
      },
      "learning_outcome_question_results": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a learning outcome question result record."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a learning_outcome_question_results record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a learning_outcome_question_results record was updated."
          },
          "learning_outcome_id": {
            "type": "integer",
            "format": "int64",
            "description": "Foreign key to the learning outcome this record is associated with."
          },
          "associated_asset_id": {
            "type": "integer",
            "format": "int64",
            "description": "Polymorphic foreign key to the associated asset (currently always Assessment Question) used to generate this result."
          },
          "associated_asset_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "AssessmentQuestion"],
            "description": "Type of the associated asset (currently always Assessment Question)."
          },
          "learning_outcome_result_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the learning outcome result."
          },
          "score": {
            "type": "number",
            "format": "float64",
            "description": "The student's score."
          },
          "possible": {
            "type": "number",
            "format": "float64",
            "description": "Total number of points possible."
          },
          "mastery": {
            "type": "boolean",
            "description": "Boolean indicating whether user achieved mastery."
          },
          "attempt": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of attempts, or submissions."
          },
          "original_score": {
            "type": "number",
            "format": "float64",
            "description": "Score on the first attempt."
          },
          "original_possible": {
            "type": "number",
            "format": "float64",
            "description": "Possible points on the first attempt."
          },
          "original_mastery": {
            "type": "boolean",
            "description": "Boolean indicating whether user achieved mastery."
          },
          "assessed_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time when answer was assessed."
          },
          "submitted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time when answer was submitted."
          },
          "percent": {
            "type": "number",
            "format": "float64",
            "description": "Score's percent of maximum points possible for outcome, scaled to reflect any custom mastery levels that differ from the learning outcome."
          },
          "title": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Title for identifying the question result."
          }
        },
        "additionalProperties": false,
        "required": ["id", "created_at", "updated_at", "associated_asset_type"],
        "title": "Attributes for the results of answered questions which have been associated with a learning outcome."
      },
      "learning_outcome_results": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a learning outcome result record."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user who made the submission."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a learning_outcome_results record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a learning_outcome_results record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "The current state of a learning outcome result record."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the learning_outcome_results's context (account, course, user)."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Course"],
            "description": "The type of the object represented by `context_id`, typically `Course` or `Account` or `User`."
          },
          "context_code": {
            "type": "string",
            "maxLength": 255,
            "description": "Alternate specification of learning outcome result context as single string."
          },
          "learning_outcome_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the learning outcome this result is associated with."
          },
          "associated_asset_id": {
            "type": "integer",
            "format": "int64",
            "description": "Polymorphic foreign key to the associated asset this result is associated with."
          },
          "associated_asset_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "AssessmentQuestion",
              "LiveAssessments::Assessment",
              "Assignment",
              "Quizzes::Quiz"
            ],
            "description": "Type of the associated asset this result is associated with."
          },
          "score": {
            "type": "number",
            "format": "float64",
            "description": "The student's score."
          },
          "possible": {
            "type": "number",
            "format": "float64",
            "description": "Total number of points possible."
          },
          "mastery": {
            "type": "boolean",
            "description": "Boolean indicating whether user achieved mastery."
          },
          "attempt": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of attempts, or submissions."
          },
          "original_score": {
            "type": "number",
            "format": "float64",
            "description": "Score on the first attempt."
          },
          "original_possible": {
            "type": "number",
            "format": "float64",
            "description": "Possible points on the first attempt."
          },
          "original_mastery": {
            "type": "boolean",
            "description": "Boolean indicating whether user achieved mastery."
          },
          "assessed_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the result was assessed."
          },
          "submitted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the submission was submitted."
          },
          "association_id": {
            "type": "integer",
            "format": "int64",
            "description": "Polymorphic foreign key to the aligned learning object this result is associated with."
          },
          "association_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "Assignment",
              "Quizzes::Quiz",
              "RubricAssociation"
            ],
            "description": "Type of the aligned learning object this result is associated with."
          },
          "content_tag_id": {
            "type": "integer",
            "format": "int64",
            "description": "Foreign key to the content tag representing the learning outcome alignment this result is associated with."
          },
          "user_uuid": {
            "type": "string",
            "maxLength": 255,
            "description": "The uuid of the user who made the submission."
          },
          "artifact_id": {
            "type": "integer",
            "format": "int64",
            "description": "Polymorphic foreign key to the assessed artifact this result is associated with."
          },
          "artifact_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "LiveAssessments::Submission",
              "Quizzes::QuizSubmission",
              "RubricAssessment",
              "Submission"
            ],
            "description": "Type of the assessed artifact this result is associated with."
          },
          "hide_points": {
            "type": "boolean",
            "description": "Boolean indicating if outcome result points should be hidden in the Learning Mastery Gradebook and reports. If enabled, replace points with the description of the highest scoring outcome criterion rating."
          },
          "hidden": {
            "type": "boolean",
            "description": "Boolean indicating if outcome result should be hidden from the Learning Mastery Gradebook and reports."
          },
          "percent": {
            "type": "number",
            "format": "float64",
            "description": "Percent of maximum points possible for an outcome, scaled to reflect any custom mastery levels that differ from the learning outcome."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "Title for identifying the result."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "hide_points",
          "hidden"
        ],
        "title": "Learning outcome results are a student's mastery score on a given outcome.",
        "description": "This table contains dimensions for learning outcome results."
      },
      "learning_outcomes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a learning outcome record."
          },
          "display_name": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional friendly name for reporting."
          },
          "context_code": {
            "type": "string",
            "maxLength": 255,
            "description": "Alternate specification of learning outcome context as single string. Combination of `context_type` and `context_id` (ex: `course_34416`)."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `learning_outcomes` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `learning_outcomes` record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted", "retired"],
            "description": "Workflow status of the learning outcome."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the context of `learning_outcomes` (account, course, user), may be NULL for global outcomes."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Account", "Course"],
            "description": "The type of the object represented by `context_id`."
          },
          "migration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "A GUID used to resolve outcomes during import and migration."
          },
          "vendor_guid": {
            "type": "string",
            "maxLength": 255,
            "description": "A custom GUID for the learning standard."
          },
          "outcome_import_id": {
            "type": "integer",
            "format": "int64",
            "description": "Foreign key to the outcome import associated with this outcome, if this outcome was imported."
          },
          "calculation_method": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "decaying_average",
              "average",
              "highest",
              "latest",
              "n_mastery"
            ],
            "description": "The method used to calculate student score."
          },
          "calculation_int": {
            "type": "integer",
            "format": "int16",
            "description": "Defines the variable value used by the calculation_method. included only if `calculation_method` uses it."
          },
          "short_description": {
            "type": "string",
            "maxLength": 255,
            "description": "Title of the outcome."
          },
          "description": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Description of the outcome."
          },
          "data": {
            "type": "string",
            "description": "YAML data specifying the scoring method and rubric criteria for this outcome."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "short_description"
        ],
        "title": "Learning outcomes are measurable statements that express student knowledge or a student skill.",
        "description": "This table contains dimensions for learning outcomes."
      },
      "lti_line_items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for an lti line item record."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a lti_line_items record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a lti_line_items record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "The workflow state of the line item."
          },
          "assignment_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the assignment associated with the line item."
          },
          "client_id": {
            "type": "integer",
            "format": "int64",
            "description": "The client ID used to create the line item (developer key global id)."
          },
          "coupled": {
            "type": "boolean",
            "description": "True if the line item is the default one created when a user created an assignment; false if the line item was created via the API (regardless if it is the default line item or not)."
          },
          "score_maximum": {
            "type": "number",
            "format": "float64",
            "description": "The maximum score for the line item."
          },
          "resource_id": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "A Tool Provider specified ID for the Line Item. Multiple line items may share the same resourceId within a given context."
          },
          "lti_resource_link_id": {
            "type": "integer",
            "format": "int64",
            "description": "The resource link ID associated with the line item. This ID matches the associated assignments \"lti_context_id\"."
          },
          "label": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The label of the line item."
          },
          "extensions": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Contains canvas-specific line item extensions. For example: submission_type."
          },
          "tag": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "A value used to qualify a line Item beyond its ids. Line Items may be queried by this value in the List endpoint. Multiple line items can share the same tag within a given context."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "assignment_id",
          "client_id",
          "coupled",
          "score_maximum",
          "label",
          "extensions"
        ],
        "title": "Represents a line item from the IMS Assignment and Grade service.",
        "description": "LTI 1.3 tools that have been authorized by an admin may manage this table.\n\nSee [Learning Tools Interoperability (LTI) Assignment and Grade Services\nSpecification](https://www.imsglobal.org/spec/lti-ags/v2p0#line-item-service)."
      },
      "lti_resource_links": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for an lti resource link record."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a lti_resource_links record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a lti_resource_links record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "The workflow state of the line item."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The context the LTI resource link belongs to."
          },
          "context_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "Account",
              "Assignment",
              "Course",
              "Group"
            ],
            "description": "The type of the context the LTI resource link belongs to."
          },
          "context_external_tool_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the context_external_tool associated to the resource."
          },
          "custom": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Custom parameters that will be added to the LTI launch. These are custom parameters returned from a Deep Linking response. These are merged with tool/placement-level custom parameters, if any."
          },
          "resource_link_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "A UUID identifying the resource link."
          },
          "lookup_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "Used to identify the resource link to use in order to lookup custom parameters in some scenarios, such as a link added from Deep Linking into a Rich Content Editor."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "context_id",
          "context_type",
          "context_external_tool_id",
          "resource_link_uuid",
          "lookup_uuid"
        ],
        "title": "Joins `context_external_tools` to other resources in Canvas (assignments for example).",
        "description": "Only used with LTI 1.3 `context_external_tools`."
      },
      "lti_results": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for an lti result record."
          },
          "extensions": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Platform-specific extensions for the result."
          },
          "comment": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Comment visible to the student about the result (LTI AGS)."
          },
          "submission_id": {
            "type": "integer",
            "format": "int64",
            "description": "the ID of the associated submission."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `lti_results` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `lti_results` record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "The workflow state of the result."
          },
          "result_score": {
            "type": "number",
            "format": "float64",
            "description": "The score given for the the student (LTI AGS)."
          },
          "result_maximum": {
            "type": "number",
            "format": "float64",
            "description": "The maximum score for the student (LTI AGS)."
          },
          "activity_progress": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Indication to Canvas of the status of the user towards the activity's completion. Must be one of Initialized, Started, InProgress, Submitted, Completed (LTI AGS)."
          },
          "grading_progress": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Indication to Canvas of the status of the grading process. A value of PendingManual will require intervention by a grader. Values of NotReady, Failed, and Pending will cause the scoreGiven to be ignored. FullyGraded values will require no action. Possible values are NotReady, Failed, Pending, PendingManual, FullyGraded (LTI AGS)."
          },
          "lti_line_item_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the associated line item."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "extensions",
          "user_id",
          "created_at",
          "updated_at",
          "workflow_state",
          "lti_line_item_id"
        ],
        "title": "Represents a result from the IMS Assignment and Grade service",
        "description": "See [IMS Global](https://www.imsglobal.org/spec/lti-ags/v2p0#result-service). LTI 1.3 tools that have been authorized by an admin may\nread records from this table via API."
      },
      "master_courses_child_content_tags": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a master courses child content tag record."
          },
          "child_subscription_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of a subscription belonging to the associated course."
          },
          "content_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of an associated content object."
          },
          "migration_id": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "An identifier used by the Blueprint system to match with the blueprint content."
          },
          "downstream_changes": {
            "type": "string",
            "description": "The columns changed on the associated content."
          },
          "content_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "AssessmentQuestionBank",
              "Assignment",
              "AssignmentGroup",
              "Attachment",
              "CalendarEvent",
              "ContextExternalTool",
              "ContextModule",
              "ContentTag",
              "CoursePace",
              "DiscussionTopic",
              "LearningOutcome",
              "LearningOutcomeGroup",
              "Rubric",
              "Wiki",
              "WikiPage",
              "Quizzes::Quiz"
            ],
            "description": "The class of the associated content object."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "child_subscription_id",
          "content_id",
          "content_type"
        ],
        "title": "Links imported course content to the child subscription and keeps track of changes made to content."
      },
      "master_courses_child_subscriptions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a master courses child subscription record."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a master_courses_child_subscriptions record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a master_courses_child_subscriptions record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "Whether the subscription is active or has been deleted."
          },
          "use_selective_copy": {
            "type": "boolean",
            "description": "Whether the associated course can receive partial exports from the blueprint course for subsequent sync events."
          },
          "master_template_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of a template that belongs to the blueprint course."
          },
          "child_course_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of an associated course."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "use_selective_copy",
          "master_template_id",
          "child_course_id"
        ],
        "title": "Saves data about which child courses are linked to which master blueprint courses."
      },
      "master_courses_master_content_tags": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a master courses master content tag record."
          },
          "content_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of an associated content object."
          },
          "migration_id": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "An identifier used by the Blueprint system to match with associated content."
          },
          "restrictions": {
            "type": "string",
            "description": "The locked status of the associated content object."
          },
          "use_default_restrictions": {
            "type": "boolean",
            "description": "Whether the content is using defaults set by the course or has been individually configured."
          },
          "master_template_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of a template belonging to the blueprint course."
          },
          "content_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "AssessmentQuestionBank",
              "Assignment",
              "AssignmentGroup",
              "Attachment",
              "CalendarEvent",
              "ContextExternalTool",
              "ContextModule",
              "ContentTag",
              "CoursePace",
              "DiscussionTopic",
              "LearningOutcome",
              "Rubric",
              "Wiki",
              "WikiPage",
              "Quizzes::Quiz"
            ],
            "description": "The class of the associated content object."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "content_id",
          "use_default_restrictions",
          "master_template_id",
          "content_type"
        ],
        "title": "Links blueprint course content to the template and keeps track of their locked status."
      },
      "master_courses_master_migrations": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a master courses master migrations record."
          },
          "comment": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "An optional message to be displayed with the sync event."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a master_courses_master_migrations record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a master_courses_master_migrations record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "completed",
              "created",
              "exporting",
              "exports_failed",
              "imports_failed",
              "imports_queued",
              "queued"
            ],
            "description": "Current state of the sync event."
          },
          "migration_settings": {
            "type": "string",
            "description": "Optional settings for the sync event (such as whether to include course settings)."
          },
          "export_results": {
            "type": "string",
            "description": "Record of which associated courses received full exports and which ones received partial (selective) ones."
          },
          "exports_started_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when exports started being generated from the blueprint course."
          },
          "imports_queued_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when imports started being queued into the associated courses."
          },
          "imports_completed_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when all imports into associated courses completed."
          },
          "send_notification": {
            "type": "boolean",
            "description": "Whether to generate notifications around the sync event."
          },
          "master_template_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of a template that belongs to the blueprint course."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "send_notification",
          "master_template_id"
        ],
        "title": "Represents a blueprint course sync event."
      },
      "master_courses_master_templates": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a master courses template record."
          },
          "course_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of a blueprint course record."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a master_courses_templates record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a master_courses_templates record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "Whether the template is active or if it has been deleted (i.e. the course has been unset as a blueprint)."
          },
          "full_course": {
            "type": "boolean",
            "description": "Whether all blueprint content in the course should be synced (always true for the time being)."
          },
          "active_migration_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of a last migration to be run (used to ensure only one is running at a time)."
          },
          "default_restrictions": {
            "type": "string",
            "description": "The default locked status for all blueprint course content (unless using restrictions by type)."
          },
          "use_default_restrictions_by_type": {
            "type": "boolean",
            "description": "Whether to use default_restrictions_by_type to determine content locked status."
          },
          "default_restrictions_by_type": {
            "type": "string",
            "description": "The default locked status for all blueprint course content depending on the type of content (unless not using restrictions by type)."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "course_id",
          "created_at",
          "updated_at",
          "full_course",
          "use_default_restrictions_by_type"
        ],
        "title": "Stores blueprint course specific data and links a course with all other blueprint models."
      },
      "master_courses_migration_results": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a master courses migration result record."
          },
          "state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "failed", "completed", "queued"],
            "description": "The state of the import into the associated course (`failed`, `completed` or `queued`)."
          },
          "child_subscription_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of a relevant associated course subscription record."
          },
          "master_migration_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of a relevant blueprint migration record (sync event)."
          },
          "content_migration_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of a relevant import record on the associated course."
          },
          "import_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "full", "selective"],
            "description": "Whether the blueprint export was for the entire course (`full`) or a partial (`selective`)."
          },
          "results": {
            "type": "string",
            "description": "Relevant results of the import (e.g. items that were not synced because they were modified by the associated course)."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "state",
          "child_subscription_id",
          "master_migration_id",
          "content_migration_id",
          "import_type"
        ],
        "title": "Stores results for individual associated courses for a blueprint sync event."
      },
      "originality_reports": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for an originality report record."
          },
          "error_message": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The error message provided by the tool provider. Only set if there was an error processing the submission."
          },
          "attachment_id": {
            "type": "integer",
            "format": "int64",
            "description": "The is of the attachment associated with the originality report."
          },
          "submission_id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the submission associated with the originality report."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when an `originality_reports` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when an `originality_reports` record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "error", "pending", "scored"],
            "description": "Workflow state of the originality report."
          },
          "originality_score": {
            "type": "number",
            "format": "float64",
            "description": "A number ranging from 0-100 indicating the level of potential plagiarism."
          },
          "originality_report_url": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The url pointing to the originality report from the tool provider."
          },
          "originality_report_lti_url": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The LTI launch URL that allows a user to view the originality report in the tool."
          },
          "link_id": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Resource link ID of the assignment associated with the submission."
          },
          "submission_time": {
            "type": "string",
            "format": "date-time",
            "description": "Time the submission was submitted."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "submission_id",
          "created_at",
          "updated_at",
          "workflow_state"
        ],
        "title": "Represents an \"originality score\" for a submission.",
        "description": "Rows in this table are managed solely by LTI 2 tool providers that leverage the Canvas plagiarism detection platform."
      },
      "outcome_proficiencies": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for an outcome proficiency record."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when an `outcome_proficiencies` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when an `outcome_proficiencies` record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "Workflow status of the outcome_proficiency. Defaults to `active`."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the context (account or course) of the outcome proficiency."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Account", "Course"],
            "description": "The type of the object represented by context_id."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "context_id",
          "context_type"
        ],
        "title": "Outcome proficiencies, or learning mastery proficiency ratings, define a set of ratings, which together create a point scale and a mastery level."
      },
      "outcome_proficiency_ratings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for an outcome proficiency ratings record."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when an outcome_proficiency_ratings record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when an outcome_proficiency_ratings record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "Workflow status of the outcome_proficiency_rating. Defaults to `active`."
          },
          "mastery": {
            "type": "boolean",
            "description": "Indicates the rating where mastery is first achieved."
          },
          "points": {
            "type": "number",
            "format": "float64",
            "description": "A non-negative number of points for the rating."
          },
          "outcome_proficiency_id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique ID of proficiency collection to which this rating belongs."
          },
          "color": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The hex color code of the rating."
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "description": "The description of the rating."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "mastery",
          "points",
          "outcome_proficiency_id",
          "color",
          "description"
        ],
        "title": "Outcome proficiency ratings define the individual tiers of outcome proficiencies."
      },
      "post_policies": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a post policy record."
          },
          "course_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the course referenced by this policy. Note that this is always set even if the policy refers to a specific assignment within a course."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `post_policies` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `post_policies` record was updated."
          },
          "assignment_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the assignment referenced by this policy, or NULL if the policy refers to a course at large."
          },
          "post_manually": {
            "type": "boolean",
            "description": "For post policies associated with an assignment, whether submissions receiving grades or comments should be posted to the student automatically. For post policies associated with a course, this value will be applied by default to assignments created in the course."
          }
        },
        "additionalProperties": false,
        "required": ["id", "created_at", "updated_at", "post_manually"],
        "title": "Contains post policy configurations for courses and individual assignments."
      },
      "pseudonyms": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Primary key for this pseudonym in the the Canvas database."
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the pseudonym was deleted (NULL if the pseudonym is still active)."
          },
          "integration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The `integration_id` associated with the user."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "Id for the user associated with this pseudonym."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when this pseudonym was created in Canvas."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when this pseudonym was last updated in Canvas."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted", "suspended"],
            "description": "Life-cycle state for the pseudonym."
          },
          "account_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the account associated with this pseudonym. Typically root account ID unless account user belongs to trust/consortium based Canvas accounts."
          },
          "sis_batch_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the SIS import."
          },
          "unique_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The unique login ID for the user. This is what the user uses to log in to Canvas."
          },
          "login_count": {
            "type": "integer",
            "format": "int32",
            "description": "The count of all user logins."
          },
          "failed_login_count": {
            "type": "integer",
            "format": "int32",
            "description": "Only applies to accounts that use Canvas authentication settings."
          },
          "last_request_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the user last logged in with this pseudonym."
          },
          "last_login_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of last time a user logged in with this pseudonym."
          },
          "current_login_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the user logged in."
          },
          "last_login_ip": {
            "type": "string",
            "maxLength": 255,
            "description": "IP address recorded the last time a user logged in with this pseudonym."
          },
          "current_login_ip": {
            "type": "string",
            "maxLength": 255,
            "description": "IP address of user's previous login id, this value could be the same as last_login_ip."
          },
          "sis_user_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The SIS ID associated with the user."
          },
          "authentication_provider_id": {
            "type": "integer",
            "format": "int64",
            "description": "The authentication provider this login is associated with. This can be the integer ID of the provider, or the type of the provider (in which case, it will find the first matching provider)."
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "description": "Position of user's login credentials."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "user_id",
          "created_at",
          "updated_at",
          "workflow_state",
          "account_id",
          "unique_id",
          "login_count",
          "failed_login_count"
        ],
        "title": "This table stores user pseudonyms.",
        "description": "Pseudonyms are login profiles associated with users. Contains user / account relationship (may contain multiple records per `user_id`\nif that `user_id` is associated with multiple accounts); note: not all users can be found in the pseudonyms table."
      },
      "quiz_groups": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the question group."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The name of the question group."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the quiz question was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the quiz question was last updated."
          },
          "assessment_question_bank_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the Assessment question bank to pull questions from."
          },
          "quiz_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the Quiz the question group belongs to."
          },
          "migration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The unique identifier of the migration that imported the quiz group."
          },
          "pick_count": {
            "type": "integer",
            "format": "int32",
            "description": "The number of questions to pick from the group to display to the student."
          },
          "question_points": {
            "type": "number",
            "format": "float64",
            "description": "The amount of points allotted to each question in the group."
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "description": "The order in which the question group will be retrieved and displayed."
          }
        },
        "additionalProperties": false,
        "required": ["id", "created_at", "updated_at", "quiz_id"],
        "title": "This table stores attributes for quiz group."
      },
      "quiz_questions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the quiz question."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the quiz question was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the quiz question was last updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted", "generated"],
            "description": "Life-cycle state for the quiz question."
          },
          "quiz_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the Quiz the question belongs to."
          },
          "migration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The unique identifier of the migration that imported the quiz question."
          },
          "quiz_group_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the quiz group."
          },
          "assessment_question_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the assessment question."
          },
          "assessment_question_version": {
            "type": "integer",
            "format": "int32",
            "description": "Version of the assessment question associated with the quiz question."
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "description": "The order in which the question will be retrieved and displayed."
          },
          "question_data": {
            "type": "object",
            "properties": {
              "neutral_comments": {
                "type": "string",
                "description": "Comments to be displayed regardless of how the student answers the question."
              },
              "answers": {
                "type": "string",
                "description": "Collection of possible answers."
              },
              "name": {
                "type": "string",
                "description": "Name of the question."
              },
              "question_type": {
                "type": "string",
                "description": "Denotes the type of the question."
              },
              "question_text": {
                "type": "string",
                "description": "Text of the question."
              },
              "regrade_option": {
                "type": "string",
                "enum": [
                  "__dap_unspecified__",
                  "available",
                  "unavailable",
                  "multiple_answers_question",
                  "multiple_choice_question",
                  "true_false_question",
                  "current_and_previous_correct",
                  "no_regrade",
                  "current_correct_only",
                  "full_credit",
                  "disabled"
                ],
                "description": "Denotes if regrading is available for the question. Possible values are `available` and `unavailable` for question types. Defaults to `available` for the allowed question types and NULL for the rest."
              },
              "correct_comments": {
                "type": "string",
                "description": "Comments to be displayed if the student answers the question correctly."
              },
              "incorrect_comments": {
                "type": "string",
                "description": "Comments to be displayed if the student answers the question incorrectly neutral_comments: Comments to be displayed regardless of how the student answers the question."
              },
              "text_after_answers": {
                "type": "string",
                "description": "(Used in *short_answer_question*, also known as *fill_in_the_blank*. Omitted for other question types) Text following the missing word."
              },
              "matching_answer_incorrect_matches": {
                "type": "string",
                "description": "(Used in *matching_question*. Omitted for other question types) List of distractors (incorrect answers), delimited by new lines, that will be seeded with all the *answer_match_right* values."
              },
              "points_possible": {
                "type": "number",
                "format": "float64",
                "description": "Maximum number of points that can be awarded for answering the question correctly."
              }
            },
            "additionalProperties": false,
            "title": "Type extracted from column `quiz_questions.question_data`."
          }
        },
        "additionalProperties": false,
        "required": ["id"],
        "title": "This table stores attributes of a question associated with a quiz."
      },
      "quiz_submissions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the quiz submission."
          },
          "submission_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the Submission the quiz submission represents."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the Student that made the quiz submission."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the quiz submission was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the quiz submission was last updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "complete",
              "pending_review",
              "preview",
              "settings_only",
              "untaken"
            ],
            "description": "Life-cycle state for the quiz submission."
          },
          "quiz_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the Quiz the quiz submission belongs to."
          },
          "quiz_version": {
            "type": "integer",
            "format": "int32",
            "description": "The version of the quiz this submission is related to."
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the student started the quiz submission."
          },
          "finished_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the student submitted the quiz submission."
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the quiz submission will be overdue, and be flagged as a late submission."
          },
          "score": {
            "type": "number",
            "format": "float64",
            "description": "The score of the quiz submission, if graded."
          },
          "attempt": {
            "type": "integer",
            "format": "int32",
            "description": "For quizzes that allow multiple attempts, this field specifies the quiz submission attempt number."
          },
          "submission_data": {
            "type": "string",
            "description": "Student answers to quiz, it shares JSON array of answers for only graded quiz submissions, it has NULL if quiz hasn't been graded yet. Contains the `question_id`, whether the question was answered correctly, the `answer_id` and answer text."
          },
          "kept_score": {
            "type": "number",
            "format": "float64",
            "description": "For quizzes that allow multiple attempts, this is the score that will be used, which might be the score of the latest, or the highest, quiz submission."
          },
          "fudge_points": {
            "type": "number",
            "format": "float64",
            "description": "Number of points the quiz submissions score was fudged by."
          },
          "quiz_points_possible": {
            "type": "number",
            "format": "float64",
            "description": "The amount of points possible for the quiz."
          },
          "extra_attempts": {
            "type": "integer",
            "format": "int32",
            "description": "Number of times the student was allowed to retake the quiz over the multiple-attempt limit."
          },
          "temporary_user_code": {
            "type": "string",
            "maxLength": 255,
            "description": "Construct for previewing a quiz."
          },
          "extra_time": {
            "type": "integer",
            "format": "int32",
            "description": "Amount of extra time allowed for the quiz submission, in minutes."
          },
          "manually_scored": {
            "type": "boolean",
            "description": "Indicates if this submission was graded by the teacher."
          },
          "manually_unlocked": {
            "type": "boolean",
            "description": "The student can take the quiz even if it's locked for everyone else."
          },
          "was_preview": {
            "type": "boolean",
            "description": "Indicates if this submission was created from a teacher preview."
          },
          "score_before_regrade": {
            "type": "number",
            "format": "float64",
            "description": "The original score of the quiz submission prior to any re-grading."
          },
          "has_seen_results": {
            "type": "boolean",
            "description": "Whether the student has viewed their results to the quiz."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "quiz_id",
          "fudge_points"
        ],
        "title": "Stores attributes for the last submitted quiz.",
        "description": "This tables persists one record per `user_id` and `quiz_id`."
      },
      "quizzes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "the ID of the quiz."
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the quiz was deleted."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the quiz was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the quiz was last updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "created",
              "edited",
              "unpublished",
              "deleted",
              "available"
            ],
            "description": "Denotes where the quiz is in the workflow. Possible values are `unpublished`, `published` and `deleted`. Defaults to `unpublished`."
          },
          "due_at": {
            "type": "string",
            "format": "date-time",
            "description": "when the quiz is due."
          },
          "unlock_at": {
            "type": "string",
            "format": "date-time",
            "description": "when to unlock the quiz."
          },
          "lock_at": {
            "type": "string",
            "format": "date-time",
            "description": "when to lock the quiz."
          },
          "points_possible": {
            "type": "number",
            "format": "float64",
            "description": "The total point value given to the quiz."
          },
          "assignment_group_id": {
            "type": "integer",
            "format": "int64",
            "description": "the ID of the quizzes assignment group:."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the context (account or course) this group belongs too. See also: context_type."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Course"],
            "description": "The type of the context object (typically `Course`)."
          },
          "assignment_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the assignment the quiz belongs to (NULL if not an assignment)."
          },
          "could_be_locked": {
            "type": "boolean",
            "description": "Dictates if the quiz can be locked or not. Possible values are `allow_locking` and `disallow_locking`. Defaults to `disallow_locking`."
          },
          "migration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "The unique identifier of the migration that imported the quiz."
          },
          "only_visible_to_overrides": {
            "type": "boolean",
            "description": "This indicates the quiz is not visible to everyone in the course, but only to those with an override."
          },
          "allowed_attempts": {
            "type": "integer",
            "format": "int32",
            "description": "how many times a student can take the quiz -1 = unlimited attempts."
          },
          "published_at": {
            "type": "string",
            "format": "date-time",
            "description": "whether the quiz has a published or unpublished draft state."
          },
          "shuffle_answers": {
            "type": "boolean",
            "description": "shuffle answers for students."
          },
          "show_correct_answers": {
            "type": "boolean",
            "description": "show which answers were correct when results are shown? only valid if `hide_results` is NULL."
          },
          "time_limit": {
            "type": "integer",
            "format": "int32",
            "description": "quiz time limit in minutes."
          },
          "scoring_policy": {
            "type": "string",
            "maxLength": 255,
            "description": "which quiz score to keep (only if `allowed_attempts` != 1) possible values: `keep_highest`, `keep_latest`."
          },
          "quiz_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "assignment",
              "practice_quiz",
              "graded_survey",
              "survey"
            ],
            "description": "type of quiz."
          },
          "access_code": {
            "type": "string",
            "maxLength": 255,
            "description": "access code to restrict quiz access."
          },
          "question_count": {
            "type": "integer",
            "format": "int32",
            "description": "the number of questions in the quiz."
          },
          "anonymous_submissions": {
            "type": "boolean",
            "description": "Dictates whether students are allowed to submit the quiz anonymously."
          },
          "hide_results": {
            "type": "string",
            "maxLength": 255,
            "description": "let students see their quiz responses? possible values: NULL, `always`, `until_after_last_attempt`."
          },
          "ip_filter": {
            "type": "string",
            "maxLength": 255,
            "description": "IP address or range that quiz access is limited to."
          },
          "require_lockdown_browser": {
            "type": "boolean",
            "description": "Dictates whether the browser has locked-down when the quiz is being taken. Possible values are `required` and `not_required`. Defaults to `not_required`."
          },
          "require_lockdown_browser_for_results": {
            "type": "boolean",
            "description": "Dictates whether the browser has to be locked-down to display the results. Is valid only if `hide_results` is set to `never` or `until_after_last_attempt` (for the results to be displayed after the last attempt). Possible values are `required` and `not_required`. Defaults to `not_required`."
          },
          "one_question_at_a_time": {
            "type": "boolean",
            "description": "show one question at a time?"
          },
          "cant_go_back": {
            "type": "boolean",
            "description": "lock questions after answering? only valid if one_question_at_a_time=true."
          },
          "show_correct_answers_at": {
            "type": "string",
            "format": "date-time",
            "description": "when should the correct answers be visible by students? only valid if show_correct_answers=true."
          },
          "hide_correct_answers_at": {
            "type": "string",
            "format": "date-time",
            "description": "prevent the students from seeing correct answers after the specified date has passed. only valid if show_correct_answers=true."
          },
          "require_lockdown_browser_monitor": {
            "type": "boolean",
            "description": "Dictates whether a browser lockdown monitor is required. Possible values are `required` and `not_required`. Defaults to `not_required`."
          },
          "one_time_results": {
            "type": "boolean",
            "description": "prevent the students from seeing their results more than once (right after they submit the quiz)."
          },
          "show_correct_answers_last_attempt": {
            "type": "boolean",
            "description": "restrict the show_correct_answers option above to apply only to the last submitted attempt of a quiz that allows multiple attempts. only valid if show_correct_answers=true and `allowed_attempts` > 1."
          },
          "unpublished_question_count": {
            "type": "integer",
            "format": "int32",
            "description": "The number of questions that have not been published."
          },
          "description": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "the description of the quiz."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "the title of the quiz."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "context_id",
          "context_type",
          "could_be_locked",
          "only_visible_to_overrides",
          "shuffle_answers",
          "show_correct_answers",
          "anonymous_submissions",
          "require_lockdown_browser",
          "require_lockdown_browser_for_results",
          "one_question_at_a_time",
          "cant_go_back",
          "require_lockdown_browser_monitor",
          "one_time_results",
          "show_correct_answers_last_attempt",
          "unpublished_question_count"
        ],
        "title": "Stores attributes for quizzes.",
        "description": "Quizzes can also be assignments (`assignment_id` field will have a value)."
      },
      "role_overrides": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "unique identifier of a role permission."
          },
          "permission": {
            "type": "string",
            "maxLength": 255,
            "description": "Permission assigned to a role, see the dictionary of permissions keyed by name in Canvas Roles API documentation."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of last update to this record."
          },
          "role_id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique ID of a role."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the folders's context (account, course, user)."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Account"],
            "description": "The type of the object represented by context_id."
          },
          "locked": {
            "type": "boolean",
            "description": "Whether the permission is locked by this role."
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the role has the permission."
          },
          "applies_to_self": {
            "type": "boolean",
            "description": "Whether the permission applies to the account this role is in. Only present if enabled is true."
          },
          "applies_to_descendants": {
            "type": "boolean",
            "description": "Whether the permission cascades down to sub accounts of the account this role is in. Only present if enabled is true."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "role_id",
          "context_id",
          "context_type",
          "locked",
          "enabled",
          "applies_to_self",
          "applies_to_descendants"
        ],
        "title": "A customization to the default permissions granted by a role."
      },
      "roles": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a user role record."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The name of the role."
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when this record was deleted. If the record has not been deleted the value will be NULL."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a roles record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a roles record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "active",
              "built_in",
              "deleted",
              "inactive"
            ],
            "description": "The state of the role."
          },
          "account_id": {
            "type": "integer",
            "format": "int64",
            "description": "Points to the account associated with the course. Could be Canvas root account or sub-account ID."
          },
          "base_role_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "AccountAdmin",
              "AccountMembership",
              "DesignerEnrollment",
              "NoPermissions",
              "ObserverEnrollment",
              "StudentEnrollment",
              "TaEnrollment",
              "TeacherEnrollment"
            ],
            "description": "The role type that is being used as a base for this role. For account-level roles, this is `AccountMembership`. For course-level roles, it is an enrollment type."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "created_at",
          "updated_at",
          "workflow_state",
          "base_role_type"
        ],
        "title": "A user is assigned a role which grants all the permissions associated with that role.",
        "description": "Roles have a few implicit permissions and a large set of default permissions, which can be customized with RoleOverrides."
      },
      "rubric_assessments": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a rubric assessment record."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a `rubric_assessment` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a `rubric_assessment` record was updated."
          },
          "rubric_association_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of a rubric association (which links the rubric to an assignment that uses the rubric)."
          },
          "artifact_id": {
            "type": "integer",
            "format": "int64",
            "description": "The submission or assignment identifier."
          },
          "artifact_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "Submission",
              "Assignment",
              "ModeratedGrading::ProvisionalGrade"
            ],
            "description": "The artifact type."
          },
          "hide_points": {
            "type": "boolean",
            "description": "Flag indicating a non-scoring rubric assessment."
          },
          "score": {
            "type": "number",
            "format": "float64",
            "description": "Score of the assessment."
          },
          "rubric_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a rubric."
          },
          "assessment_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "grading",
              "invited_assessment",
              "peer_review"
            ],
            "description": "Type of assessment."
          },
          "assessor_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user who assessed the submission."
          },
          "artifact_attempt": {
            "type": "integer",
            "format": "int32",
            "description": "The current number of attempts made on the object of the assessment."
          },
          "data": {
            "type": "string",
            "description": "Object containing all data related to assessment including score-break down and comments for each criterion."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "artifact_id",
          "artifact_type",
          "hide_points",
          "rubric_id",
          "assessment_type"
        ],
        "title": "Shows the data that a teacher has entered in to a rubric while grading a student."
      },
      "rubric_associations": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a rubric association record."
          },
          "purpose": {
            "type": "string",
            "maxLength": 255,
            "description": "Whether or not the association is for grading (and thus linked to an assignment) or if it's to indicate the rubric should appear in its context. Values will be grading or bookmark."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a `rubric_associations` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a `rubric_associations` record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "The current state of a rubric association record."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the context of `rubric_associations` (account, course)."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Course", "Account"],
            "description": "The type of the object represented by `context_id`."
          },
          "association_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of an associated object."
          },
          "association_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Account", "Course", "Assignment"],
            "description": "The type of object associated."
          },
          "hide_points": {
            "type": "boolean",
            "description": "Flag indication whether to hide points from rubric."
          },
          "rubric_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a rubric tied to this association."
          },
          "use_for_grading": {
            "type": "boolean",
            "description": "Whether or not the associated rubric is used for grade calculation."
          },
          "summary_data": {
            "type": "string",
            "description": "Object that stores reusable comments made during assessments."
          },
          "hide_score_total": {
            "type": "boolean",
            "description": "Flag indicating whether to hide the score total for assessment results."
          },
          "bookmarked": {
            "type": "boolean",
            "description": "Flag indication whether rubric is bookmarked."
          },
          "hide_outcome_results": {
            "type": "boolean",
            "description": "Flag indicating to not post Outcomes results to Learning Mastery Gradebook."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "The name of the object this rubric is associated with."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "purpose",
          "created_at",
          "updated_at",
          "workflow_state",
          "context_id",
          "context_type",
          "association_id",
          "association_type",
          "hide_points",
          "rubric_id",
          "bookmarked",
          "hide_outcome_results"
        ],
        "title": "Links a rubric to an assignment."
      },
      "rubrics": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a rubric record."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a rubrics record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a rubrics record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "Current state of row."
          },
          "points_possible": {
            "type": "number",
            "format": "float64",
            "description": "Total points possible for the rubric."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a rubric's context (account, course)."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Account", "Course"],
            "description": "The type of the object represented by context_id."
          },
          "migration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "An identifier used by the Blueprint system to match with the blueprint content."
          },
          "hide_score_total": {
            "type": "boolean",
            "description": "Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading."
          },
          "association_count": {
            "type": "integer",
            "format": "int32",
            "description": "The number of associated objects (accounts, courses, assignments)."
          },
          "free_form_criterion_comments": {
            "type": "boolean",
            "description": "Whether or not you can write custom comments in the ratings field for a rubric."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "The Rubric name or title."
          },
          "data": {
            "type": "string",
            "description": "The data containing all the information for the rubric including each criterion."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "context_id",
          "context_type",
          "association_count"
        ],
        "title": "List of criteria that describe how an assignment should be graded."
      },
      "score_statistics": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the statistics object."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date this statistics object was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date this statistics object was updated."
          },
          "assignment_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the assignment referred to by this object."
          },
          "mean": {
            "type": "number",
            "format": "float64",
            "description": "The mean score for all graded submissions on this assignment."
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "description": "The number of submissions that have been graded for this assignment, excluding excused submissions."
          },
          "minimum": {
            "type": "number",
            "format": "float64",
            "description": "The lowest score for any graded submission on this assignment."
          },
          "maximum": {
            "type": "number",
            "format": "float64",
            "description": "The highest score for any graded submission on this assignment."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "assignment_id",
          "mean",
          "count",
          "minimum",
          "maximum"
        ],
        "title": "This table stores aggregate statistics for scores on individual assignments."
      },
      "scores": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the score."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the score was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the score was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "Life-cycle state for the score."
          },
          "assignment_group_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the assignment group this score refers to, or NULL if it does not refer to a particular assignment group."
          },
          "enrollment_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the enrollment object this score refers to."
          },
          "grading_period_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the grading period covered by this score, or NULL if it does not apply to a specific grading period. If this is NULL, this is the overall score for the course."
          },
          "current_score": {
            "type": "number",
            "format": "float64",
            "description": "The current score for the assignments represented by this Score object."
          },
          "final_score": {
            "type": "number",
            "format": "float64",
            "description": "The final score for the assignments represented by this Score object, calculated by treating ungraded assignments as though they received zero points."
          },
          "course_score": {
            "type": "boolean",
            "description": "True if this score does not refer to a particular grading period or assignment group (in other words, if it represents the overall score for the course referred to in the enrollment)."
          },
          "unposted_current_score": {
            "type": "number",
            "format": "float64",
            "description": "The current score, with muted/unposted assignments included."
          },
          "unposted_final_score": {
            "type": "number",
            "format": "float64",
            "description": "The final score, with muted/unposted assignments included."
          },
          "current_points": {
            "type": "number",
            "format": "float64",
            "description": "The number of points earned over all assignments covered by this score, with dropped assignments excluded."
          },
          "unposted_current_points": {
            "type": "number",
            "format": "float64",
            "description": "The total number of points earned over all assignments covered by this score, including muted/unposted assignments."
          },
          "final_points": {
            "type": "number",
            "format": "float64",
            "description": "The number of points earned over all assignments covered by this score, with dropped assignments excluded and unposted submissions treated as 0."
          },
          "unposted_final_points": {
            "type": "number",
            "format": "float64",
            "description": "The number of points earned over all assignments covered by this score, with dropped assignments excluded and unposted submissions treated as 0, including muted/unposted assignments."
          },
          "override_score": {
            "type": "number",
            "format": "float64",
            "description": "The override score, if one has been set."
          }
        },
        "additionalProperties": false,
        "required": ["id", "workflow_state", "enrollment_id", "course_score"],
        "title": "This table stores assignment group and course grades for students enrolled in a course."
      },
      "submission_comments": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of this submission comment."
          },
          "comment": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The text of the submission comment."
          },
          "submission_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the associated submission."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date this comment was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date this comment was updated."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the course this comment is associated with."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Course"],
            "description": "The type of the object represented by `context_id`, typically `Course`."
          },
          "author_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the commenting user."
          },
          "media_comment_id": {
            "type": "string",
            "maxLength": 255,
            "description": "For media comments, the ID of the associated media object."
          },
          "media_comment_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "audio", "video"],
            "description": "For media comments, the type of the associated media object."
          },
          "attachment_ids": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "A comma-separated list of attachment IDs associated with this comment."
          },
          "attempt": {
            "type": "integer",
            "format": "int32",
            "description": "The particular attempt (on the associated submission) that this comment pertains to."
          },
          "hidden": {
            "type": "boolean",
            "description": "True if this comment is not visible to the owner of the submission."
          },
          "author_name": {
            "type": "string",
            "maxLength": 255,
            "description": "The name of the commenting user."
          },
          "group_comment_id": {
            "type": "string",
            "maxLength": 255,
            "description": "For group assignments, a value that is unique for all copies of this comment on submissions in the same group."
          },
          "assessment_request_id": {
            "type": "integer",
            "format": "int64",
            "description": "For peer-reviewed assignments, the ID of the Assessment Request this comment is associated with."
          },
          "anonymous": {
            "type": "boolean",
            "description": "True if this is a peer-reviewed comment for an assignment with anonymous peer reviews enabled. Does not apply to instructor comments for anonymously-graded assignments."
          },
          "teacher_only_comment": {
            "type": "boolean",
            "description": "Indicates whether the comment was provided by a teacher."
          },
          "provisional_grade_id": {
            "type": "integer",
            "format": "int64",
            "description": "For moderated assignments, the provisional grade this comment is tied to."
          },
          "draft": {
            "type": "boolean",
            "description": "True if this comment was saved as a draft."
          },
          "edited_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date this comment was last edited."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "context_type",
          "hidden",
          "teacher_only_comment",
          "draft"
        ],
        "title": "This table contains attributes related to the submission comments feature in Canvas."
      },
      "submission_versions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of this version object."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the submitter."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the course this submission belongs to."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Course"],
            "description": "The type of the context object (typically `Course`)."
          },
          "assignment_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the associated assignment."
          },
          "version_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the corresponding object in the versions table."
          }
        },
        "additionalProperties": false,
        "required": ["id", "context_type"],
        "title": "This table stores information describing previous versions of individual submission objects."
      },
      "submissions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Primary key of this record in the Canvas submissions dataset."
          },
          "attachment_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of an attachment belonging to this submission if `submission_type` is `online_url`. Generally superseded by `attachment_ids`."
          },
          "course_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the associated assignment's course."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the user who created the submission."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the submission was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the submission was last updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "graded",
              "pending_review",
              "submitted",
              "unsubmitted",
              "deleted"
            ],
            "description": "Life-cycle state for the submission."
          },
          "assignment_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the associated assignment."
          },
          "media_comment_id": {
            "type": "string",
            "maxLength": 255,
            "description": "For media comments, the ID of the media object associated with this comment, as a string."
          },
          "media_comment_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "audio",
              "audio/*",
              "video",
              "video/*"
            ],
            "description": "For media comments, the type of the media object associated with this comment."
          },
          "attachment_ids": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "A comma-delimited string representing the IDs of attachments belonging to this submission."
          },
          "posted_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date this submission was posted to the student, or NULL if it has not been posted."
          },
          "group_id": {
            "type": "integer",
            "format": "int64",
            "description": "Foreign key to the `groups` table."
          },
          "score": {
            "type": "number",
            "format": "float64",
            "description": "The raw score."
          },
          "attempt": {
            "type": "integer",
            "format": "int32",
            "description": "The number of attempts made including this one."
          },
          "submitted_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the assignment was submitted. Note: this date may be missing even though the assignment was submitted and graded (example scenarios: paper assignments, submissions through external tools, no submission required, etc.); additionally, if the student failed to submit an assignment by the due date, the assignment can be graded by the instructor (and will be missing a `submitted_at` date)."
          },
          "quiz_submission_id": {
            "type": "integer",
            "format": "int64",
            "description": "Foreign key to the `quiz_submissions` dataset (if `submission_type` is `online_quiz`). If this field contains a value it means that the assignment is a quiz."
          },
          "extra_attempts": {
            "type": "integer",
            "format": "int32",
            "description": "Extra submission attempts allowed for the given user and assignment."
          },
          "grading_period_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the grading period that this submission's assignment belongs to."
          },
          "grade": {
            "type": "string",
            "maxLength": 255,
            "description": "Letter grade mapped from the score by the grading scheme."
          },
          "submission_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "basic_lti_launch",
              "discussion_topic",
              "external_tool",
              "media_recording",
              "online_file_upload",
              "online_quiz",
              "online_text_entry",
              "online_upload",
              "online_url",
              "student_annotation"
            ],
            "description": "The type of submission."
          },
          "processed": {
            "type": "boolean",
            "description": "Valid only when there is a file/attachment associated with the submission. By default, this attribute is set to *false* when making the assignment submission. When a submission has a file/attachment associated with it, upon submitting the assignment a snapshot is saved and its value is set to *true*. Defaults to NULL."
          },
          "grade_matches_current_submission": {
            "type": "boolean",
            "description": "A boolean flag which is false if the student has re-submitted since the submission was last graded. Valid only when a score has been assigned to a submission. This is set to *false* if a student makes a new submission to an already graded assignment. This is done to indicate that the current grade given by the teacher is not for the most recent submission by the student. It is set to *true* if a score has been given and there is no new submission. Defaults to NULL."
          },
          "published_score": {
            "type": "number",
            "format": "float64",
            "description": "The raw score (identical to score)."
          },
          "published_grade": {
            "type": "string",
            "maxLength": 255,
            "description": "Valid only for a graded submission. The values are strings that reflect the grading type used. For example, a scoring method of `points` will show `4` if given a `4` out of `5`, and a scoring method of `letter grade` will show `B` for the same score (assuming a grading scale where 80-90% is a `B`). Defaults to NULL."
          },
          "graded_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the submission was graded."
          },
          "student_entered_score": {
            "type": "number",
            "format": "float64",
            "description": "A \"what-if\" score that the student has entered for this submission."
          },
          "grader_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the user who graded the submission. This will be NULL for submissions that haven't been graded yet. It will be a positive number if a real user has graded the submission and a negative number if the submission was graded by a process (e.g. Quiz auto-grader and auto-grading LTI tools). Specifically auto-graded quizzes set `grader_id` to the negative of the quiz ID. Submissions auto-graded by LTI tools set `grader_id` to the negative of the tool ID."
          },
          "submission_comments_count": {
            "type": "integer",
            "format": "int32",
            "description": "A count of the number of comments made on this submission."
          },
          "media_object_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the associated MediaObject."
          },
          "turnitin_data": {
            "type": "string",
            "description": "A YAML string representing plagiarism data associated with this submission."
          },
          "cached_due_date": {
            "type": "string",
            "format": "date-time",
            "description": "The de-normalized cached due date for this submission."
          },
          "excused": {
            "type": "boolean",
            "description": "Whether the assignment is excused. Excused assignments have no impact on a user's grade."
          },
          "graded_anonymously": {
            "type": "boolean",
            "description": "Denotes how the grading has been performed. Possible values are `graded_anonymously` and `not_graded_anonymously`."
          },
          "late_policy_status": {
            "type": "string",
            "maxLength": 16,
            "description": "The status of the submission in relation to the late policy. Only reflects statuses manually applied by a grader. Can be late, missing, none, or NULL."
          },
          "points_deducted": {
            "type": "number",
            "multipleOf": 0.01,
            "exclusiveMinimum": -10000,
            "exclusiveMaximum": 10000,
            "description": "The amount of points automatically deducted from the score by the missing/late policy for a late or missing assignment."
          },
          "seconds_late_override": {
            "type": "integer",
            "format": "int64",
            "description": "For late submissions, the amount of time (in seconds) the submission is late by."
          },
          "lti_user_id": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The LTI context ID of the submitter."
          },
          "anonymous_id": {
            "type": "string",
            "maxLength": 5,
            "description": "A unique short ID identifying this submission without reference to the owning user."
          },
          "last_comment_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date of the last non-draft comment on this submission by a user other than the submitter."
          },
          "cached_quiz_lti": {
            "type": "boolean",
            "description": "True if the associated assignment is a Quizzes.Next assignment."
          },
          "cached_tardiness": {
            "type": "string",
            "maxLength": 16,
            "description": "The status of the submission in relation to the late policy, including automatically- applied statuses. Can be `late`, `missing` or NULL."
          },
          "resource_link_lookup_uuid": {
            "type": "string",
            "format": "uuid",
            "description": "When the submission is from an LTI tool, the resource link lookup ID is assigned to the submission in order to recover the custom parameters."
          },
          "redo_request": {
            "type": "boolean",
            "description": "True if the assignment has been reassigned to the student for resubmission."
          },
          "body": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The content of the submission, if it was submitted directly in a text field."
          },
          "url": {
            "type": "string",
            "maxLength": 255,
            "description": "URL content for the submission."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "course_id",
          "user_id",
          "workflow_state",
          "assignment_id",
          "cached_quiz_lti",
          "redo_request"
        ],
        "title": "This table stores submission records for an assignment."
      },
      "user_account_associations": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of a record."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The foreign key for the users dataset."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the user association with an account was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp that shows the last time the record was updated."
          },
          "account_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the account associated with this user."
          },
          "depth": {
            "type": "integer",
            "format": "int32",
            "description": "How \"close\" a user is related to an account. 1 if you have a pseudonym or enrollment in a course in that account. 2 if it's the parent account of a course you're enrolled in, etc."
          }
        },
        "additionalProperties": false,
        "required": ["id", "user_id", "created_at", "updated_at", "account_id"],
        "title": "Stores data about user and account relationship, how \"close\" a user is related to an account."
      },
      "user_notes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a user journal record."
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when this record was deleted. If the record has not been deleted the value will be NULL."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `user_notes` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when a `user_notes` record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": ["__dap_unspecified__", "active", "deleted"],
            "description": "the state of the entry record."
          },
          "note": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Faculty Journal entry text."
          },
          "created_by_id": {
            "type": "integer",
            "format": "int64",
            "description": "user ID the entry was created by."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "Faculty Journal entry title."
          }
        },
        "additionalProperties": false,
        "required": ["id", "created_at", "updated_at", "workflow_state"],
        "title": "Stores the data for the Faculty Journal feature."
      },
      "users": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the user."
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp that shows when a user was deleted at."
          },
          "storage_quota": {
            "type": "integer",
            "format": "int64",
            "description": "The storage quota for the users."
          },
          "lti_context_id": {
            "type": "string",
            "maxLength": 255,
            "description": "UUID of the Canvas context in LTI standard. secondary ID for this context, could be used in API to identify resource as well."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was created in the Canvas system."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp that shows the last time the record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "creation_pending",
              "deleted",
              "pending_approval",
              "pre_registered",
              "registered"
            ],
            "description": "Workflow status indicating the status of the user."
          },
          "sortable_name": {
            "type": "string",
            "maxLength": 255,
            "description": "The name of the user that is should be used for sorting groups of users, such as in the gradebook. Format: \"lastname, firstname\"."
          },
          "avatar_image_url": {
            "type": "string",
            "maxLength": 255,
            "description": "If avatars are enabled, this field will be included and contain a url to retrieve the user's avatar."
          },
          "avatar_image_source": {
            "type": "string",
            "maxLength": 255,
            "description": "The source of a user avatar image."
          },
          "avatar_image_updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp that shows the last time the avatar image was updated."
          },
          "short_name": {
            "type": "string",
            "maxLength": 255,
            "description": "A short name the user has selected, for use in conversations or other less formal places through the site."
          },
          "last_logged_out": {
            "type": "string",
            "format": "date-time",
            "description": "The last time the user explicitly logged out of Canvas."
          },
          "pronouns": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "stores a list of preferred gender pronouns i.e.: she/her; he/him; they/them."
          },
          "merged_into_user_id": {
            "type": "integer",
            "format": "int64",
            "description": "If this user was merged into another one, this is the foreign key to that other user."
          },
          "locale": {
            "type": "string",
            "maxLength": 255,
            "description": "The user's locale. This is an optional field and may not be entered by the user."
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "The name of the user (\"firstname lastname\" format)."
          },
          "time_zone": {
            "type": "string",
            "maxLength": 255,
            "description": "This field is only returned in certain API calls, and will return the IANA time zone name of the user's preferred timezone."
          },
          "uuid": {
            "type": "string",
            "maxLength": 255,
            "description": "UUID of the user."
          },
          "school_name": {
            "type": "string",
            "maxLength": 255,
            "description": "Used in Trial Versions of Canvas, the school the user is associated with."
          },
          "school_position": {
            "type": "string",
            "maxLength": 255,
            "description": "Used in Trial Versions of Canvas, the position the user has at the school. E.g. Admin"
          },
          "public": {
            "type": "boolean",
            "description": "Used in Trial Versions of Canvas, the type of school the user is associated with."
          }
        },
        "additionalProperties": false,
        "required": ["id", "created_at", "updated_at", "workflow_state"],
        "title": "This table stores attributes for users."
      },
      "web_conference_participants": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the web conference participant."
          },
          "web_conference_id": {
            "type": "integer",
            "format": "int64",
            "description": "Foreign key to the `web_conferences` page."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the user who is the conference participant."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when record was updated."
          },
          "participation_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "attendee", "initiator", "invitee"],
            "description": "Type of participation e.g.: invitee or attendee."
          }
        },
        "additionalProperties": false,
        "required": ["id", "created_at", "updated_at"],
        "title": "Links users to conferences they are invited to join."
      },
      "web_conferences": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the conference."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the user that created the conference."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when record was updated."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of this conference's context."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Account", "Course", "Group"],
            "description": "The type of this conference's context."
          },
          "start_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date the conference started at, NULL if it hasn't started."
          },
          "end_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date that the conference ended at, NULL if it hasn't ended."
          },
          "context_code": {
            "type": "string",
            "maxLength": 255,
            "description": "A string identifying the context."
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which this conference actually started at, NULL if it hasn't started."
          },
          "user_ids": {
            "type": "string",
            "maxLength": 255,
            "description": "Array of user ids that are participants in the conference."
          },
          "ended_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which this conference actually ended, NULL if it hasn't ended."
          },
          "recording_ready": {
            "type": "boolean",
            "description": "Whether the conference's recording has been processed."
          },
          "conference_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "AdobeConnect",
              "BigBlueButton",
              "CiscoWebex",
              "DimDim",
              "Wimba",
              "Wiziq",
              "dimdim"
            ],
            "description": "The type of conference."
          },
          "conference_key": {
            "type": "string",
            "maxLength": 255,
            "description": "The 3rd party's ID for the conference."
          },
          "description": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The description for the conference."
          },
          "duration": {
            "type": "number",
            "format": "float64",
            "description": "The expected duration the conference is supposed to last."
          },
          "settings": {
            "type": "string",
            "description": "Settings for the given conference."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "The title of the conference."
          },
          "uuid": {
            "type": "string",
            "maxLength": 255,
            "description": "A unique ID used for integrations."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "user_id",
          "created_at",
          "updated_at",
          "context_id",
          "context_type",
          "conference_type",
          "title"
        ],
        "title": "Data model for Conferences in Canvas.",
        "description": "Integrates with external conferencing solutions like BigBlueButton."
      },
      "wiki_pages": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a wiki page record."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a `wiki_pages` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a `wiki_pages` record was updated."
          },
          "workflow_state": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "active",
              "deleted",
              "post_delayed",
              "unpublished"
            ],
            "description": "The state of a wiki page."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the context of `wiki_pages` (account, course, user)."
          },
          "context_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "Course", "Group"],
            "description": "The type of the object represented by `context_id`."
          },
          "assignment_id": {
            "type": "integer",
            "format": "int64",
            "description": "Assignment identifier when using `wiki_page` assignment type for an assignment."
          },
          "migration_id": {
            "type": "string",
            "maxLength": 255,
            "description": "An identifier used by the Blueprint system to match with the blueprint content."
          },
          "wiki_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of an associated wiki record."
          },
          "old_assignment_id": {
            "type": "integer",
            "format": "int64",
            "description": "An old assignment identifier."
          },
          "todo_date": {
            "type": "string",
            "format": "date-time",
            "description": "Date to set when setting this page as student to-do."
          },
          "editing_roles": {
            "type": "string",
            "maxLength": 255,
            "description": "CSV list of the roles that are allowed to edit this page. Possible values are `teachers`, `students`, `public`."
          },
          "revised_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when page was last revised."
          },
          "body": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The body of the wiki page record (includes html tags)."
          },
          "url": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The HTML body of the page."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "The name of the wiki page record."
          },
          "protected_editing": {
            "type": "boolean",
            "description": "Editing protection for the wiki page. It is false by default."
          },
          "could_be_locked": {
            "type": "boolean",
            "description": "True if the wiki page can be locked. This prevents it from being visible to others until ready."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "created_at",
          "updated_at",
          "workflow_state",
          "context_id",
          "context_type",
          "wiki_id",
          "protected_editing"
        ],
        "title": "Stores text data that is linked to a wiki and a course.",
        "description": "Also known as Pages. Pages store content and educational resources that are part of a course or group but don't necessarily belong in\nan assignment. Pages can include text, video, and links to files and other course or group content. Pages can also be linked to other\npages. They can also be used as a collaboration tool for course or group wikis where only specific users can have access. Canvas keeps\nthe entire history of the page to account for changes over time."
      },
      "wikis": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of a wiki record."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a wikis record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp showing when a wikis record was updated."
          },
          "front_page_url": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "Captures the URL of the front page (wiki page) record if one exists."
          },
          "has_no_front_page": {
            "type": "boolean",
            "description": "Flag to determine if a course's wiki has a front page or not. No front page == true."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "description": "The title of the wiki."
          }
        },
        "additionalProperties": false,
        "required": ["id", "created_at", "updated_at"],
        "title": "Links a course to its wiki pages.",
        "description": "There's only ever one per course, it is not highly used any longer, Wiki pages object is linked directly to a course now."
      },
      "abstract_courses": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "appointment_groups": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "assessment_requests": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "asset_user_accesses": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for a user resource access record."
          },
          "display_name": {
            "oneOf": [
              { "type": "string", "const": "__dap_oversized_truncated__" },
              { "type": "string" }
            ],
            "description": "The user configured name of the accessed asset."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of a user."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when an `asset_user_accesses` record was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when an `asset_user_accesses` record was updated."
          },
          "asset_code": {
            "type": "string",
            "maxLength": 255,
            "description": "It is used to specify the *asset* or the idea of being accessed. For example, `attachment_{id}` or `roster:course_{id}`."
          },
          "asset_group_code": {
            "type": "string",
            "maxLength": 255,
            "description": "asset_group_code is for the group. For example: calendar_event_{id}."
          },
          "context_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier for the asset_user_accesses's context (account, course, user)."
          },
          "context_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "Account",
              "AssessmentQuestion",
              "Course",
              "Group",
              "User"
            ],
            "description": "The type of the object represented by `context_id`."
          },
          "last_access": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of last access for a particular asset."
          },
          "asset_category": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "announcements",
              "assignments",
              "calendar_feed",
              "collaborations",
              "conferences",
              "files",
              "grades",
              "home",
              "modules",
              "outcomes",
              "pages",
              "quizzes",
              "roster",
              "speed_grader",
              "syllabus",
              "topics",
              "calendar",
              "external_tools",
              "wiki",
              "external_urls"
            ],
            "description": "Category of asset accessed."
          },
          "view_score": {
            "type": "number",
            "format": "float64",
            "description": "The number of times this asset has been viewed by this user."
          },
          "participate_score": {
            "type": "number",
            "format": "float64",
            "description": "The number of times this asset has been interacted with by this user."
          },
          "action_level": {
            "type": "string",
            "enum": ["__dap_unspecified__", "view", "participate"],
            "description": "If this access was viewed or participated with."
          },
          "membership_type": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "TeacherEnrollment",
              "AccountUser",
              "Other",
              "User",
              "NilClass",
              "TaEnrollment",
              "DesignerEnrollment",
              "ObserverEnrollment",
              "GroupMembership",
              "StudentEnrollment",
              "StudentViewEnrollment"
            ],
            "description": "The role type of user/enrollment accessing this asset."
          }
        },
        "additionalProperties": false,
        "required": ["id", "context_type"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.",
        "description": "Supports canvas page views feature.\n\nLogs view and participation counts for a user + asset combination. Contains information on users' usage of assets (assignments, files,\netc.)."
      },
      "authentication_providers": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "cloned_items": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "content_exports": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "eportfolios": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "epub_exports": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "external_feeds": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "gradebook_uploads": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "group_and_membership_importers": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "live_assessments_assessments": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "live_assessments_submissions": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "lti_message_handlers": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "media_objects": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "moderated_grading_provisional_grades": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "outcome_imports": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "purgatories": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "quiz_statistics": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "sis_batches": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "usage_rights": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "versions": {
        "type": "object",
        "properties": { "id": { "type": "integer", "format": "int64" } },
        "additionalProperties": false,
        "required": ["id"],
        "title": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship."
      },
      "assignment_groups__rules": {
        "type": "object",
        "properties": {
          "drop_highest": {
            "type": "integer",
            "format": "int32",
            "description": "Number of highest scores to be dropped for each user."
          },
          "drop_lowest": {
            "type": "integer",
            "format": "int32",
            "description": "Number of lowest scores to be dropped for each user."
          },
          "never_drop": {
            "type": "array",
            "items": { "type": "integer", "format": "int32" },
            "description": "Assignment IDs that should never be dropped. E.g.: [33, 17, 24]."
          }
        },
        "additionalProperties": false,
        "required": ["never_drop"],
        "title": "Type extracted from column `assignment_groups.rules`."
      },
      "assignments__turnitin_settings": {
        "type": "object",
        "properties": {
          "originality_report_visibility": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "immediate",
              "after_grading",
              "after_due_date",
              "never"
            ],
            "description": "Allows to set the timeframe when the report will become visible."
          },
          "exclude_small_matches_type": {
            "type": "string",
            "enum": ["__dap_unspecified__", "off", "words", "percent"],
            "description": "Exclude small sources from the Similarity Report by a set number of words or percentage."
          },
          "exclude_small_matches_value": {
            "type": "integer",
            "format": "int32",
            "description": "If exclude_small_matches_type is set to percent or number then the value will be will be a number (of words or a percent)."
          },
          "s_paper_check": {
            "type": "boolean",
            "description": "If set to TRUE, will allow to compare submission against other students' papers."
          },
          "s_view_report": {
            "type": "boolean",
            "description": "If set to TRUE students will be able to access their originality report."
          },
          "internet_check": {
            "type": "boolean",
            "description": "Select the content you'd like to compare papers against: current and archived website content."
          },
          "journal_check": {
            "type": "boolean",
            "description": "Select the content you'd like to compare papers against: periodicals, journals and publications."
          },
          "exclude_biblio": {
            "type": "boolean",
            "description": "Selecting this option will exclude text appearing in the bibliography, works cited, or references sections of student papers from being checked for matches when generating Similarity Reports."
          },
          "exclude_quoted": {
            "type": "boolean",
            "description": "Selecting this option will exclude text appearing in the bibliography, works cited, or references sections of student papers from being checked for matches when generating Similarity Reports."
          },
          "submit_papers_to": {
            "type": "boolean",
            "description": "If set to FALSE, a similarity report will still be generated for paper submissions but students' papers will not be stored in the Turnitin standard paper repository or the institution's paper repository for future comparison."
          }
        },
        "additionalProperties": false,
        "title": "Type extracted from column `assignments.turnitin_settings`."
      },
      "context_external_tools__settings": {
        "type": "object",
        "properties": {
          "course_home_sub_navigation": {
            "type": "string",
            "description": "Course home sub navigation placement type."
          },
          "course_settings_sub_navigation": {
            "type": "string",
            "description": "Course settings sub navigation placement type."
          },
          "custom_fields": {
            "type": "string",
            "description": "Custom parameters provider request to share on every single LTI launch, each placement column might have its own set of custom_fields."
          },
          "discussion_menu": {
            "type": "string",
            "description": "Discussion menu placement type."
          },
          "discussion_topic_index_menu": {
            "type": "string",
            "description": "Discussion topic index menu placement type."
          },
          "discussion_topic_menu": {
            "type": "string",
            "description": "Discussion topic menu placement type."
          },
          "editor_button": {
            "type": "string",
            "description": "RCE placement type."
          },
          "enabled": {
            "type": "string",
            "description": "Controls if the tool is disabled for user to click on, typically tool gets removed altogether but sometimes provider uses this setting to just disable it in the UI."
          },
          "file_index_menu": {
            "type": "string",
            "description": "File index menu placement type."
          },
          "file_menu": {
            "type": "string",
            "description": "File menu placement type."
          },
          "global_navigation": {
            "type": "string",
            "description": "Global navigation placement type."
          },
          "grade_passback": {
            "type": "string",
            "description": "Grade pass-back placement type."
          },
          "homework_selection": {
            "type": "string",
            "description": "Homework selection placement type."
          },
          "homework_submission": {
            "type": "string",
            "description": "Homework submission placement type."
          },
          "launch_presentation_document_target": {
            "type": "string",
            "description": "Tells us if it should be opened in another window."
          },
          "link_selection": {
            "type": "string",
            "description": "Link selection placement type."
          },
          "migration_selection": {
            "type": "string",
            "description": "Migration selection placement type."
          },
          "module_group_menu": {
            "type": "string",
            "description": "Module group menu placement type."
          },
          "module_index_menu": {
            "type": "string",
            "description": "Module index menu placement type."
          },
          "account_navigation": {
            "type": "string",
            "description": "account navigation placement type."
          },
          "assignment_group_menu": {
            "type": "string",
            "description": "Assignment group menu placement type."
          },
          "assignment_index_menu": {
            "type": "string",
            "description": "Assignment index menu placement type."
          },
          "assignment_menu": {
            "type": "string",
            "description": "Assignment menu placement type."
          },
          "assignment_selection": {
            "type": "string",
            "description": "Assignment selection placement type."
          },
          "canvas_caliper_url": {
            "type": "string",
            "description": "URL to caliper endpoint if supported by the tool."
          },
          "collaboration": {
            "type": "string",
            "description": "Collaboration placement type."
          },
          "content_migration": {
            "type": "string",
            "description": "Content migration placement type."
          },
          "course_assignments_menu": {
            "type": "string",
            "description": "Course assignments menu placement type."
          },
          "course_navigation": {
            "type": "string",
            "description": "Course navigation placement type."
          },
          "module_menu": {
            "type": "string",
            "description": "Module menu placement type."
          },
          "post_grades": {
            "type": "string",
            "description": "Post grades placement type."
          },
          "quiz_index_menu": {
            "type": "string",
            "description": "Quiz index menu placement type."
          },
          "quiz_menu": {
            "type": "string",
            "description": "Quiz menu placement type."
          },
          "similarity_detection": {
            "type": "string",
            "description": "Plagiarism platform placement."
          },
          "student_context_card": {
            "type": "string",
            "description": "Student context card placement type."
          },
          "text": {
            "type": "string",
            "description": "Identifies the name of the tool, default what the user can see if no label is set."
          },
          "tool_configuration": {
            "type": "string",
            "description": "Identifies the LTI tool configuration dataset."
          },
          "use_1_3": {
            "type": "string",
            "description": "LTI 1.3 compliant tool."
          },
          "user_navigation": {
            "type": "string",
            "description": "User navigation placement type."
          },
          "visibility": {
            "type": "string",
            "description": "Controls if it is an admin only tool, takes values of `admin` and `members`."
          },
          "wiki_index_menu": {
            "type": "string",
            "description": "Wiki index menu placement type."
          },
          "wiki_page_menu": {
            "type": "string",
            "description": "Wiki page menu placement type."
          }
        },
        "additionalProperties": false,
        "title": "Type extracted from column `context_external_tools.settings`."
      },
      "courses__settings": {
        "type": "object",
        "properties": {
          "allow_student_discussion_editing": {
            "type": "string",
            "description": "Let students edit or delete their own discussion posts."
          },
          "allow_student_discussion_topics": {
            "type": "string",
            "description": "Let students create discussion topics."
          },
          "course_format": {
            "type": "string",
            "description": "Format of a course, values include `blended`, `on_campus`, `online`."
          },
          "filter_speed_grader_by_student_group": { "type": "string" },
          "hide_distribution_graphs": {
            "type": "string",
            "description": "Hide grade distribution graphs from students."
          },
          "hide_final_grade": {
            "type": "string",
            "description": "Hide totals in student grades summary."
          },
          "is_public_to_auth_users": {
            "type": "string",
            "description": "Set to true if course is public only to authenticated users."
          },
          "lock_all_announcements": {
            "type": "string",
            "description": "Disable comments on announcements."
          },
          "public_syllabus": {
            "type": "string",
            "description": "Set to true to make the course syllabus public. Values include true, false."
          },
          "public_syllabus_to_auth": {
            "type": "string",
            "description": "Set to true to make the course syllabus public for authenticated users."
          },
          "restrict_student_future_view": {
            "type": "string",
            "description": "Restrict students from viewing courses before start date."
          },
          "restrict_student_past_view": {
            "type": "string",
            "description": "Restrict students from viewing courses after end date."
          },
          "syllabus_updated_at": {
            "type": "string",
            "description": "Timestamp when syllabus was updated in a course."
          },
          "usage_rights_required": {
            "type": "string",
            "description": "Copyright and license information must be provided for files before they are published."
          },
          "allow_student_forum_attachments": {
            "type": "string",
            "description": "Whether students can attach files to discussions."
          }
        },
        "additionalProperties": false,
        "title": "Type extracted from column `courses.settings`."
      },
      "quiz_questions__question_data": {
        "type": "object",
        "properties": {
          "neutral_comments": {
            "type": "string",
            "description": "Comments to be displayed regardless of how the student answers the question."
          },
          "answers": {
            "type": "string",
            "description": "Collection of possible answers."
          },
          "name": { "type": "string", "description": "Name of the question." },
          "question_type": {
            "type": "string",
            "description": "Denotes the type of the question."
          },
          "question_text": {
            "type": "string",
            "description": "Text of the question."
          },
          "regrade_option": {
            "type": "string",
            "enum": [
              "__dap_unspecified__",
              "available",
              "unavailable",
              "multiple_answers_question",
              "multiple_choice_question",
              "true_false_question",
              "current_and_previous_correct",
              "no_regrade",
              "current_correct_only",
              "full_credit",
              "disabled"
            ],
            "description": "Denotes if regrading is available for the question. Possible values are `available` and `unavailable` for question types. Defaults to `available` for the allowed question types and NULL for the rest."
          },
          "correct_comments": {
            "type": "string",
            "description": "Comments to be displayed if the student answers the question correctly."
          },
          "incorrect_comments": {
            "type": "string",
            "description": "Comments to be displayed if the student answers the question incorrectly neutral_comments: Comments to be displayed regardless of how the student answers the question."
          },
          "text_after_answers": {
            "type": "string",
            "description": "(Used in *short_answer_question*, also known as *fill_in_the_blank*. Omitted for other question types) Text following the missing word."
          },
          "matching_answer_incorrect_matches": {
            "type": "string",
            "description": "(Used in *matching_question*. Omitted for other question types) List of distractors (incorrect answers), delimited by new lines, that will be seeded with all the *answer_match_right* values."
          },
          "points_possible": {
            "type": "number",
            "format": "float64",
            "description": "Maximum number of points that can be awarded for answering the question correctly."
          }
        },
        "additionalProperties": false,
        "title": "Type extracted from column `quiz_questions.question_data`."
      },
      "user_agents": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The unique identifier for a user agent."
          },
          "http_user_agent": {
            "type": "string",
            "description": "The user agent string sent by the HTTP client."
          }
        },
        "additionalProperties": false,
        "required": ["id"],
        "title": "User agent strings for the `web_logs` table."
      },
      "IPv4Address": {
        "type": "string",
        "format": "ipv4",
        "title": "Represent and manipulate single IPv4 Addresses.",
        "description": "IPv4 address, according to dotted-quad ABNF syntax as defined in RFC 2673, section 3.2.",
        "examples": ["192.0.2.0", "198.51.100.1", "203.0.113.255"]
      },
      "IPv6Address": {
        "type": "string",
        "format": "ipv6",
        "title": "Represent and manipulate single IPv6 Addresses.",
        "description": "IPv6 address, as defined in RFC 2373, section 2.2.",
        "examples": [
          "FEDC:BA98:7654:3210:FEDC:BA98:7654:3210",
          "1080:0:0:0:8:800:200C:417A",
          "1080::8:800:200C:417A",
          "FF01::101",
          "::1"
        ]
      },
      "web_logs": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for a logged web request."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the request was made in UTC."
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique ID of the user that made the request."
          },
          "real_user_id": {
            "type": "integer",
            "format": "int64",
            "description": "If the request was processed by one user masquerading as another, then this column contains the real user ID of the user."
          },
          "course_id": {
            "type": "integer",
            "format": "int64",
            "description": "Course that owned the request."
          },
          "quiz_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the quiz if the request is for a quiz."
          },
          "discussion_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the discussion if the request is for a discussion."
          },
          "conversation_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the conversation if the request is for a conversation."
          },
          "assignment_id": {
            "type": "integer",
            "format": "int64",
            "description": "Identifies the assignment if the request is for an assignment."
          },
          "url": {
            "type": "string",
            "description": "The path and the query string components of the requested URL."
          },
          "user_agent_id": {
            "type": "integer",
            "format": "int32",
            "description": "Foreign key linking to the user_agent table. User agent, as the header received from the user's browser/client software, will be available in the user_agent table once exposed."
          },
          "http_method": {
            "type": "string",
            "enum": [
              "CONNECT",
              "DELETE",
              "GET",
              "HEAD",
              "OPTIONS",
              "PATCH",
              "POST",
              "PUT",
              "TRACE",
              "SEARCH",
              "PROPFIND",
              "LOCK",
              "REPORT",
              "PURGE",
              "MKCOL",
              "PROPPATCH",
              "CHECKOUT",
              "UNLOCK"
            ],
            "description": "HTTP method/verb (GET, POST, PUT, etc.) that was sent with the request."
          },
          "http_status": {
            "type": "integer",
            "enum": [
              100, 101, 102, 103, 200, 201, 202, 203, 204, 205, 206, 207, 208,
              226, 300, 301, 302, 303, 304, 305, 307, 308, 400, 401, 402, 403,
              404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416,
              417, 418, 421, 422, 423, 424, 425, 426, 428, 429, 431, 451, 500,
              501, 502, 503, 504, 505, 506, 507, 508, 510, 511
            ],
            "description": "HTTP status code of the request (e.g. 200 OK)."
          },
          "http_version": {
            "type": "string",
            "enum": ["0.9", "1.0", "1.1", "2.0"],
            "description": "HTTP protocol version (e.g. HTTP/2.0)."
          },
          "remote_ip": {
            "oneOf": [
              { "$ref": "#/components/schemas/IPv4Address" },
              { "$ref": "#/components/schemas/IPv6Address" }
            ],
            "description": "IP (IPv4 or IPv6) address that was recorded for the request."
          },
          "interaction_micros": {
            "type": "integer",
            "format": "int32",
            "description": "Total time required to service the request in microseconds."
          },
          "web_application_controller": {
            "type": "string",
            "enum": [
              "account_calendars_api",
              "account_domain_lookups",
              "account_grading_settings",
              "account_notifications",
              "account_reports",
              "accounts",
              "admins",
              "alerts",
              "analytics",
              "analytics_api",
              "announcements",
              "announcements_api",
              "anonymous_provisional_grades",
              "anonymous_submissions",
              "api/v1/provisions",
              "app_center",
              "appointment_groups",
              "assessment_questions",
              "assignment_extensions",
              "assignment_groups",
              "assignment_groups_api",
              "assignment_overrides",
              "assignments",
              "assignments_api",
              "authentication_audit_api",
              "authentication_providers",
              "blackout_dates",
              "bookmarks/bookmarks",
              "brand_configs",
              "brand_configs_api",
              "calendar_events",
              "calendar_events_api",
              "calendars",
              "canvadoc_sessions",
              "catalog_accounts",
              "collaborations",
              "comm_messages_api",
              "communication_channels",
              "conditional_release/rules",
              "conditional_release/stats",
              "conferences",
              "content_exports",
              "content_exports_api",
              "content_imports",
              "content_migrations",
              "content_shares",
              "context",
              "context_module_items_api",
              "context_modules",
              "context_modules_api",
              "conversations",
              "course_audit_api",
              "course_nicknames",
              "course_paces",
              "course_pacing/pace_contexts_api",
              "courses",
              "crocodoc_sessions",
              "csp_settings",
              "custom_data",
              "custom_gradebook_column_data_api",
              "custom_gradebook_columns_api",
              "demo_snapshots",
              "developer_key_account_bindings",
              "developer_keys",
              "disable_post_to_sis_api",
              "discussion_entries",
              "discussion_topics",
              "discussion_topics_api",
              "docviewer_audit_events",
              "enrollments_api",
              "eportfolio_categories",
              "eportfolio_entries",
              "eportfolios",
              "eportfolios_api",
              "epub_exports",
              "equation_images",
              "errors",
              "external_content",
              "external_feeds",
              "external_tools",
              "favorites",
              "feature_flags",
              "file_previews",
              "files",
              "folders",
              "grade_change_audit_api",
              "gradebook_csvs",
              "gradebook_filters_api",
              "gradebook_history_api",
              "gradebook_settings",
              "gradebook_uploads",
              "gradebooks",
              "grading_period_sets",
              "grading_periods",
              "grading_schemes_json",
              "grading_standards",
              "grading_standards_api",
              "graphql",
              "group_categories",
              "group_memberships",
              "groups",
              "history",
              "immersive_reader",
              "impact",
              "info",
              "inst_access_tokens",
              "internal_analytics_api",
              "internal_analytics_dashboards_api",
              "jobs",
              "jobs_v2",
              "jwts",
              "late_policy",
              "legal_information",
              "live_assessments/assessments",
              "live_assessments/results",
              "login",
              "login/apple",
              "login/canvas",
              "login/cas",
              "login/clever",
              "login/facebook",
              "login/github",
              "login/google",
              "login/ldap",
              "login/linkedin",
              "login/microsoft",
              "login/oauth",
              "login/oauth2",
              "login/openid_connect",
              "login/otp",
              "login_redirect",
              "login/saml",
              "login/saml_idp_discovery",
              "login/trust",
              "login/twitter",
              "lti_api",
              "lti/data_services",
              "lti/feature_flags",
              "lti/ims/authentication",
              "lti/ims/authorization",
              "lti/ims/deep_linking",
              "lti/ims/line_items",
              "lti/ims/names_and_roles",
              "lti/ims/results",
              "lti/ims/scores",
              "lti/ims/tool_consumer_profile",
              "lti/ims/tool_proxy",
              "lti/ims/tool_setting",
              "lti/lti_apps",
              "lti/membership_service",
              "lti/message",
              "lti/originality_reports_api",
              "lti/plagiarism_assignments_api",
              "lti/platform_storage",
              "lti/submissions_api",
              "lti/subscriptions_api",
              "lti/token",
              "lti/tool_configurations_api",
              "lti/tool_proxy",
              "lti/users_api",
              "master_courses/master_templates",
              "media_objects",
              "media_tracks",
              "messages",
              "microsoft_sync/groups",
              "migration_issues",
              "moderation_set",
              "mobile_verify",
              "new_quizzes/quiz_items_api",
              "new_quizzes/quizzes_api",
              "notification_preferences",
              "oauth_proxy",
              "oauth2_provider",
              "observer_alert_thresholds_api",
              "observer_alerts_api",
              "observer_pairing_codes_api",
              "one_time_passwords",
              "outcome_groups_api",
              "outcome_imports_api",
              "outcome_proficiency_api",
              "outcome_results",
              "outcomes",
              "outcomes_academic_benchmark_import_api",
              "outcomes_api",
              "page_comments",
              "page_views",
              "peer_reviews_api",
              "phone_home",
              "planner",
              "planner_notes",
              "planner_overrides",
              "plugins",
              "polling/poll_choices",
              "polling/poll_sessions",
              "polling/poll_submissions",
              "polling/polls",
              "profile",
              "progress",
              "provisional_grades",
              "pseudonyms",
              "question_banks",
              "quizzes/course_quiz_extensions",
              "quizzes_next/quizzes_api",
              "quizzes/outstanding_quiz_submissions",
              "quizzes/quiz_assignment_overrides",
              "quizzes/quiz_extensions",
              "quizzes/quiz_groups",
              "quizzes/quiz_ip_filters",
              "quizzes/quiz_questions",
              "quizzes/quiz_reports",
              "quizzes/quiz_statistics",
              "quizzes/quiz_submission_events",
              "quizzes/quiz_submission_events_api",
              "quizzes/quiz_submission_files",
              "quizzes/quiz_submission_questions",
              "quizzes/quiz_submission_users",
              "quizzes/quiz_submissions",
              "quizzes/quiz_submissions_api",
              "quizzes/quizzes",
              "quizzes/quizzes_api",
              "quizzes_respondus/launch",
              "quizzes_respondus/restart",
              "quizzes_respondus/security",
              "quizzes_respondus/session",
              "release_notes",
              "respondus_ldb_handshake",
              "role_overrides",
              "rubric_assessments",
              "rubric_associations",
              "rubrics",
              "rubrics_api",
              "saml_idp",
              "scopes_api",
              "search",
              "sections",
              "security",
              "self_enrollments",
              "services_api",
              "sftp_users",
              "shared_brand_configs",
              "sis_api",
              "sis_import_errors_api",
              "sis_imports_api",
              "site_admin",
              "sub_accounts",
              "submission_comments",
              "submission_comments_api",
              "submissions",
              "submissions/anonymous_downloads",
              "submissions/anonymous_previews",
              "submissions_api",
              "submissions/downloads",
              "submissions/previews",
              "support_helpers/due_date_cache",
              "support_helpers/submission_lifecycle_manage",
              "tabs",
              "terms",
              "terms_api",
              "tokens",
              "trust_links",
              "usage_rights",
              "user_lists",
              "user_notes",
              "user_observees",
              "users",
              "uuid_provisioners",
              "webhooks",
              "web_zip_exports",
              "webct_exporter",
              "wiki_pages",
              "wiki_pages_api"
            ],
            "description": "The controller that the Canvas web application used to service this request."
          },
          "web_application_action": {
            "type": "string",
            "enum": [
              "abort",
              "abort_all_pending",
              "accept",
              "account_calendar_settings",
              "account_chain",
              "activate_role",
              "activity_stream",
              "activity_stream_summary",
              "add_account_user",
              "add_domain",
              "add_entry",
              "add_favorite_course",
              "add_favorite_groups",
              "add_item",
              "add_message",
              "add_rce_favorite",
              "add_reply",
              "add_role",
              "add_sftp_key",
              "add_users",
              "admin_merge",
              "admin_split",
              "admin_tools",
              "advantage_access_token",
              "alerts_by_student",
              "alerts_count",
              "alignment_redirect",
              "all_calendars",
              "all_courses",
              "all_visible_nav_tools",
              "android_assetlinks",
              "annotation_notification",
              "answer",
              "api_capture",
              "api_create_success",
              "api_destroy",
              "api_file_status",
              "api_index",
              "api_quota",
              "api_settings",
              "api_show",
              "api_update",
              "apple_app_site_association",
              "apply_score_to_ungraded_submissions",
              "assessment_question_show",
              "asset_id_mapping",
              "assign_peer_review",
              "assign_peer_reviews",
              "assign_unassigned_members",
              "associated_courses",
              "attachment",
              "attachment_content",
              "audit_events",
              "auth",
              "authenticate",
              "authorize",
              "authorize_redirect",
              "available",
              "available_migrators",
              "available_reports",
              "avatar_image",
              "avatars",
              "backup",
              "basic_lti_launch_request",
              "batch_create",
              "batch_retrieve",
              "batch_update",
              "batches",
              "bookmark",
              "bookmark_search",
              "bouncing_channel_report",
              "browserconfig",
              "bulk_reset_bounce_counts",
              "bulk_select",
              "bulk_update",
              "bulk_user_progress",
              "cancel",
              "category_index",
              "change_gradebook_column_size",
              "change_gradebook_version",
              "change_password",
              "check_account_permission",
              "check_title_availability",
              "choose_mastery_path",
              "clear_cache",
              "clear_file_session",
              "clone_with_name",
              "close",
              "close_notification",
              "closed",
              "clusters",
              "communication",
              "complete",
              "compress_dates",
              "conclude_user",
              "configuration",
              "confirm",
              "confirm_action",
              "confirm_change_password",
              "confirm_delete_user",
              "confirmation_limit_reached",
              "consortium_users",
              "content_list",
              "content_share_users",
              "content_shares",
              "content_tag_assignment_data",
              "content_tag_master_course_data",
              "content_tag_prerequisites_needing_finishing",
              "context_index",
              "context_show",
              "copy",
              "copy_course",
              "copy_course_content",
              "copy_course_status",
              "copy_file",
              "copy_folder",
              "course",
              "course_accounts",
              "course_assignments",
              "course_creation_accounts",
              "course_index",
              "course_participation",
              "course_student_summaries",
              "courses",
              "courses_api",
              "courses_redirect",
              "create",
              "create_file",
              "create_media_object",
              "create_or_update",
              "create_pending",
              "create_tool_with_verification",
              "create_user_service",
              "created_group_ids",
              "cross_domain_login",
              "crosslist",
              "crosslist_check",
              "dashboard_cards",
              "dashboard_sidebar",
              "dashboard_stream_items",
              "dashboard_view",
              "data",
              "day_details",
              "days",
              "debug_data",
              "deep",
              "deep_linking_response",
              "delegated_auth_pass_through",
              "delete",
              "delete_data",
              "delete_for_all",
              "delete_peer_review",
              "delete_push_token",
              "delete_recording",
              "delete_user_service",
              "deleted_index",
              "deny",
              "department",
              "department_grades",
              "department_participation",
              "department_statistics",
              "department_statistics_by_subaccount",
              "destroy",
              "destroy_all",
              "detail_list",
              "disable_post_to_sis",
              "dismiss_migration_limitation_msg",
              "domain_lookups",
              "duplicate",
              "edit",
              "effective_due_dates",
              "enabled_features",
              "enroll_users",
              "enrollment_invitation",
              "entries",
              "entry_list",
              "environment",
              "eportfolio_moderation",
              "event_types_index",
              "execute",
              "export",
              "extensions",
              "external_tool",
              "fail",
              "feed",
              "final_grade_overrides",
              "flag",
              "for_account",
              "for_assignment",
              "for_course",
              "for_course_and_other_parameters",
              "for_grader",
              "for_login",
              "for_student",
              "for_students",
              "for_user",
              "formatted_answer",
              "forgot_password",
              "front_page",
              "generate_sessionless_launch",
              "get_course_timetable",
              "get_courses",
              "get_csp_settings",
              "get_custom_color",
              "get_custom_colors",
              "get_dashboard_positions",
              "get_data",
              "get_new_user_tutorial_statuses",
              "grade",
              "grade_passback",
              "grade_summary",
              "gradeable_students",
              "grades",
              "grades_for_student",
              "grading_period_assignments",
              "grading_rubrics",
              "graphiql",
              "group_alias",
              "group_index",
              "grouped_info",
              "groups",
              "handshake",
              "health_prognosis",
              "help_links",
              "history",
              "html_message",
              "icon_maker_folder",
              "icon_metadata",
              "iframe_media_player",
              "ignore_item",
              "ignore_stream_item",
              "image_thumbnail",
              "images",
              "import",
              "import_details",
              "importing",
              "imports_index",
              "imports_show",
              "inbox",
              "index",
              "internal_analytics",
              "intro",
              "invite",
              "invite_users",
              "item_details",
              "item_redirect",
              "item_redirect_mastery_paths",
              "item_sequence",
              "job_stats",
              "join",
              "jwks",
              "jwt_token",
              "landing",
              "last_attended",
              "latest",
              "launch",
              "launch_definitions",
              "leave_student_view",
              "legacy_grade_passback",
              "licenses",
              "limit_user",
              "link",
              "link_index",
              "link_validation",
              "link_validator",
              "list",
              "list_all_folders",
              "list_favorite_courses",
              "list_favorite_groups",
              "list_google_docs",
              "list_keys",
              "lockdown_browser_required",
              "logout_landing",
              "logout_service",
              "lookup",
              "lti_index",
              "manage",
              "manageable_accounts",
              "manageable_courses",
              "managed_quiz_data",
              "manually_created_courses_account",
              "mark_all_as_read",
              "mark_all_read",
              "mark_all_unread",
              "mark_as_done",
              "mark_as_not_done",
              "mark_bulk_submissions_as_read",
              "mark_entry_read",
              "mark_entry_unread",
              "mark_item_read",
              "mark_rubric_assessments_read",
              "mark_submission_item_read",
              "mark_submission_read",
              "mark_submission_unread",
              "mark_topic_read",
              "mark_topic_unread",
              "masquerade",
              "media_download",
              "media_folder",
              "media_object_redirect",
              "media_object_thumbnail",
              "media_upload_url",
              "members",
              "merge",
              "merge_into",
              "message_redirect",
              "metadata",
              "migration_details",
              "migration_status",
              "migrations_index",
              "migrations_show",
              "missing_submissions",
              "mobile_login_qr_code",
              "moderate",
              "module_redirect",
              "move_questions",
              "multiple_gradeable_students",
              "new",
              "new_quizzes",
              "new_quizzes_selection_update",
              "next_appointment",
              "oauth",
              "oauth_success",
              "object_snippet",
              "observees",
              "observers",
              "observer_pairing_codes_csv",
              "oembed_retrieve",
              "offline_web_exports",
              "open",
              "opened",
              "originality_report",
              "outcome_alignments",
              "outcome_result",
              "outcomes",
              "pages",
              "pandata_events_token",
              "participants",
              "peer_reviews",
              "permissions",
              "ping",
              "post_message_forwarding",
              "potential_collaborators",
              "prestart",
              "preview_html",
              "prior_users",
              "privacy_policy",
              "profile_pics",
              "progressions",
              "public_feed",
              "public_url",
              "publish",
              "publish_quizzes",
              "publish_to_sis",
              "qr_mobile_login",
              "query",
              "questions",
              "queue_migration",
              "quota",
              "rate_entry",
              "rce_config",
              "re_send_confirmation",
              "re_send_invitations",
              "react_files",
              "reactivate",
              "read_only",
              "readiness",
              "recent_students",
              "recipients",
              "record_answer",
              "recording_ready",
              "redirect",
              "redirect_proxy",
              "redo_submission",
              "refresh",
              "registration",
              "registration_return",
              "reject",
              "relock",
              "remind_peer_review",
              "remove_account_user",
              "remove_alignment",
              "remove_favorite_course",
              "remove_favorite_groups",
              "remove_item",
              "remove_messages",
              "remove_rce_favorite",
              "remove_role",
              "remove_user",
              "render_past_global_announcements",
              "reorder",
              "reorder_assignments",
              "reorder_categories",
              "reorder_entries",
              "reorder_items",
              "replies",
              "report_avatar_image",
              "reports_tab",
              "requeue",
              "reserve",
              "reset",
              "reset_bounce_count",
              "reset_content",
              "reset_course_favorites",
              "reset_test_student",
              "reset_verifier",
              "resolve_path",
              "resource",
              "resource_selection",
              "restore_message",
              "restore_states",
              "restore_user",
              "restrict_item",
              "resubmit_to_turnitin",
              "resubmit_to_vericite",
              "retrieve",
              "revert",
              "revisions",
              "revisions_redirect",
              "rollups",
              "root_accounts",
              "roster",
              "roster_user",
              "roster_user_services",
              "roster_user_usage",
              "rubric",
              "rubric_assessments_read_state",
              "rubrics",
              "save_assignment_order",
              "save_enabled_account_calendars",
              "save_gradebook_column_order",
              "save_selected_contexts",
              "save_to_account",
              "save_to_user_session",
              "search",
              "section_alias",
              "select",
              "select_mastery_path",
              "self_enrollment",
              "self_unenrollment",
              "send_via_sms",
              "services",
              "session_launch",
              "session_token",
              "sessionless_launch",
              "set_custom_color",
              "set_course_timetable",
              "set_course_timetable_events",
              "set_csp_setting",
              "set_dashboard_positions",
              "set_data",
              "set_new_user_tutorial_status",
              "set_usage_rights",
              "settings",
              "show",
              "show_anonymous",
              "show_default_grading_scheme",
              "show_deprecated",
              "show_front_page",
              "show_k5_dashboard",
              "show_kaltura_config",
              "show_moderate",
              "show_observer",
              "show_redirect",
              "show_relative",
              "show_revision",
              "show_settings",
              "show_sso_settings",
              "show_submissions_upload",
              "sis_assignments",
              "sis_import",
              "sis_publish_status",
              "speed_grader",
              "speed_grader_settings",
              "split",
              "start",
              "start_debugging",
              "start_kaltura_session",
              "start_link_validation",
              "start_offline_web_export",
              "statistics",
              "statistics_graph",
              "status",
              "stop_debugging",
              "store",
              "stuck_singletons",
              "stuck_strands",
              "student_details",
              "student_in_course",
              "student_in_course_assignments",
              "student_in_course_messaging",
              "student_in_course_participation",
              "student_view",
              "student_view_student",
              "students",
              "students_per_range",
              "styleguide",
              "sub_accounts",
              "subgraph_execute",
              "subgroups",
              "submission",
              "submissions",
              "submissions_clear_unread",
              "submission_summary",
              "submission_versions",
              "submissions_zip_upload",
              "subscribe_topic",
              "subscriptions_index",
              "success",
              "summary_list",
              "syllabus",
              "sync",
              "teacher_activity",
              "terminate_sessions",
              "terms_of_service",
              "terms_of_service_custom_content",
              "terms_of_use",
              "test_ldap_bind",
              "test_ldap_connection",
              "test_ldap_login",
              "test_ldap_search",
              "time",
              "todo_item_count",
              "todo_items",
              "toggle_collapse",
              "toggle_collapse_all",
              "toggle_disable_inbox",
              "toggle_hide_dashcard_color_overlays",
              "toggle_mute",
              "token",
              "turnitin_confirmation",
              "turnitin_outcomes_placement",
              "turnitin_report",
              "unconclude",
              "unconclude_user",
              "unconfirmed_channel_report",
              "uncrosslist",
              "undelete_index",
              "undelete_item",
              "unenroll_user",
              "unflag",
              "universal_link_oauth2_dummy",
              "unlink",
              "unpublish",
              "unpublish_quizzes",
              "unread_count",
              "unsubscribe_topic",
              "unstuck",
              "unsynced_changes",
              "upcoming_events",
              "update",
              "update_all",
              "update_anonymous",
              "update_associations",
              "update_avatar_image",
              "update_front_page",
              "update_final_grade_overrides",
              "update_item",
              "update_media_object",
              "update_nav",
              "update_preferences_by_category",
              "update_profile",
              "update_region",
              "update_settings",
              "update_sso_settings",
              "update_submission",
              "user",
              "user_close_notification",
              "user_close_notification_deprecated",
              "user_dashboard",
              "user_graded_submissions",
              "user_ids",
              "user_index",
              "user_index_deprecated",
              "user_notes",
              "user_outcome_results",
              "user_progress",
              "users",
              "validate_access_code",
              "vericite_report",
              "view",
              "visible_calendars_count",
              "visible_contexts",
              "visible_course_nav_tools",
              "web_app_manifest",
              "webct_schools",
              "xml_schema"
            ],
            "description": "The action in the Canvas web application used to service this request."
          },
          "web_application_context_type": {
            "type": "string",
            "enum": [
              "Account",
              "AssessmentQuestion",
              "Assignment",
              "ContentMigration",
              "Course",
              "CourseSection",
              "Group",
              "Quizzes::QuizSubmission",
              "StudentEnrollment",
              "User",
              "UserProfile"
            ],
            "description": "Containing object type that the Canvas web application used to service this request."
          },
          "web_application_context_id": {
            "type": "integer",
            "format": "int64",
            "description": "Containing object ID that the Canvas web application used to service this request."
          },
          "session_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user's session where this request was made."
          },
          "developer_key_id": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the developer who accessed this resource if the request was made by a developer."
          },
          "participated": {
            "type": "boolean",
            "description": "Shows whether the HTTP request is considered a participation for the user."
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "timestamp",
          "url",
          "http_method",
          "http_status",
          "http_version",
          "remote_ip",
          "interaction_micros",
          "participated"
        ],
        "title": "Stores the Canvas web application server access/request logs.",
        "description": "Note: Logs older than the retention limit of 30 days are no longer available via DAP API."
      }
    },
    "responses": {},
    "securitySchemes": {
      "Default": {
        "type": "http",
        "description": "Authenticates a request by verifying a JWT (JSON Web Token) passed in the `X-InstAuth` HTTP header.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [{ "Default": [] }],
  "tags": [
    { "name": "API" },
    {
      "name": "CompleteIncrementalJob",
      "description": "An incremental query that has completed with success.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/CompleteIncrementalJob\" />"
    },
    {
      "name": "CompleteSnapshotJob",
      "description": "A snapshot query that has completed with success.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/CompleteSnapshotJob\" />"
    },
    {
      "name": "FailedJob",
      "description": "A data access job that has terminated with failure.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/FailedJob\" />"
    },
    {
      "name": "Object",
      "description": "A reference to a binary or text object persisted in object storage, such as a CSV, JSON, or Parquet file.\n\nThe lifetime of the object depends on the operation that created it but typically lasts for 24 hours.\nObject identifiers can be traded for pre-signed URLs via an authenticated endpoint operation while the object exists.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/Object\" />"
    },
    {
      "name": "ProcessingError",
      "description": "Raised when a job has terminated due to an unexpected error.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/ProcessingError\" />"
    },
    {
      "name": "TableJob",
      "description": "A data access job in progress.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/TableJob\" />"
    },
    {
      "name": "AuthenticationError",
      "description": "Raised when the client fails to provide valid authentication credentials.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/AuthenticationError\" />"
    },
    {
      "name": "NotFoundError",
      "description": "Raised when an entity does not exist or has expired.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/NotFoundError\" />"
    },
    {
      "name": "GatewayTimeoutError",
      "description": "Raised when received timeout from gateway.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/GatewayTimeoutError\" />"
    },
    {
      "name": "Resource",
      "description": "A pre-signed URL to a binary or text object persisted in object storage, such as a CSV, JSON or Parquet file.\n\nThe lifetime of the pre-signed URL depends on the operation that created it but typically lasts for 15 minutes.\nNo authentication is required to fetch the object via the pre-signed URL.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/Resource\" />"
    },
    {
      "name": "URL",
      "description": "A Uniform Resource Locator (URL).\n\n<SchemaDefinition schemaRef=\"#/components/schemas/URL\" />"
    },
    {
      "name": "ResourceResult",
      "description": "Associates object identifiers with pre-signed URLs to output resources.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/ResourceResult\" />"
    },
    {
      "name": "ValidationError",
      "description": "Raised when a JSON validation error occurs.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/ValidationError\" />"
    },
    {
      "name": "Filter",
      "description": "Identifies a subset of data to fetch from a table.\n\n(This feature is not currently implemented.)\n\nFilter encompasses column-level (`select`) and row-level (`where`) filters.\n\nColumn-level filters allow clients to include only those columns in the output they are interested in.\nRow-level filters let clients specify a condition that is applied to each record; if the condition is true,\nthe record is included in the output, otherwise omitted. Row-level filters are inspired by the\n[where argument](https://hasura.io/docs/latest/queries/postgres/query-filters/#the-where-argument) in Hasura.\n\nConsider a table with the following columns:\n\n* `family_name` of type `string`,\n* `given_name` of type `string`,\n* `birth_date` of type `datetime`,\n* `height` of type `number`, representing a person's height in meters,\n* `status`, which is an enumeration that can take the values `active`, `inactive`, `pending`.\n\nInclude only those people whose family name is `Smith`:\n\n```json\n{ \"family_name\": { \"_eq\": \"Smith\" } }\n```\n\nReturn people born in the 21st century:\n\n```json\n{ \"birth_date\": { \"_gte\": \"2001-01-01\" } }\n```\n\nInclude only those people whose height is between 1.6 and 1.7 meters:\n\n```json\n{ \"height\": { \"_gt\": 1.6, \"_lt\": 1.7 } }\n```\n\nReturn people whose status is `active` or `pending`:\n\n```json\n{ \"status\": { \"_in\": [\"active\", \"pending\"] } }\n```\n\nFind people whose family name is `Smith` and given name starts with `L` or `K`:\n\n```json\n{ \"family_name\": { \"_eq\": \"Smith\" }, \"given_name\": { \"_match\": \"^[LK]\" } }\n```\n\nFind people whose family name is `Smith` *or* whose given name starts with `L` or `K`:\n\n```json\n{ \"_or\": [\n    { \"family_name\": { \"_eq\": \"Smith\" } },\n    { \"given_name\": { \"_match\": \"^[LK]\" } }\n] }\n```\n\nThe type of the value matched in the condition must be compatible with the type of the column.\n\nThe following operators are generally available for all types:\n\n* `_eq` (equal to)\n* `_neq` (not equal to)\n\nComparison operators for strings:\n\n* `_match` (value matches regular expression)\n\nComparison operators for numbers, dates and timestamps:\n\n* `_gt` (greater than)\n* `_lt` (less than)\n* `_gte` (greater than or equal to)\n* `_lte` (less than or equal to)\n\nComparison operators for enumerations:\n\n* `_in` (value in set of values)\n* `_nin` (value not in set of values)\n\nOperators to build composite Boolean expressions:\n\n* `_and`\n* `_or`\n* `_not`\n\n<SchemaDefinition schemaRef=\"#/components/schemas/Filter\" />"
    },
    {
      "name": "Format",
      "description": "Identifies the format of the data returned, e.g. TSV, CSV, JSON Lines, or Parquet.\n\nTab-separated values (TSV) is a simple tabular format in which each record (table row) occupies a single line.\n\n* Output always begins with a header row, which lists all metadata and data field names.\n* Fields (table columns) are delimited by *tab* characters.\n* Non-printable characters and special values are escaped with *backslash* (`\\`).\n\nComma-separated values (CSV) output follows [RFC 4180](https://www.ietf.org/rfc/rfc4180.html) with a few extensions:\n\n* Output always begins with a header row, which lists all metadata and data field names.\n* Strings are quoted with double quotes (`\"`) if they contain special characters such as the double quote itself,\n  the comma delimiter, a newline, a carriage return, a tab character, etc., or if their string representation would\n  be identical to a special value such as NULL.\n* Empty strings are always represented as `\"\"`.\n* NULL values are represented with the unquoted literal string `NULL`.\n* Missing values are presented as an empty string (no characters between delimiters).\n* Each row has the same number of fields.\n\nWhen the output data is represented in the [JSON Lines](https://jsonlines.org/) format, each record (table row)\noccupies a single line. Each line is a JSON object, which can be validated against the corresponding JSON schema.\n\nParquet files are compatible with Spark version 3.0 and later.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/Format\" />"
    },
    {
      "name": "IncrementalQuery",
      "description": "Incremental queries return consolidated updates to a table, and help update a previous state to the present state.\n\nIf only a *since* timestamp is given (recommended), the operation returns all changes since the specified point in\ntime. If multiple updates took place to a record since the specified time, only the most recent version of the\nrecord is returned.\n\nIf both a *since* and an *until* timestamp is given, the operation returns all records that have changed since\nthe start timestamp of the interval but have not been altered after the end timestamp of the interval. Any records\nthat have been updated after the *until* timestamp are not included in the query result. This functionality is\nuseful to break up larger batches of changes but cannot be reliably used as a means of reconstructing a database\nstate in the past (i.e. a point-in-time query or a backup of a previous state).\n\nThe range defined by *since* and *until* is inclusive for the *since* timestamp but exclusive for the *until*\ntimestamp.\n\nYou would normally use incremental queries to fetch changes since a snapshot query or a previous incremental query.\nIf issued as a follow-up to a snapshot query, the *since* timestamp of the incremental query would be equal to the\n*at* timestamp of the snapshot query. If issued as a follow-up to an incremental query, you would chain the *until*\ntimestamp returned by the previous query job with the *since* timestamp of the new query request.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/IncrementalQuery\" />"
    },
    {
      "name": "Query",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Query\" />"
    },
    {
      "name": "SnapshotQuery",
      "description": "Snapshot queries return the present state of the table.\n\nSnapshot queries help populate an empty database. After the initial snapshot query, you would use incremental\nqueries to get the most up-to-date version of the data.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/SnapshotQuery\" />"
    },
    {
      "name": "OutOfRangeError",
      "description": "Raised when data is queried outside of the allowed time range.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/OutOfRangeError\" />"
    },
    {
      "name": "SnapshotRequiredError",
      "description": "Raised when data is queried outside of the allowed time range, and the table was reloaded recently. A new snapshot is required to keep data consistency.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/SnapshotRequiredError\" />"
    },
    {
      "name": "TableList",
      "description": "A list of tables that exist in the organization domain.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/TableList\" />"
    },
    {
      "name": "JsonType",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/JsonType\" />"
    },
    {
      "name": "VersionedSchema",
      "description": "The state of the schema at a specific point in time.\n\nSchemas are backwards compatible. They receive strictly monotonically increasing version numbers as schema\nevolution takes place.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/VersionedSchema\" />"
    },
    {
      "name": "access_tokens",
      "description": "Stores the access tokens for a user and developer tools.\n\nThis table in Canvas Data 2 will only share developer tool specific token metadata. All users have an option to create an access token\nbased on their role and level of data access.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/access_tokens\" />"
    },
    {
      "name": "account_users",
      "description": "Join table for accounts, users and roles.\n\nContains users' roles within an account (this table includes the account admins).\n\n<SchemaDefinition schemaRef=\"#/components/schemas/account_users\" />"
    },
    {
      "name": "accounts",
      "description": "Stores data about account objects in the Canvas system.\n\nAccounts are most often used to represent a hierarchy of colleges, schools, departments, campuses.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/accounts\" />"
    },
    {
      "name": "assessment_question_banks",
      "description": "Stores data about question banks.\n\nQuestion Banks are a place to house questions that can be added to quizzes across courses or accounts.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/assessment_question_banks\" />"
    },
    {
      "name": "assessment_questions",
      "description": "Stores attributes of a question associated with a quiz.\n\nThe column `question_data` stores a variety of question data related points such as:\n    * `question_type` denotes the type of the question. Possible values are:\n            - `calculated_question`\n            - `essay_question`\n            - `file_upload_question`\n            - `fill_in_multiple_blanks_question`\n            - `matching_question`\n            - `multiple_answers_question`\n            - `multiple_choice_question`\n            - `multiple_dropdowns_question`\n            - `numerical_question`,\n            - `short_answer_question`\n            - `text_only_question`\n            - `true_false_question`\n    * `question_text` is the text of the question.\n    * `regrade_option` denotes if regrading is available for the question. Possible values are: `available`\n      and `unavailable` for question types `multiple_answers_question`, `multiple_choice_question`,\n      `true_false_question`, and NULL for others. Defaults to `available` for the allowed question types, and NULL\n      for the rest.\n    * `correct_comments` are comments to be displayed if the student answers the question correctly.\n    * `incorrect_comments` are comments to be displayed if the student answers the question incorrectly.\n    * `neutral_comments` are comments to be displayed regardless of how the student answers the question.\n    * `answers` is a JSON array of all possible answers.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/assessment_questions\" />"
    },
    {
      "name": "assignment_groups",
      "description": "Stores rules associated with an assignment group.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/assignment_groups\" />"
    },
    {
      "name": "assignment_override_students",
      "description": "Stores measures related to ad hoc users for whom an assignment override exists.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/assignment_override_students\" />"
    },
    {
      "name": "assignment_overrides",
      "description": "Stores records for assignment due date overrides.\n\nThere may be many records in this table for each assignment. Use the data in this table to calculate actual due, all day, lock and\nunlock dates/times.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/assignment_overrides\" />"
    },
    {
      "name": "assignments",
      "description": "This table stores attributes for assignments.\n\nThere is one record in this table for each assignment.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/assignments\" />"
    },
    {
      "name": "attachment_associations",
      "description": "Links user files to an assignment to allow grader to see the student's submission.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/attachment_associations\" />"
    },
    {
      "name": "attachments",
      "description": "Describes files in Canvas.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/attachments\" />"
    },
    {
      "name": "calendar_events",
      "description": "The model for calendar events in Canvas.\n\nThese can be manually created, or automatically generated from other items like Assignments with a date attached.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/calendar_events\" />"
    },
    {
      "name": "canvadocs_annotation_contexts",
      "description": "Launch context associated with DocViewer when assignment is of type `Annotated_Document`.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/canvadocs_annotation_contexts\" />"
    },
    {
      "name": "comment_bank_items",
      "description": "Stores user comments that have been added to the comment bank.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/comment_bank_items\" />"
    },
    {
      "name": "communication_channels",
      "description": "Channels through which a user receives Canvas notifications.\n\nExamples include an email address, a phone number, a mobile device token for push notifications, etc.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/communication_channels\" />"
    },
    {
      "name": "content_migrations",
      "description": "Saves data about what and when was added to a course through a course copy or import.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/content_migrations\" />"
    },
    {
      "name": "content_participation_counts",
      "description": "Shows students a count of the number of submissions they have that have something unread.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/content_participation_counts\" />"
    },
    {
      "name": "content_participations",
      "description": "Stores data related to students submission updates or feedback.\n\nExamples include new grade, new excused status, or new score.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/content_participations\" />"
    },
    {
      "name": "content_shares",
      "description": "Provides a link to a content export from a sender to a receiver.\n\nThe receiver can use this link to import the content export into any of their courses.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/content_shares\" />"
    },
    {
      "name": "content_tags",
      "description": "In the context of LTI, joins `context_external_tools` to either `assignments` or to `context_modules`.\n\nSome of the ways to use this table would be to: identify the external tool that is used to submit an assignment, identify the items\nthat are in modules (the IDs in this table are also referred to as `module_item_id`), identify the learning outcome group that an\noutcome is part of.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/content_tags\" />"
    },
    {
      "name": "context_external_tools",
      "description": "Stores data about installed LTI 1 and 1.3 tools.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/context_external_tools\" />"
    },
    {
      "name": "context_module_progressions",
      "description": "Shows which items a student has completed, started and not started in a module.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/context_module_progressions\" />"
    },
    {
      "name": "context_modules",
      "description": "Modules in Canvas.\n\nA place to link items so that students can proceed through course content in order.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/context_modules\" />"
    },
    {
      "name": "conversation_message_participants",
      "description": "The participants in a certain message in a Conversation.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/conversation_message_participants\" />"
    },
    {
      "name": "conversation_messages",
      "description": "The messages that belong to a certain Conversation, these are in the *Inbox*.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/conversation_messages\" />"
    },
    {
      "name": "conversation_participants",
      "description": "The participants in a Conversation.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/conversation_participants\" />"
    },
    {
      "name": "conversations",
      "description": "Conversation threads from the Canvas Inbox.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/conversations\" />"
    },
    {
      "name": "course_account_associations",
      "description": "An explicit place to keep track of all the the accounts in the account hierarchy that a course belongs to.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/course_account_associations\" />"
    },
    {
      "name": "course_sections",
      "description": "Stores attributes for a section of a course.\n\nSections are a group of students that have been organized for administrative purposes.  When users are enrolled in a course, they are\nactually enrolled in one of the sections of that course. It is possible to place more than one section in course, but it is not\npossible to put sections within sections. All sections of a course share the same content. If a course is taught by one instructor,\nsections can remain under one course. However, if each section is taught by a different instructor, those sections will need to be\nhoused under separate courses. Each section can have its own varied due dates for assignments, quizzes, and discussions. For example, a\ncourse may have sections that meet on different days of the week or in different formats (online vs. face-to-face). Sections are also\nbeneficial when Teacher Assistants are assigned to help manage courses and oversee grading for a portion of a course enrollment. As\npart of SIS or manual enrollments, you can limit students to only see students in their section. Instructors can also limit students if\nyou allow them to manually enroll users in their own courses.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/course_sections\" />"
    },
    {
      "name": "courses",
      "description": "Stores attributes for a course.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/courses\" />"
    },
    {
      "name": "custom_gradebook_column_data",
      "description": "Contains per-user data for the custom columns defined in custom_gradebook_columns.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/custom_gradebook_column_data\" />"
    },
    {
      "name": "custom_gradebook_columns",
      "description": "Contains configuration information for custom Gradebook columns defined for specific courses.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/custom_gradebook_columns\" />"
    },
    {
      "name": "developer_key_account_bindings",
      "description": "Joins the accounts table to developer_keys.\n\nDescribes if the associated developer key is \"on\" or \"off\" for the associated account.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/developer_key_account_bindings\" />"
    },
    {
      "name": "developer_keys",
      "description": "A table representing a set of credentials used for API access.\n\nContains both normal API keys and the LTI keys used in LTI 1.3 apps.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/developer_keys\" />"
    },
    {
      "name": "discussion_entries",
      "description": "Stores attributes for discussion entries.\n\nDiscussion entries are replies in a discussion topic.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/discussion_entries\" />"
    },
    {
      "name": "discussion_entry_participants",
      "description": "Tracks who has read a particular entry.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/discussion_entry_participants\" />"
    },
    {
      "name": "discussion_topic_participants",
      "description": "Links discussion topics to the users who have posted in them.\n\nIf a user has posted to a discussion topic, there will be a row in this table.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/discussion_topic_participants\" />"
    },
    {
      "name": "discussion_topics",
      "description": "This table stores attributes for discussion topics in Canvas.\n\nDiscussion topics are logical discussion threads. They can have many discussion entries. They also have their own message text for the\nmessage that started the topic.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/discussion_topics\" />"
    },
    {
      "name": "enrollment_dates_overrides",
      "description": "Supports allowing certain roles to have access to a term outside of term date boundaries.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/enrollment_dates_overrides\" />"
    },
    {
      "name": "enrollment_states",
      "description": "Stores the state of an enrollment.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/enrollment_states\" />"
    },
    {
      "name": "enrollment_terms",
      "description": "Stores enrollment term records that describe the term or semester associated with courses (e.g. Fall 2013).\n\nUse the dates in this table as a proxy for the course start/end dates if the `start_at` and `end_at` fields in the courses table are\nNULL.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/enrollment_terms\" />"
    },
    {
      "name": "enrollments",
      "description": "This table stores user enrollments.\n\nAn enrollment represents a user's association with a specific course and section. There may be multiple records associated with a\n`course_id` and `user_id` combination (records are unique on: `course_id`, `user_id`, `course_section_id`, `role_id`, `workflow_state`,\n`associated_user_id`).\n\n<SchemaDefinition schemaRef=\"#/components/schemas/enrollments\" />"
    },
    {
      "name": "favorites",
      "description": "A record of items that a user has favorited, such as a Course.\n\nThis affects how items are displayed in places like the Dashboard.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/favorites\" />"
    },
    {
      "name": "folders",
      "description": "A collection of files (attachments).\n\n<SchemaDefinition schemaRef=\"#/components/schemas/folders\" />"
    },
    {
      "name": "grading_period_groups",
      "description": "Stores attributes for grading period groups, which are a group of grading periods.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/grading_period_groups\" />"
    },
    {
      "name": "grading_periods",
      "description": "Stores attributes for grading period.\n\nA Grading period is like a \"term\", essentially used for splitting up the grade book into \"periods\".\n\n<SchemaDefinition schemaRef=\"#/components/schemas/grading_periods\" />"
    },
    {
      "name": "grading_standards",
      "description": "Contains data for grading schemes defined for a course or account.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/grading_standards\" />"
    },
    {
      "name": "group_categories",
      "description": "A container for a set of groups, since often you want everyone to be in exactly one group in a set.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/group_categories\" />"
    },
    {
      "name": "group_memberships",
      "description": "A join table of users and groups. Like enrollments, but for groups instead of courses.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/group_memberships\" />"
    },
    {
      "name": "groups",
      "description": "Stores attributes for groups in canvas.\n\nGroups contain two or more students enrolled in a particular course working on an assignment or project together.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/groups\" />"
    },
    {
      "name": "late_policies",
      "description": "Contains late/missing policy configurations for courses.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/late_policies\" />"
    },
    {
      "name": "learning_outcome_groups",
      "description": "Learning outcome groups organize outcomes hierarchically within a context, such as an account, course or the global context.\n\nThis table contains dimensions for learning outcome groups.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/learning_outcome_groups\" />"
    },
    {
      "name": "learning_outcome_question_results",
      "description": "Attributes for the results of answered questions which have been associated with a learning outcome.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/learning_outcome_question_results\" />"
    },
    {
      "name": "learning_outcome_results",
      "description": "Learning outcome results are a student's mastery score on a given outcome.\n\nThis table contains dimensions for learning outcome results.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/learning_outcome_results\" />"
    },
    {
      "name": "learning_outcomes",
      "description": "Learning outcomes are measurable statements that express student knowledge or a student skill.\n\nThis table contains dimensions for learning outcomes.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/learning_outcomes\" />"
    },
    {
      "name": "lti_line_items",
      "description": "Represents a line item from the IMS Assignment and Grade service.\n\nLTI 1.3 tools that have been authorized by an admin may manage this table.\n\nSee [Learning Tools Interoperability (LTI) Assignment and Grade Services\nSpecification](https://www.imsglobal.org/spec/lti-ags/v2p0#line-item-service).\n\n<SchemaDefinition schemaRef=\"#/components/schemas/lti_line_items\" />"
    },
    {
      "name": "lti_resource_links",
      "description": "Joins `context_external_tools` to other resources in Canvas (assignments for example).\n\nOnly used with LTI 1.3 `context_external_tools`.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/lti_resource_links\" />"
    },
    {
      "name": "lti_results",
      "description": "Represents a result from the IMS Assignment and Grade service\n\nSee [IMS Global](https://www.imsglobal.org/spec/lti-ags/v2p0#result-service). LTI 1.3 tools that have been authorized by an admin may\nread records from this table via API.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/lti_results\" />"
    },
    {
      "name": "master_courses_child_content_tags",
      "description": "Links imported course content to the child subscription and keeps track of changes made to content.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/master_courses_child_content_tags\" />"
    },
    {
      "name": "master_courses_child_subscriptions",
      "description": "Saves data about which child courses are linked to which master blueprint courses.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/master_courses_child_subscriptions\" />"
    },
    {
      "name": "master_courses_master_content_tags",
      "description": "Links blueprint course content to the template and keeps track of their locked status.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/master_courses_master_content_tags\" />"
    },
    {
      "name": "master_courses_master_migrations",
      "description": "Represents a blueprint course sync event.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/master_courses_master_migrations\" />"
    },
    {
      "name": "master_courses_master_templates",
      "description": "Stores blueprint course specific data and links a course with all other blueprint models.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/master_courses_master_templates\" />"
    },
    {
      "name": "master_courses_migration_results",
      "description": "Stores results for individual associated courses for a blueprint sync event.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/master_courses_migration_results\" />"
    },
    {
      "name": "originality_reports",
      "description": "Represents an \"originality score\" for a submission.\n\nRows in this table are managed solely by LTI 2 tool providers that leverage the Canvas plagiarism detection platform.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/originality_reports\" />"
    },
    {
      "name": "outcome_proficiencies",
      "description": "Outcome proficiencies, or learning mastery proficiency ratings, define a set of ratings, which together create a point scale and a mastery level.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/outcome_proficiencies\" />"
    },
    {
      "name": "outcome_proficiency_ratings",
      "description": "Outcome proficiency ratings define the individual tiers of outcome proficiencies.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/outcome_proficiency_ratings\" />"
    },
    {
      "name": "post_policies",
      "description": "Contains post policy configurations for courses and individual assignments.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/post_policies\" />"
    },
    {
      "name": "pseudonyms",
      "description": "This table stores user pseudonyms.\n\nPseudonyms are login profiles associated with users. Contains user / account relationship (may contain multiple records per `user_id`\nif that `user_id` is associated with multiple accounts); note: not all users can be found in the pseudonyms table.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/pseudonyms\" />"
    },
    {
      "name": "quiz_groups",
      "description": "This table stores attributes for quiz group.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/quiz_groups\" />"
    },
    {
      "name": "quiz_questions",
      "description": "This table stores attributes of a question associated with a quiz.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/quiz_questions\" />"
    },
    {
      "name": "quiz_submissions",
      "description": "Stores attributes for the last submitted quiz.\n\nThis tables persists one record per `user_id` and `quiz_id`.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/quiz_submissions\" />"
    },
    {
      "name": "quizzes",
      "description": "Stores attributes for quizzes.\n\nQuizzes can also be assignments (`assignment_id` field will have a value).\n\n<SchemaDefinition schemaRef=\"#/components/schemas/quizzes\" />"
    },
    {
      "name": "role_overrides",
      "description": "A customization to the default permissions granted by a role.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/role_overrides\" />"
    },
    {
      "name": "roles",
      "description": "A user is assigned a role which grants all the permissions associated with that role.\n\nRoles have a few implicit permissions and a large set of default permissions, which can be customized with RoleOverrides.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/roles\" />"
    },
    {
      "name": "rubric_assessments",
      "description": "Shows the data that a teacher has entered in to a rubric while grading a student.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/rubric_assessments\" />"
    },
    {
      "name": "rubric_associations",
      "description": "Links a rubric to an assignment.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/rubric_associations\" />"
    },
    {
      "name": "rubrics",
      "description": "List of criteria that describe how an assignment should be graded.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/rubrics\" />"
    },
    {
      "name": "score_statistics",
      "description": "This table stores aggregate statistics for scores on individual assignments.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/score_statistics\" />"
    },
    {
      "name": "scores",
      "description": "This table stores assignment group and course grades for students enrolled in a course.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/scores\" />"
    },
    {
      "name": "submission_comments",
      "description": "This table contains attributes related to the submission comments feature in Canvas.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/submission_comments\" />"
    },
    {
      "name": "submission_versions",
      "description": "This table stores information describing previous versions of individual submission objects.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/submission_versions\" />"
    },
    {
      "name": "submissions",
      "description": "This table stores submission records for an assignment.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/submissions\" />"
    },
    {
      "name": "user_account_associations",
      "description": "Stores data about user and account relationship, how \"close\" a user is related to an account.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/user_account_associations\" />"
    },
    {
      "name": "user_notes",
      "description": "Stores the data for the Faculty Journal feature.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/user_notes\" />"
    },
    {
      "name": "users",
      "description": "This table stores attributes for users.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/users\" />"
    },
    {
      "name": "web_conference_participants",
      "description": "Links users to conferences they are invited to join.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/web_conference_participants\" />"
    },
    {
      "name": "web_conferences",
      "description": "Data model for Conferences in Canvas.\n\nIntegrates with external conferencing solutions like BigBlueButton.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/web_conferences\" />"
    },
    {
      "name": "wiki_pages",
      "description": "Stores text data that is linked to a wiki and a course.\n\nAlso known as Pages. Pages store content and educational resources that are part of a course or group but don't necessarily belong in\nan assignment. Pages can include text, video, and links to files and other course or group content. Pages can also be linked to other\npages. They can also be used as a collaboration tool for course or group wikis where only specific users can have access. Canvas keeps\nthe entire history of the page to account for changes over time.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/wiki_pages\" />"
    },
    {
      "name": "wikis",
      "description": "Links a course to its wiki pages.\n\nThere's only ever one per course, it is not highly used any longer, Wiki pages object is linked directly to a course now.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/wikis\" />"
    },
    {
      "name": "abstract_courses",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/abstract_courses\" />"
    },
    {
      "name": "appointment_groups",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/appointment_groups\" />"
    },
    {
      "name": "assessment_requests",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/assessment_requests\" />"
    },
    {
      "name": "asset_user_accesses",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\nSupports canvas page views feature.\n\nLogs view and participation counts for a user + asset combination. Contains information on users' usage of assets (assignments, files,\netc.).\n\n<SchemaDefinition schemaRef=\"#/components/schemas/asset_user_accesses\" />"
    },
    {
      "name": "authentication_providers",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/authentication_providers\" />"
    },
    {
      "name": "cloned_items",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/cloned_items\" />"
    },
    {
      "name": "content_exports",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/content_exports\" />"
    },
    {
      "name": "eportfolios",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/eportfolios\" />"
    },
    {
      "name": "epub_exports",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/epub_exports\" />"
    },
    {
      "name": "external_feeds",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/external_feeds\" />"
    },
    {
      "name": "gradebook_uploads",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/gradebook_uploads\" />"
    },
    {
      "name": "group_and_membership_importers",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/group_and_membership_importers\" />"
    },
    {
      "name": "live_assessments_assessments",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/live_assessments_assessments\" />"
    },
    {
      "name": "live_assessments_submissions",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/live_assessments_submissions\" />"
    },
    {
      "name": "lti_message_handlers",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/lti_message_handlers\" />"
    },
    {
      "name": "media_objects",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/media_objects\" />"
    },
    {
      "name": "moderated_grading_provisional_grades",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/moderated_grading_provisional_grades\" />"
    },
    {
      "name": "outcome_imports",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/outcome_imports\" />"
    },
    {
      "name": "purgatories",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/purgatories\" />"
    },
    {
      "name": "quiz_statistics",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/quiz_statistics\" />"
    },
    {
      "name": "sis_batches",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/sis_batches\" />"
    },
    {
      "name": "usage_rights",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/usage_rights\" />"
    },
    {
      "name": "versions",
      "description": "Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/versions\" />"
    },
    {
      "name": "assignment_groups__rules",
      "description": "Type extracted from column `assignment_groups.rules`.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/assignment_groups__rules\" />"
    },
    {
      "name": "assignments__turnitin_settings",
      "description": "Type extracted from column `assignments.turnitin_settings`.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/assignments__turnitin_settings\" />"
    },
    {
      "name": "context_external_tools__settings",
      "description": "Type extracted from column `context_external_tools.settings`.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/context_external_tools__settings\" />"
    },
    {
      "name": "courses__settings",
      "description": "Type extracted from column `courses.settings`.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/courses__settings\" />"
    },
    {
      "name": "quiz_questions__question_data",
      "description": "Type extracted from column `quiz_questions.question_data`.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/quiz_questions__question_data\" />"
    },
    {
      "name": "user_agents",
      "description": "User agent strings for the `web_logs` table.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/user_agents\" />"
    },
    {
      "name": "web_logs",
      "description": "Stores the Canvas web application server access/request logs.\n\nNote: Logs older than the retention limit of 30 days are no longer available via DAP API.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/web_logs\" />"
    }
  ],
  "x-tagGroups": [
    { "name": "Operations", "tags": ["API"] },
    {
      "name": "API types",
      "tags": [
        "AuthenticationError",
        "CompleteIncrementalJob",
        "CompleteSnapshotJob",
        "FailedJob",
        "Filter",
        "Format",
        "GatewayTimeoutError",
        "IncrementalQuery",
        "JsonType",
        "NotFoundError",
        "Object",
        "OutOfRangeError",
        "ProcessingError",
        "Query",
        "Resource",
        "ResourceResult",
        "SnapshotQuery",
        "SnapshotRequiredError",
        "TableJob",
        "TableList",
        "URL",
        "ValidationError",
        "VersionedSchema"
      ]
    },
    {
      "name": "Canvas tables",
      "tags": [
        "access_tokens",
        "account_users",
        "accounts",
        "assessment_question_banks",
        "assessment_questions",
        "assignment_groups",
        "assignment_override_students",
        "assignment_overrides",
        "assignments",
        "attachment_associations",
        "attachments",
        "calendar_events",
        "canvadocs_annotation_contexts",
        "comment_bank_items",
        "communication_channels",
        "content_migrations",
        "content_participation_counts",
        "content_participations",
        "content_shares",
        "content_tags",
        "context_external_tools",
        "context_module_progressions",
        "context_modules",
        "conversation_message_participants",
        "conversation_messages",
        "conversation_participants",
        "conversations",
        "course_account_associations",
        "course_sections",
        "courses",
        "custom_gradebook_column_data",
        "custom_gradebook_columns",
        "developer_key_account_bindings",
        "developer_keys",
        "discussion_entries",
        "discussion_entry_participants",
        "discussion_topic_participants",
        "discussion_topics",
        "enrollment_dates_overrides",
        "enrollment_states",
        "enrollment_terms",
        "enrollments",
        "favorites",
        "folders",
        "grading_period_groups",
        "grading_periods",
        "grading_standards",
        "group_categories",
        "group_memberships",
        "groups",
        "late_policies",
        "learning_outcome_groups",
        "learning_outcome_question_results",
        "learning_outcome_results",
        "learning_outcomes",
        "lti_line_items",
        "lti_resource_links",
        "lti_results",
        "master_courses_child_content_tags",
        "master_courses_child_subscriptions",
        "master_courses_master_content_tags",
        "master_courses_master_migrations",
        "master_courses_master_templates",
        "master_courses_migration_results",
        "originality_reports",
        "outcome_proficiencies",
        "outcome_proficiency_ratings",
        "post_policies",
        "pseudonyms",
        "quiz_groups",
        "quiz_questions",
        "quiz_submissions",
        "quizzes",
        "role_overrides",
        "roles",
        "rubric_assessments",
        "rubric_associations",
        "rubrics",
        "score_statistics",
        "scores",
        "submission_comments",
        "submission_versions",
        "submissions",
        "user_account_associations",
        "user_notes",
        "users",
        "web_conference_participants",
        "web_conferences",
        "wiki_pages",
        "wikis"
      ]
    },
    {
      "name": "Canvas tables not exposed",
      "tags": [
        "abstract_courses",
        "appointment_groups",
        "assessment_requests",
        "asset_user_accesses",
        "authentication_providers",
        "cloned_items",
        "content_exports",
        "eportfolios",
        "epub_exports",
        "external_feeds",
        "gradebook_uploads",
        "group_and_membership_importers",
        "live_assessments_assessments",
        "live_assessments_submissions",
        "lti_message_handlers",
        "media_objects",
        "moderated_grading_provisional_grades",
        "outcome_imports",
        "purgatories",
        "quiz_statistics",
        "sis_batches",
        "usage_rights",
        "versions"
      ]
    },
    {
      "name": "Auxiliary types for Canvas tables",
      "tags": [
        "assignment_groups__rules",
        "assignments__turnitin_settings",
        "context_external_tools__settings",
        "courses__settings",
        "quiz_questions__question_data"
      ]
    },
    { "name": "Log tables", "tags": ["user_agents", "web_logs"] }
  ]
}
