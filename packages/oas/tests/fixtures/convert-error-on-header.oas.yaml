openapi: 3.0.1
info:
  title: Swagger Petstore
  description:
    'This is a sample server Petstore server.  You can find out more about     Swagger
    at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For
    this sample, you can use the api key `special-key` to test the authorization     filters.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://{instance}.swagger.io:{port}/{basePath}
    variables:
      instance:
        default: petstore
      port:
        enum:
          - '8443'
          - '443'
        default: '8443'
      basePath:
        default: v2
paths:
  /store/order/{orderId}:
    put:
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            maximum: 10.0
            minimum: 1.0
            type: integer
            format: int64
        - name: exclude
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
              enum: ['petId', 'quantity', 'shipDate', 'status', 'complete']
              minItems: 1
              maxItems: 5
              uniqueItems: true
        - name: x-date
          in: header
          schema:
            type: 'string'
            format: 'date'
            minLength: 11
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
